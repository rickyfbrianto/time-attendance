
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `srl` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model srl
 * 
 */
export type srlModel = runtime.Types.Result.DefaultSelection<Prisma.$srlPayload>

export type AggregateSrl = {
  _count: SrlCountAggregateOutputType | null
  _min: SrlMinAggregateOutputType | null
  _max: SrlMaxAggregateOutputType | null
}

export type SrlMinAggregateOutputType = {
  srl_id: string | null
  spl_id: string | null
  payroll: string | null
  real_start: Date | null
  real_end: Date | null
  status1: $Enums.srl_status1 | null
  approval1: string | null
  status2: $Enums.srl_status2 | null
  approval2: string | null
  createdAt: Date | null
}

export type SrlMaxAggregateOutputType = {
  srl_id: string | null
  spl_id: string | null
  payroll: string | null
  real_start: Date | null
  real_end: Date | null
  status1: $Enums.srl_status1 | null
  approval1: string | null
  status2: $Enums.srl_status2 | null
  approval2: string | null
  createdAt: Date | null
}

export type SrlCountAggregateOutputType = {
  srl_id: number
  spl_id: number
  payroll: number
  real_start: number
  real_end: number
  status1: number
  approval1: number
  status2: number
  approval2: number
  createdAt: number
  _all: number
}


export type SrlMinAggregateInputType = {
  srl_id?: true
  spl_id?: true
  payroll?: true
  real_start?: true
  real_end?: true
  status1?: true
  approval1?: true
  status2?: true
  approval2?: true
  createdAt?: true
}

export type SrlMaxAggregateInputType = {
  srl_id?: true
  spl_id?: true
  payroll?: true
  real_start?: true
  real_end?: true
  status1?: true
  approval1?: true
  status2?: true
  approval2?: true
  createdAt?: true
}

export type SrlCountAggregateInputType = {
  srl_id?: true
  spl_id?: true
  payroll?: true
  real_start?: true
  real_end?: true
  status1?: true
  approval1?: true
  status2?: true
  approval2?: true
  createdAt?: true
  _all?: true
}

export type SrlAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which srl to aggregate.
   */
  where?: Prisma.srlWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of srls to fetch.
   */
  orderBy?: Prisma.srlOrderByWithRelationInput | Prisma.srlOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.srlWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` srls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` srls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned srls
  **/
  _count?: true | SrlCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SrlMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SrlMaxAggregateInputType
}

export type GetSrlAggregateType<T extends SrlAggregateArgs> = {
      [P in keyof T & keyof AggregateSrl]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSrl[P]>
    : Prisma.GetScalarType<T[P], AggregateSrl[P]>
}




export type srlGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.srlWhereInput
  orderBy?: Prisma.srlOrderByWithAggregationInput | Prisma.srlOrderByWithAggregationInput[]
  by: Prisma.SrlScalarFieldEnum[] | Prisma.SrlScalarFieldEnum
  having?: Prisma.srlScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SrlCountAggregateInputType | true
  _min?: SrlMinAggregateInputType
  _max?: SrlMaxAggregateInputType
}

export type SrlGroupByOutputType = {
  srl_id: string
  spl_id: string | null
  payroll: string | null
  real_start: Date
  real_end: Date
  status1: $Enums.srl_status1
  approval1: string | null
  status2: $Enums.srl_status2
  approval2: string | null
  createdAt: Date
  _count: SrlCountAggregateOutputType | null
  _min: SrlMinAggregateOutputType | null
  _max: SrlMaxAggregateOutputType | null
}

type GetSrlGroupByPayload<T extends srlGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SrlGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SrlGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SrlGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SrlGroupByOutputType[P]>
      }
    >
  > 



export type srlWhereInput = {
  AND?: Prisma.srlWhereInput | Prisma.srlWhereInput[]
  OR?: Prisma.srlWhereInput[]
  NOT?: Prisma.srlWhereInput | Prisma.srlWhereInput[]
  srl_id?: Prisma.StringFilter<"srl"> | string
  spl_id?: Prisma.StringNullableFilter<"srl"> | string | null
  payroll?: Prisma.StringNullableFilter<"srl"> | string | null
  real_start?: Prisma.DateTimeFilter<"srl"> | Date | string
  real_end?: Prisma.DateTimeFilter<"srl"> | Date | string
  status1?: Prisma.Enumsrl_status1Filter<"srl"> | $Enums.srl_status1
  approval1?: Prisma.StringNullableFilter<"srl"> | string | null
  status2?: Prisma.Enumsrl_status2Filter<"srl"> | $Enums.srl_status2
  approval2?: Prisma.StringNullableFilter<"srl"> | string | null
  createdAt?: Prisma.DateTimeFilter<"srl"> | Date | string
  employee_srl_approval1Toemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee_srl_approval2Toemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  spl?: Prisma.XOR<Prisma.SplNullableScalarRelationFilter, Prisma.splWhereInput> | null
  srl_detail?: Prisma.Srl_detailListRelationFilter
}

export type srlOrderByWithRelationInput = {
  srl_id?: Prisma.SortOrder
  spl_id?: Prisma.SortOrderInput | Prisma.SortOrder
  payroll?: Prisma.SortOrderInput | Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrderInput | Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  employee_srl_approval1Toemployee?: Prisma.employeeOrderByWithRelationInput
  employee_srl_approval2Toemployee?: Prisma.employeeOrderByWithRelationInput
  employee?: Prisma.employeeOrderByWithRelationInput
  spl?: Prisma.splOrderByWithRelationInput
  srl_detail?: Prisma.srl_detailOrderByRelationAggregateInput
  _relevance?: Prisma.srlOrderByRelevanceInput
}

export type srlWhereUniqueInput = Prisma.AtLeast<{
  srl_id?: string
  AND?: Prisma.srlWhereInput | Prisma.srlWhereInput[]
  OR?: Prisma.srlWhereInput[]
  NOT?: Prisma.srlWhereInput | Prisma.srlWhereInput[]
  spl_id?: Prisma.StringNullableFilter<"srl"> | string | null
  payroll?: Prisma.StringNullableFilter<"srl"> | string | null
  real_start?: Prisma.DateTimeFilter<"srl"> | Date | string
  real_end?: Prisma.DateTimeFilter<"srl"> | Date | string
  status1?: Prisma.Enumsrl_status1Filter<"srl"> | $Enums.srl_status1
  approval1?: Prisma.StringNullableFilter<"srl"> | string | null
  status2?: Prisma.Enumsrl_status2Filter<"srl"> | $Enums.srl_status2
  approval2?: Prisma.StringNullableFilter<"srl"> | string | null
  createdAt?: Prisma.DateTimeFilter<"srl"> | Date | string
  employee_srl_approval1Toemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee_srl_approval2Toemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  spl?: Prisma.XOR<Prisma.SplNullableScalarRelationFilter, Prisma.splWhereInput> | null
  srl_detail?: Prisma.Srl_detailListRelationFilter
}, "srl_id">

export type srlOrderByWithAggregationInput = {
  srl_id?: Prisma.SortOrder
  spl_id?: Prisma.SortOrderInput | Prisma.SortOrder
  payroll?: Prisma.SortOrderInput | Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrderInput | Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.srlCountOrderByAggregateInput
  _max?: Prisma.srlMaxOrderByAggregateInput
  _min?: Prisma.srlMinOrderByAggregateInput
}

export type srlScalarWhereWithAggregatesInput = {
  AND?: Prisma.srlScalarWhereWithAggregatesInput | Prisma.srlScalarWhereWithAggregatesInput[]
  OR?: Prisma.srlScalarWhereWithAggregatesInput[]
  NOT?: Prisma.srlScalarWhereWithAggregatesInput | Prisma.srlScalarWhereWithAggregatesInput[]
  srl_id?: Prisma.StringWithAggregatesFilter<"srl"> | string
  spl_id?: Prisma.StringNullableWithAggregatesFilter<"srl"> | string | null
  payroll?: Prisma.StringNullableWithAggregatesFilter<"srl"> | string | null
  real_start?: Prisma.DateTimeWithAggregatesFilter<"srl"> | Date | string
  real_end?: Prisma.DateTimeWithAggregatesFilter<"srl"> | Date | string
  status1?: Prisma.Enumsrl_status1WithAggregatesFilter<"srl"> | $Enums.srl_status1
  approval1?: Prisma.StringNullableWithAggregatesFilter<"srl"> | string | null
  status2?: Prisma.Enumsrl_status2WithAggregatesFilter<"srl"> | $Enums.srl_status2
  approval2?: Prisma.StringNullableWithAggregatesFilter<"srl"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"srl"> | Date | string
}

export type srlCreateInput = {
  srl_id: string
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  status2?: $Enums.srl_status2
  createdAt: Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval1ToemployeeInput
  employee_srl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval2ToemployeeInput
  employee?: Prisma.employeeCreateNestedOneWithoutSrlInput
  spl?: Prisma.splCreateNestedOneWithoutSrlInput
  srl_detail?: Prisma.srl_detailCreateNestedManyWithoutSrlInput
}

export type srlUncheckedCreateInput = {
  srl_id: string
  spl_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  approval1?: string | null
  status2?: $Enums.srl_status2
  approval2?: string | null
  createdAt: Date | string
  srl_detail?: Prisma.srl_detailUncheckedCreateNestedManyWithoutSrlInput
}

export type srlUpdateInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval1ToemployeeNestedInput
  employee_srl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval2ToemployeeNestedInput
  employee?: Prisma.employeeUpdateOneWithoutSrlNestedInput
  spl?: Prisma.splUpdateOneWithoutSrlNestedInput
  srl_detail?: Prisma.srl_detailUpdateManyWithoutSrlNestedInput
}

export type srlUncheckedUpdateInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  spl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  srl_detail?: Prisma.srl_detailUncheckedUpdateManyWithoutSrlNestedInput
}

export type srlCreateManyInput = {
  srl_id: string
  spl_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  approval1?: string | null
  status2?: $Enums.srl_status2
  approval2?: string | null
  createdAt: Date | string
}

export type srlUpdateManyMutationInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type srlUncheckedUpdateManyInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  spl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SrlListRelationFilter = {
  every?: Prisma.srlWhereInput
  some?: Prisma.srlWhereInput
  none?: Prisma.srlWhereInput
}

export type srlOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type srlOrderByRelevanceInput = {
  fields: Prisma.srlOrderByRelevanceFieldEnum | Prisma.srlOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type srlCountOrderByAggregateInput = {
  srl_id?: Prisma.SortOrder
  spl_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type srlMaxOrderByAggregateInput = {
  srl_id?: Prisma.SortOrder
  spl_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type srlMinOrderByAggregateInput = {
  srl_id?: Prisma.SortOrder
  spl_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SrlNullableScalarRelationFilter = {
  is?: Prisma.srlWhereInput | null
  isNot?: Prisma.srlWhereInput | null
}

export type srlCreateNestedManyWithoutEmployee_srl_approval1ToemployeeInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput> | Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlCreateOrConnectWithoutEmployee_srl_approval1ToemployeeInput[]
  createMany?: Prisma.srlCreateManyEmployee_srl_approval1ToemployeeInputEnvelope
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
}

export type srlCreateNestedManyWithoutEmployee_srl_approval2ToemployeeInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput> | Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlCreateOrConnectWithoutEmployee_srl_approval2ToemployeeInput[]
  createMany?: Prisma.srlCreateManyEmployee_srl_approval2ToemployeeInputEnvelope
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
}

export type srlCreateNestedManyWithoutEmployeeInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployeeInput, Prisma.srlUncheckedCreateWithoutEmployeeInput> | Prisma.srlCreateWithoutEmployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployeeInput | Prisma.srlCreateOrConnectWithoutEmployeeInput[]
  createMany?: Prisma.srlCreateManyEmployeeInputEnvelope
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
}

export type srlUncheckedCreateNestedManyWithoutEmployee_srl_approval1ToemployeeInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput> | Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlCreateOrConnectWithoutEmployee_srl_approval1ToemployeeInput[]
  createMany?: Prisma.srlCreateManyEmployee_srl_approval1ToemployeeInputEnvelope
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
}

export type srlUncheckedCreateNestedManyWithoutEmployee_srl_approval2ToemployeeInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput> | Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlCreateOrConnectWithoutEmployee_srl_approval2ToemployeeInput[]
  createMany?: Prisma.srlCreateManyEmployee_srl_approval2ToemployeeInputEnvelope
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
}

export type srlUncheckedCreateNestedManyWithoutEmployeeInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployeeInput, Prisma.srlUncheckedCreateWithoutEmployeeInput> | Prisma.srlCreateWithoutEmployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployeeInput | Prisma.srlCreateOrConnectWithoutEmployeeInput[]
  createMany?: Prisma.srlCreateManyEmployeeInputEnvelope
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
}

export type srlUpdateManyWithoutEmployee_srl_approval1ToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput> | Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlCreateOrConnectWithoutEmployee_srl_approval1ToemployeeInput[]
  upsert?: Prisma.srlUpsertWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlUpsertWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput[]
  createMany?: Prisma.srlCreateManyEmployee_srl_approval1ToemployeeInputEnvelope
  set?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  disconnect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  delete?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  update?: Prisma.srlUpdateWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlUpdateWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput[]
  updateMany?: Prisma.srlUpdateManyWithWhereWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlUpdateManyWithWhereWithoutEmployee_srl_approval1ToemployeeInput[]
  deleteMany?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
}

export type srlUpdateManyWithoutEmployee_srl_approval2ToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput> | Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlCreateOrConnectWithoutEmployee_srl_approval2ToemployeeInput[]
  upsert?: Prisma.srlUpsertWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlUpsertWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput[]
  createMany?: Prisma.srlCreateManyEmployee_srl_approval2ToemployeeInputEnvelope
  set?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  disconnect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  delete?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  update?: Prisma.srlUpdateWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlUpdateWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput[]
  updateMany?: Prisma.srlUpdateManyWithWhereWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlUpdateManyWithWhereWithoutEmployee_srl_approval2ToemployeeInput[]
  deleteMany?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
}

export type srlUpdateManyWithoutEmployeeNestedInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployeeInput, Prisma.srlUncheckedCreateWithoutEmployeeInput> | Prisma.srlCreateWithoutEmployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployeeInput | Prisma.srlCreateOrConnectWithoutEmployeeInput[]
  upsert?: Prisma.srlUpsertWithWhereUniqueWithoutEmployeeInput | Prisma.srlUpsertWithWhereUniqueWithoutEmployeeInput[]
  createMany?: Prisma.srlCreateManyEmployeeInputEnvelope
  set?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  disconnect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  delete?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  update?: Prisma.srlUpdateWithWhereUniqueWithoutEmployeeInput | Prisma.srlUpdateWithWhereUniqueWithoutEmployeeInput[]
  updateMany?: Prisma.srlUpdateManyWithWhereWithoutEmployeeInput | Prisma.srlUpdateManyWithWhereWithoutEmployeeInput[]
  deleteMany?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
}

export type srlUncheckedUpdateManyWithoutEmployee_srl_approval1ToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput> | Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlCreateOrConnectWithoutEmployee_srl_approval1ToemployeeInput[]
  upsert?: Prisma.srlUpsertWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlUpsertWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput[]
  createMany?: Prisma.srlCreateManyEmployee_srl_approval1ToemployeeInputEnvelope
  set?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  disconnect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  delete?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  update?: Prisma.srlUpdateWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlUpdateWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput[]
  updateMany?: Prisma.srlUpdateManyWithWhereWithoutEmployee_srl_approval1ToemployeeInput | Prisma.srlUpdateManyWithWhereWithoutEmployee_srl_approval1ToemployeeInput[]
  deleteMany?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
}

export type srlUncheckedUpdateManyWithoutEmployee_srl_approval2ToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput> | Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlCreateOrConnectWithoutEmployee_srl_approval2ToemployeeInput[]
  upsert?: Prisma.srlUpsertWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlUpsertWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput[]
  createMany?: Prisma.srlCreateManyEmployee_srl_approval2ToemployeeInputEnvelope
  set?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  disconnect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  delete?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  update?: Prisma.srlUpdateWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlUpdateWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput[]
  updateMany?: Prisma.srlUpdateManyWithWhereWithoutEmployee_srl_approval2ToemployeeInput | Prisma.srlUpdateManyWithWhereWithoutEmployee_srl_approval2ToemployeeInput[]
  deleteMany?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
}

export type srlUncheckedUpdateManyWithoutEmployeeNestedInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutEmployeeInput, Prisma.srlUncheckedCreateWithoutEmployeeInput> | Prisma.srlCreateWithoutEmployeeInput[] | Prisma.srlUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutEmployeeInput | Prisma.srlCreateOrConnectWithoutEmployeeInput[]
  upsert?: Prisma.srlUpsertWithWhereUniqueWithoutEmployeeInput | Prisma.srlUpsertWithWhereUniqueWithoutEmployeeInput[]
  createMany?: Prisma.srlCreateManyEmployeeInputEnvelope
  set?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  disconnect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  delete?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  update?: Prisma.srlUpdateWithWhereUniqueWithoutEmployeeInput | Prisma.srlUpdateWithWhereUniqueWithoutEmployeeInput[]
  updateMany?: Prisma.srlUpdateManyWithWhereWithoutEmployeeInput | Prisma.srlUpdateManyWithWhereWithoutEmployeeInput[]
  deleteMany?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
}

export type srlCreateNestedManyWithoutSplInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutSplInput, Prisma.srlUncheckedCreateWithoutSplInput> | Prisma.srlCreateWithoutSplInput[] | Prisma.srlUncheckedCreateWithoutSplInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutSplInput | Prisma.srlCreateOrConnectWithoutSplInput[]
  createMany?: Prisma.srlCreateManySplInputEnvelope
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
}

export type srlUncheckedCreateNestedManyWithoutSplInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutSplInput, Prisma.srlUncheckedCreateWithoutSplInput> | Prisma.srlCreateWithoutSplInput[] | Prisma.srlUncheckedCreateWithoutSplInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutSplInput | Prisma.srlCreateOrConnectWithoutSplInput[]
  createMany?: Prisma.srlCreateManySplInputEnvelope
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
}

export type srlUpdateManyWithoutSplNestedInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutSplInput, Prisma.srlUncheckedCreateWithoutSplInput> | Prisma.srlCreateWithoutSplInput[] | Prisma.srlUncheckedCreateWithoutSplInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutSplInput | Prisma.srlCreateOrConnectWithoutSplInput[]
  upsert?: Prisma.srlUpsertWithWhereUniqueWithoutSplInput | Prisma.srlUpsertWithWhereUniqueWithoutSplInput[]
  createMany?: Prisma.srlCreateManySplInputEnvelope
  set?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  disconnect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  delete?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  update?: Prisma.srlUpdateWithWhereUniqueWithoutSplInput | Prisma.srlUpdateWithWhereUniqueWithoutSplInput[]
  updateMany?: Prisma.srlUpdateManyWithWhereWithoutSplInput | Prisma.srlUpdateManyWithWhereWithoutSplInput[]
  deleteMany?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
}

export type srlUncheckedUpdateManyWithoutSplNestedInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutSplInput, Prisma.srlUncheckedCreateWithoutSplInput> | Prisma.srlCreateWithoutSplInput[] | Prisma.srlUncheckedCreateWithoutSplInput[]
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutSplInput | Prisma.srlCreateOrConnectWithoutSplInput[]
  upsert?: Prisma.srlUpsertWithWhereUniqueWithoutSplInput | Prisma.srlUpsertWithWhereUniqueWithoutSplInput[]
  createMany?: Prisma.srlCreateManySplInputEnvelope
  set?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  disconnect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  delete?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  connect?: Prisma.srlWhereUniqueInput | Prisma.srlWhereUniqueInput[]
  update?: Prisma.srlUpdateWithWhereUniqueWithoutSplInput | Prisma.srlUpdateWithWhereUniqueWithoutSplInput[]
  updateMany?: Prisma.srlUpdateManyWithWhereWithoutSplInput | Prisma.srlUpdateManyWithWhereWithoutSplInput[]
  deleteMany?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
}

export type Enumsrl_status1FieldUpdateOperationsInput = {
  set?: $Enums.srl_status1
}

export type Enumsrl_status2FieldUpdateOperationsInput = {
  set?: $Enums.srl_status2
}

export type srlCreateNestedOneWithoutSrl_detailInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutSrl_detailInput, Prisma.srlUncheckedCreateWithoutSrl_detailInput>
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutSrl_detailInput
  connect?: Prisma.srlWhereUniqueInput
}

export type srlUpdateOneWithoutSrl_detailNestedInput = {
  create?: Prisma.XOR<Prisma.srlCreateWithoutSrl_detailInput, Prisma.srlUncheckedCreateWithoutSrl_detailInput>
  connectOrCreate?: Prisma.srlCreateOrConnectWithoutSrl_detailInput
  upsert?: Prisma.srlUpsertWithoutSrl_detailInput
  disconnect?: Prisma.srlWhereInput | boolean
  delete?: Prisma.srlWhereInput | boolean
  connect?: Prisma.srlWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.srlUpdateToOneWithWhereWithoutSrl_detailInput, Prisma.srlUpdateWithoutSrl_detailInput>, Prisma.srlUncheckedUpdateWithoutSrl_detailInput>
}

export type srlCreateWithoutEmployee_srl_approval1ToemployeeInput = {
  srl_id: string
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  status2?: $Enums.srl_status2
  createdAt: Date | string
  employee_srl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval2ToemployeeInput
  employee?: Prisma.employeeCreateNestedOneWithoutSrlInput
  spl?: Prisma.splCreateNestedOneWithoutSrlInput
  srl_detail?: Prisma.srl_detailCreateNestedManyWithoutSrlInput
}

export type srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput = {
  srl_id: string
  spl_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  status2?: $Enums.srl_status2
  approval2?: string | null
  createdAt: Date | string
  srl_detail?: Prisma.srl_detailUncheckedCreateNestedManyWithoutSrlInput
}

export type srlCreateOrConnectWithoutEmployee_srl_approval1ToemployeeInput = {
  where: Prisma.srlWhereUniqueInput
  create: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput>
}

export type srlCreateManyEmployee_srl_approval1ToemployeeInputEnvelope = {
  data: Prisma.srlCreateManyEmployee_srl_approval1ToemployeeInput | Prisma.srlCreateManyEmployee_srl_approval1ToemployeeInput[]
  skipDuplicates?: boolean
}

export type srlCreateWithoutEmployee_srl_approval2ToemployeeInput = {
  srl_id: string
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  status2?: $Enums.srl_status2
  createdAt: Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval1ToemployeeInput
  employee?: Prisma.employeeCreateNestedOneWithoutSrlInput
  spl?: Prisma.splCreateNestedOneWithoutSrlInput
  srl_detail?: Prisma.srl_detailCreateNestedManyWithoutSrlInput
}

export type srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput = {
  srl_id: string
  spl_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  approval1?: string | null
  status2?: $Enums.srl_status2
  createdAt: Date | string
  srl_detail?: Prisma.srl_detailUncheckedCreateNestedManyWithoutSrlInput
}

export type srlCreateOrConnectWithoutEmployee_srl_approval2ToemployeeInput = {
  where: Prisma.srlWhereUniqueInput
  create: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput>
}

export type srlCreateManyEmployee_srl_approval2ToemployeeInputEnvelope = {
  data: Prisma.srlCreateManyEmployee_srl_approval2ToemployeeInput | Prisma.srlCreateManyEmployee_srl_approval2ToemployeeInput[]
  skipDuplicates?: boolean
}

export type srlCreateWithoutEmployeeInput = {
  srl_id: string
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  status2?: $Enums.srl_status2
  createdAt: Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval1ToemployeeInput
  employee_srl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval2ToemployeeInput
  spl?: Prisma.splCreateNestedOneWithoutSrlInput
  srl_detail?: Prisma.srl_detailCreateNestedManyWithoutSrlInput
}

export type srlUncheckedCreateWithoutEmployeeInput = {
  srl_id: string
  spl_id?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  approval1?: string | null
  status2?: $Enums.srl_status2
  approval2?: string | null
  createdAt: Date | string
  srl_detail?: Prisma.srl_detailUncheckedCreateNestedManyWithoutSrlInput
}

export type srlCreateOrConnectWithoutEmployeeInput = {
  where: Prisma.srlWhereUniqueInput
  create: Prisma.XOR<Prisma.srlCreateWithoutEmployeeInput, Prisma.srlUncheckedCreateWithoutEmployeeInput>
}

export type srlCreateManyEmployeeInputEnvelope = {
  data: Prisma.srlCreateManyEmployeeInput | Prisma.srlCreateManyEmployeeInput[]
  skipDuplicates?: boolean
}

export type srlUpsertWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput = {
  where: Prisma.srlWhereUniqueInput
  update: Prisma.XOR<Prisma.srlUpdateWithoutEmployee_srl_approval1ToemployeeInput, Prisma.srlUncheckedUpdateWithoutEmployee_srl_approval1ToemployeeInput>
  create: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval1ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval1ToemployeeInput>
}

export type srlUpdateWithWhereUniqueWithoutEmployee_srl_approval1ToemployeeInput = {
  where: Prisma.srlWhereUniqueInput
  data: Prisma.XOR<Prisma.srlUpdateWithoutEmployee_srl_approval1ToemployeeInput, Prisma.srlUncheckedUpdateWithoutEmployee_srl_approval1ToemployeeInput>
}

export type srlUpdateManyWithWhereWithoutEmployee_srl_approval1ToemployeeInput = {
  where: Prisma.srlScalarWhereInput
  data: Prisma.XOR<Prisma.srlUpdateManyMutationInput, Prisma.srlUncheckedUpdateManyWithoutEmployee_srl_approval1ToemployeeInput>
}

export type srlScalarWhereInput = {
  AND?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
  OR?: Prisma.srlScalarWhereInput[]
  NOT?: Prisma.srlScalarWhereInput | Prisma.srlScalarWhereInput[]
  srl_id?: Prisma.StringFilter<"srl"> | string
  spl_id?: Prisma.StringNullableFilter<"srl"> | string | null
  payroll?: Prisma.StringNullableFilter<"srl"> | string | null
  real_start?: Prisma.DateTimeFilter<"srl"> | Date | string
  real_end?: Prisma.DateTimeFilter<"srl"> | Date | string
  status1?: Prisma.Enumsrl_status1Filter<"srl"> | $Enums.srl_status1
  approval1?: Prisma.StringNullableFilter<"srl"> | string | null
  status2?: Prisma.Enumsrl_status2Filter<"srl"> | $Enums.srl_status2
  approval2?: Prisma.StringNullableFilter<"srl"> | string | null
  createdAt?: Prisma.DateTimeFilter<"srl"> | Date | string
}

export type srlUpsertWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput = {
  where: Prisma.srlWhereUniqueInput
  update: Prisma.XOR<Prisma.srlUpdateWithoutEmployee_srl_approval2ToemployeeInput, Prisma.srlUncheckedUpdateWithoutEmployee_srl_approval2ToemployeeInput>
  create: Prisma.XOR<Prisma.srlCreateWithoutEmployee_srl_approval2ToemployeeInput, Prisma.srlUncheckedCreateWithoutEmployee_srl_approval2ToemployeeInput>
}

export type srlUpdateWithWhereUniqueWithoutEmployee_srl_approval2ToemployeeInput = {
  where: Prisma.srlWhereUniqueInput
  data: Prisma.XOR<Prisma.srlUpdateWithoutEmployee_srl_approval2ToemployeeInput, Prisma.srlUncheckedUpdateWithoutEmployee_srl_approval2ToemployeeInput>
}

export type srlUpdateManyWithWhereWithoutEmployee_srl_approval2ToemployeeInput = {
  where: Prisma.srlScalarWhereInput
  data: Prisma.XOR<Prisma.srlUpdateManyMutationInput, Prisma.srlUncheckedUpdateManyWithoutEmployee_srl_approval2ToemployeeInput>
}

export type srlUpsertWithWhereUniqueWithoutEmployeeInput = {
  where: Prisma.srlWhereUniqueInput
  update: Prisma.XOR<Prisma.srlUpdateWithoutEmployeeInput, Prisma.srlUncheckedUpdateWithoutEmployeeInput>
  create: Prisma.XOR<Prisma.srlCreateWithoutEmployeeInput, Prisma.srlUncheckedCreateWithoutEmployeeInput>
}

export type srlUpdateWithWhereUniqueWithoutEmployeeInput = {
  where: Prisma.srlWhereUniqueInput
  data: Prisma.XOR<Prisma.srlUpdateWithoutEmployeeInput, Prisma.srlUncheckedUpdateWithoutEmployeeInput>
}

export type srlUpdateManyWithWhereWithoutEmployeeInput = {
  where: Prisma.srlScalarWhereInput
  data: Prisma.XOR<Prisma.srlUpdateManyMutationInput, Prisma.srlUncheckedUpdateManyWithoutEmployeeInput>
}

export type srlCreateWithoutSplInput = {
  srl_id: string
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  status2?: $Enums.srl_status2
  createdAt: Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval1ToemployeeInput
  employee_srl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval2ToemployeeInput
  employee?: Prisma.employeeCreateNestedOneWithoutSrlInput
  srl_detail?: Prisma.srl_detailCreateNestedManyWithoutSrlInput
}

export type srlUncheckedCreateWithoutSplInput = {
  srl_id: string
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  approval1?: string | null
  status2?: $Enums.srl_status2
  approval2?: string | null
  createdAt: Date | string
  srl_detail?: Prisma.srl_detailUncheckedCreateNestedManyWithoutSrlInput
}

export type srlCreateOrConnectWithoutSplInput = {
  where: Prisma.srlWhereUniqueInput
  create: Prisma.XOR<Prisma.srlCreateWithoutSplInput, Prisma.srlUncheckedCreateWithoutSplInput>
}

export type srlCreateManySplInputEnvelope = {
  data: Prisma.srlCreateManySplInput | Prisma.srlCreateManySplInput[]
  skipDuplicates?: boolean
}

export type srlUpsertWithWhereUniqueWithoutSplInput = {
  where: Prisma.srlWhereUniqueInput
  update: Prisma.XOR<Prisma.srlUpdateWithoutSplInput, Prisma.srlUncheckedUpdateWithoutSplInput>
  create: Prisma.XOR<Prisma.srlCreateWithoutSplInput, Prisma.srlUncheckedCreateWithoutSplInput>
}

export type srlUpdateWithWhereUniqueWithoutSplInput = {
  where: Prisma.srlWhereUniqueInput
  data: Prisma.XOR<Prisma.srlUpdateWithoutSplInput, Prisma.srlUncheckedUpdateWithoutSplInput>
}

export type srlUpdateManyWithWhereWithoutSplInput = {
  where: Prisma.srlScalarWhereInput
  data: Prisma.XOR<Prisma.srlUpdateManyMutationInput, Prisma.srlUncheckedUpdateManyWithoutSplInput>
}

export type srlCreateWithoutSrl_detailInput = {
  srl_id: string
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  status2?: $Enums.srl_status2
  createdAt: Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval1ToemployeeInput
  employee_srl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSrl_srl_approval2ToemployeeInput
  employee?: Prisma.employeeCreateNestedOneWithoutSrlInput
  spl?: Prisma.splCreateNestedOneWithoutSrlInput
}

export type srlUncheckedCreateWithoutSrl_detailInput = {
  srl_id: string
  spl_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  approval1?: string | null
  status2?: $Enums.srl_status2
  approval2?: string | null
  createdAt: Date | string
}

export type srlCreateOrConnectWithoutSrl_detailInput = {
  where: Prisma.srlWhereUniqueInput
  create: Prisma.XOR<Prisma.srlCreateWithoutSrl_detailInput, Prisma.srlUncheckedCreateWithoutSrl_detailInput>
}

export type srlUpsertWithoutSrl_detailInput = {
  update: Prisma.XOR<Prisma.srlUpdateWithoutSrl_detailInput, Prisma.srlUncheckedUpdateWithoutSrl_detailInput>
  create: Prisma.XOR<Prisma.srlCreateWithoutSrl_detailInput, Prisma.srlUncheckedCreateWithoutSrl_detailInput>
  where?: Prisma.srlWhereInput
}

export type srlUpdateToOneWithWhereWithoutSrl_detailInput = {
  where?: Prisma.srlWhereInput
  data: Prisma.XOR<Prisma.srlUpdateWithoutSrl_detailInput, Prisma.srlUncheckedUpdateWithoutSrl_detailInput>
}

export type srlUpdateWithoutSrl_detailInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval1ToemployeeNestedInput
  employee_srl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval2ToemployeeNestedInput
  employee?: Prisma.employeeUpdateOneWithoutSrlNestedInput
  spl?: Prisma.splUpdateOneWithoutSrlNestedInput
}

export type srlUncheckedUpdateWithoutSrl_detailInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  spl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type srlCreateManyEmployee_srl_approval1ToemployeeInput = {
  srl_id: string
  spl_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  status2?: $Enums.srl_status2
  approval2?: string | null
  createdAt: Date | string
}

export type srlCreateManyEmployee_srl_approval2ToemployeeInput = {
  srl_id: string
  spl_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  approval1?: string | null
  status2?: $Enums.srl_status2
  createdAt: Date | string
}

export type srlCreateManyEmployeeInput = {
  srl_id: string
  spl_id?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  approval1?: string | null
  status2?: $Enums.srl_status2
  approval2?: string | null
  createdAt: Date | string
}

export type srlUpdateWithoutEmployee_srl_approval1ToemployeeInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_srl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval2ToemployeeNestedInput
  employee?: Prisma.employeeUpdateOneWithoutSrlNestedInput
  spl?: Prisma.splUpdateOneWithoutSrlNestedInput
  srl_detail?: Prisma.srl_detailUpdateManyWithoutSrlNestedInput
}

export type srlUncheckedUpdateWithoutEmployee_srl_approval1ToemployeeInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  spl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  srl_detail?: Prisma.srl_detailUncheckedUpdateManyWithoutSrlNestedInput
}

export type srlUncheckedUpdateManyWithoutEmployee_srl_approval1ToemployeeInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  spl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type srlUpdateWithoutEmployee_srl_approval2ToemployeeInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval1ToemployeeNestedInput
  employee?: Prisma.employeeUpdateOneWithoutSrlNestedInput
  spl?: Prisma.splUpdateOneWithoutSrlNestedInput
  srl_detail?: Prisma.srl_detailUpdateManyWithoutSrlNestedInput
}

export type srlUncheckedUpdateWithoutEmployee_srl_approval2ToemployeeInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  spl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  srl_detail?: Prisma.srl_detailUncheckedUpdateManyWithoutSrlNestedInput
}

export type srlUncheckedUpdateManyWithoutEmployee_srl_approval2ToemployeeInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  spl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type srlUpdateWithoutEmployeeInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval1ToemployeeNestedInput
  employee_srl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval2ToemployeeNestedInput
  spl?: Prisma.splUpdateOneWithoutSrlNestedInput
  srl_detail?: Prisma.srl_detailUpdateManyWithoutSrlNestedInput
}

export type srlUncheckedUpdateWithoutEmployeeInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  spl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  srl_detail?: Prisma.srl_detailUncheckedUpdateManyWithoutSrlNestedInput
}

export type srlUncheckedUpdateManyWithoutEmployeeInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  spl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type srlCreateManySplInput = {
  srl_id: string
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status1?: $Enums.srl_status1
  approval1?: string | null
  status2?: $Enums.srl_status2
  approval2?: string | null
  createdAt: Date | string
}

export type srlUpdateWithoutSplInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_srl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval1ToemployeeNestedInput
  employee_srl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSrl_srl_approval2ToemployeeNestedInput
  employee?: Prisma.employeeUpdateOneWithoutSrlNestedInput
  srl_detail?: Prisma.srl_detailUpdateManyWithoutSrlNestedInput
}

export type srlUncheckedUpdateWithoutSplInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  srl_detail?: Prisma.srl_detailUncheckedUpdateManyWithoutSrlNestedInput
}

export type srlUncheckedUpdateManyWithoutSplInput = {
  srl_id?: Prisma.StringFieldUpdateOperationsInput | string
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumsrl_status1FieldUpdateOperationsInput | $Enums.srl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumsrl_status2FieldUpdateOperationsInput | $Enums.srl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type SrlCountOutputType
 */

export type SrlCountOutputType = {
  srl_detail: number
}

export type SrlCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  srl_detail?: boolean | SrlCountOutputTypeCountSrl_detailArgs
}

/**
 * SrlCountOutputType without action
 */
export type SrlCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SrlCountOutputType
   */
  select?: Prisma.SrlCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SrlCountOutputType without action
 */
export type SrlCountOutputTypeCountSrl_detailArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.srl_detailWhereInput
}


export type srlSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  srl_id?: boolean
  spl_id?: boolean
  payroll?: boolean
  real_start?: boolean
  real_end?: boolean
  status1?: boolean
  approval1?: boolean
  status2?: boolean
  approval2?: boolean
  createdAt?: boolean
  employee_srl_approval1Toemployee?: boolean | Prisma.srl$employee_srl_approval1ToemployeeArgs<ExtArgs>
  employee_srl_approval2Toemployee?: boolean | Prisma.srl$employee_srl_approval2ToemployeeArgs<ExtArgs>
  employee?: boolean | Prisma.srl$employeeArgs<ExtArgs>
  spl?: boolean | Prisma.srl$splArgs<ExtArgs>
  srl_detail?: boolean | Prisma.srl$srl_detailArgs<ExtArgs>
  _count?: boolean | Prisma.SrlCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["srl"]>



export type srlSelectScalar = {
  srl_id?: boolean
  spl_id?: boolean
  payroll?: boolean
  real_start?: boolean
  real_end?: boolean
  status1?: boolean
  approval1?: boolean
  status2?: boolean
  approval2?: boolean
  createdAt?: boolean
}

export type srlOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"srl_id" | "spl_id" | "payroll" | "real_start" | "real_end" | "status1" | "approval1" | "status2" | "approval2" | "createdAt", ExtArgs["result"]["srl"]>
export type srlInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee_srl_approval1Toemployee?: boolean | Prisma.srl$employee_srl_approval1ToemployeeArgs<ExtArgs>
  employee_srl_approval2Toemployee?: boolean | Prisma.srl$employee_srl_approval2ToemployeeArgs<ExtArgs>
  employee?: boolean | Prisma.srl$employeeArgs<ExtArgs>
  spl?: boolean | Prisma.srl$splArgs<ExtArgs>
  srl_detail?: boolean | Prisma.srl$srl_detailArgs<ExtArgs>
  _count?: boolean | Prisma.SrlCountOutputTypeDefaultArgs<ExtArgs>
}

export type $srlPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "srl"
  objects: {
    employee_srl_approval1Toemployee: Prisma.$employeePayload<ExtArgs> | null
    employee_srl_approval2Toemployee: Prisma.$employeePayload<ExtArgs> | null
    employee: Prisma.$employeePayload<ExtArgs> | null
    spl: Prisma.$splPayload<ExtArgs> | null
    srl_detail: Prisma.$srl_detailPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    srl_id: string
    spl_id: string | null
    payroll: string | null
    real_start: Date
    real_end: Date
    status1: $Enums.srl_status1
    approval1: string | null
    status2: $Enums.srl_status2
    approval2: string | null
    createdAt: Date
  }, ExtArgs["result"]["srl"]>
  composites: {}
}

export type srlGetPayload<S extends boolean | null | undefined | srlDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$srlPayload, S>

export type srlCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<srlFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SrlCountAggregateInputType | true
  }

export interface srlDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['srl'], meta: { name: 'srl' } }
  /**
   * Find zero or one Srl that matches the filter.
   * @param {srlFindUniqueArgs} args - Arguments to find a Srl
   * @example
   * // Get one Srl
   * const srl = await prisma.srl.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends srlFindUniqueArgs>(args: Prisma.SelectSubset<T, srlFindUniqueArgs<ExtArgs>>): Prisma.Prisma__srlClient<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Srl that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {srlFindUniqueOrThrowArgs} args - Arguments to find a Srl
   * @example
   * // Get one Srl
   * const srl = await prisma.srl.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends srlFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, srlFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__srlClient<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Srl that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srlFindFirstArgs} args - Arguments to find a Srl
   * @example
   * // Get one Srl
   * const srl = await prisma.srl.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends srlFindFirstArgs>(args?: Prisma.SelectSubset<T, srlFindFirstArgs<ExtArgs>>): Prisma.Prisma__srlClient<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Srl that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srlFindFirstOrThrowArgs} args - Arguments to find a Srl
   * @example
   * // Get one Srl
   * const srl = await prisma.srl.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends srlFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, srlFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__srlClient<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Srls that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srlFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Srls
   * const srls = await prisma.srl.findMany()
   * 
   * // Get first 10 Srls
   * const srls = await prisma.srl.findMany({ take: 10 })
   * 
   * // Only select the `srl_id`
   * const srlWithSrl_idOnly = await prisma.srl.findMany({ select: { srl_id: true } })
   * 
   */
  findMany<T extends srlFindManyArgs>(args?: Prisma.SelectSubset<T, srlFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Srl.
   * @param {srlCreateArgs} args - Arguments to create a Srl.
   * @example
   * // Create one Srl
   * const Srl = await prisma.srl.create({
   *   data: {
   *     // ... data to create a Srl
   *   }
   * })
   * 
   */
  create<T extends srlCreateArgs>(args: Prisma.SelectSubset<T, srlCreateArgs<ExtArgs>>): Prisma.Prisma__srlClient<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Srls.
   * @param {srlCreateManyArgs} args - Arguments to create many Srls.
   * @example
   * // Create many Srls
   * const srl = await prisma.srl.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends srlCreateManyArgs>(args?: Prisma.SelectSubset<T, srlCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Srl.
   * @param {srlDeleteArgs} args - Arguments to delete one Srl.
   * @example
   * // Delete one Srl
   * const Srl = await prisma.srl.delete({
   *   where: {
   *     // ... filter to delete one Srl
   *   }
   * })
   * 
   */
  delete<T extends srlDeleteArgs>(args: Prisma.SelectSubset<T, srlDeleteArgs<ExtArgs>>): Prisma.Prisma__srlClient<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Srl.
   * @param {srlUpdateArgs} args - Arguments to update one Srl.
   * @example
   * // Update one Srl
   * const srl = await prisma.srl.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends srlUpdateArgs>(args: Prisma.SelectSubset<T, srlUpdateArgs<ExtArgs>>): Prisma.Prisma__srlClient<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Srls.
   * @param {srlDeleteManyArgs} args - Arguments to filter Srls to delete.
   * @example
   * // Delete a few Srls
   * const { count } = await prisma.srl.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends srlDeleteManyArgs>(args?: Prisma.SelectSubset<T, srlDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Srls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srlUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Srls
   * const srl = await prisma.srl.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends srlUpdateManyArgs>(args: Prisma.SelectSubset<T, srlUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Srl.
   * @param {srlUpsertArgs} args - Arguments to update or create a Srl.
   * @example
   * // Update or create a Srl
   * const srl = await prisma.srl.upsert({
   *   create: {
   *     // ... data to create a Srl
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Srl we want to update
   *   }
   * })
   */
  upsert<T extends srlUpsertArgs>(args: Prisma.SelectSubset<T, srlUpsertArgs<ExtArgs>>): Prisma.Prisma__srlClient<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Srls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srlCountArgs} args - Arguments to filter Srls to count.
   * @example
   * // Count the number of Srls
   * const count = await prisma.srl.count({
   *   where: {
   *     // ... the filter for the Srls we want to count
   *   }
   * })
  **/
  count<T extends srlCountArgs>(
    args?: Prisma.Subset<T, srlCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SrlCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Srl.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SrlAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SrlAggregateArgs>(args: Prisma.Subset<T, SrlAggregateArgs>): Prisma.PrismaPromise<GetSrlAggregateType<T>>

  /**
   * Group by Srl.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srlGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends srlGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: srlGroupByArgs['orderBy'] }
      : { orderBy?: srlGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, srlGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSrlGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the srl model
 */
readonly fields: srlFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for srl.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__srlClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  employee_srl_approval1Toemployee<T extends Prisma.srl$employee_srl_approval1ToemployeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.srl$employee_srl_approval1ToemployeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  employee_srl_approval2Toemployee<T extends Prisma.srl$employee_srl_approval2ToemployeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.srl$employee_srl_approval2ToemployeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  employee<T extends Prisma.srl$employeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.srl$employeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  spl<T extends Prisma.srl$splArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.srl$splArgs<ExtArgs>>): Prisma.Prisma__splClient<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  srl_detail<T extends Prisma.srl$srl_detailArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.srl$srl_detailArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the srl model
 */
export interface srlFieldRefs {
  readonly srl_id: Prisma.FieldRef<"srl", 'String'>
  readonly spl_id: Prisma.FieldRef<"srl", 'String'>
  readonly payroll: Prisma.FieldRef<"srl", 'String'>
  readonly real_start: Prisma.FieldRef<"srl", 'DateTime'>
  readonly real_end: Prisma.FieldRef<"srl", 'DateTime'>
  readonly status1: Prisma.FieldRef<"srl", 'srl_status1'>
  readonly approval1: Prisma.FieldRef<"srl", 'String'>
  readonly status2: Prisma.FieldRef<"srl", 'srl_status2'>
  readonly approval2: Prisma.FieldRef<"srl", 'String'>
  readonly createdAt: Prisma.FieldRef<"srl", 'DateTime'>
}
    

// Custom InputTypes
/**
 * srl findUnique
 */
export type srlFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  /**
   * Filter, which srl to fetch.
   */
  where: Prisma.srlWhereUniqueInput
}

/**
 * srl findUniqueOrThrow
 */
export type srlFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  /**
   * Filter, which srl to fetch.
   */
  where: Prisma.srlWhereUniqueInput
}

/**
 * srl findFirst
 */
export type srlFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  /**
   * Filter, which srl to fetch.
   */
  where?: Prisma.srlWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of srls to fetch.
   */
  orderBy?: Prisma.srlOrderByWithRelationInput | Prisma.srlOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for srls.
   */
  cursor?: Prisma.srlWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` srls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` srls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of srls.
   */
  distinct?: Prisma.SrlScalarFieldEnum | Prisma.SrlScalarFieldEnum[]
}

/**
 * srl findFirstOrThrow
 */
export type srlFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  /**
   * Filter, which srl to fetch.
   */
  where?: Prisma.srlWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of srls to fetch.
   */
  orderBy?: Prisma.srlOrderByWithRelationInput | Prisma.srlOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for srls.
   */
  cursor?: Prisma.srlWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` srls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` srls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of srls.
   */
  distinct?: Prisma.SrlScalarFieldEnum | Prisma.SrlScalarFieldEnum[]
}

/**
 * srl findMany
 */
export type srlFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  /**
   * Filter, which srls to fetch.
   */
  where?: Prisma.srlWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of srls to fetch.
   */
  orderBy?: Prisma.srlOrderByWithRelationInput | Prisma.srlOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing srls.
   */
  cursor?: Prisma.srlWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` srls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` srls.
   */
  skip?: number
  distinct?: Prisma.SrlScalarFieldEnum | Prisma.SrlScalarFieldEnum[]
}

/**
 * srl create
 */
export type srlCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  /**
   * The data needed to create a srl.
   */
  data: Prisma.XOR<Prisma.srlCreateInput, Prisma.srlUncheckedCreateInput>
}

/**
 * srl createMany
 */
export type srlCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many srls.
   */
  data: Prisma.srlCreateManyInput | Prisma.srlCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * srl update
 */
export type srlUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  /**
   * The data needed to update a srl.
   */
  data: Prisma.XOR<Prisma.srlUpdateInput, Prisma.srlUncheckedUpdateInput>
  /**
   * Choose, which srl to update.
   */
  where: Prisma.srlWhereUniqueInput
}

/**
 * srl updateMany
 */
export type srlUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update srls.
   */
  data: Prisma.XOR<Prisma.srlUpdateManyMutationInput, Prisma.srlUncheckedUpdateManyInput>
  /**
   * Filter which srls to update
   */
  where?: Prisma.srlWhereInput
  /**
   * Limit how many srls to update.
   */
  limit?: number
}

/**
 * srl upsert
 */
export type srlUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  /**
   * The filter to search for the srl to update in case it exists.
   */
  where: Prisma.srlWhereUniqueInput
  /**
   * In case the srl found by the `where` argument doesn't exist, create a new srl with this data.
   */
  create: Prisma.XOR<Prisma.srlCreateInput, Prisma.srlUncheckedCreateInput>
  /**
   * In case the srl was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.srlUpdateInput, Prisma.srlUncheckedUpdateInput>
}

/**
 * srl delete
 */
export type srlDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  /**
   * Filter which srl to delete.
   */
  where: Prisma.srlWhereUniqueInput
}

/**
 * srl deleteMany
 */
export type srlDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which srls to delete
   */
  where?: Prisma.srlWhereInput
  /**
   * Limit how many srls to delete.
   */
  limit?: number
}

/**
 * srl.employee_srl_approval1Toemployee
 */
export type srl$employee_srl_approval1ToemployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * srl.employee_srl_approval2Toemployee
 */
export type srl$employee_srl_approval2ToemployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * srl.employee
 */
export type srl$employeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * srl.spl
 */
export type srl$splArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  where?: Prisma.splWhereInput
}

/**
 * srl.srl_detail
 */
export type srl$srl_detailArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  where?: Prisma.srl_detailWhereInput
  orderBy?: Prisma.srl_detailOrderByWithRelationInput | Prisma.srl_detailOrderByWithRelationInput[]
  cursor?: Prisma.srl_detailWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Srl_detailScalarFieldEnum | Prisma.Srl_detailScalarFieldEnum[]
}

/**
 * srl without action
 */
export type srlDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
}
