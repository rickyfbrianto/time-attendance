
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `dept` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model dept
 * 
 */
export type deptModel = runtime.Types.Result.DefaultSelection<Prisma.$deptPayload>

export type AggregateDept = {
  _count: DeptCountAggregateOutputType | null
  _min: DeptMinAggregateOutputType | null
  _max: DeptMaxAggregateOutputType | null
}

export type DeptMinAggregateOutputType = {
  dept_id: string | null
  dept_code: string | null
  initial: string | null
  name: string | null
  status: $Enums.dept_status | null
}

export type DeptMaxAggregateOutputType = {
  dept_id: string | null
  dept_code: string | null
  initial: string | null
  name: string | null
  status: $Enums.dept_status | null
}

export type DeptCountAggregateOutputType = {
  dept_id: number
  dept_code: number
  initial: number
  name: number
  status: number
  _all: number
}


export type DeptMinAggregateInputType = {
  dept_id?: true
  dept_code?: true
  initial?: true
  name?: true
  status?: true
}

export type DeptMaxAggregateInputType = {
  dept_id?: true
  dept_code?: true
  initial?: true
  name?: true
  status?: true
}

export type DeptCountAggregateInputType = {
  dept_id?: true
  dept_code?: true
  initial?: true
  name?: true
  status?: true
  _all?: true
}

export type DeptAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which dept to aggregate.
   */
  where?: Prisma.deptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of depts to fetch.
   */
  orderBy?: Prisma.deptOrderByWithRelationInput | Prisma.deptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.deptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` depts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` depts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned depts
  **/
  _count?: true | DeptCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DeptMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DeptMaxAggregateInputType
}

export type GetDeptAggregateType<T extends DeptAggregateArgs> = {
      [P in keyof T & keyof AggregateDept]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDept[P]>
    : Prisma.GetScalarType<T[P], AggregateDept[P]>
}




export type deptGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.deptWhereInput
  orderBy?: Prisma.deptOrderByWithAggregationInput | Prisma.deptOrderByWithAggregationInput[]
  by: Prisma.DeptScalarFieldEnum[] | Prisma.DeptScalarFieldEnum
  having?: Prisma.deptScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DeptCountAggregateInputType | true
  _min?: DeptMinAggregateInputType
  _max?: DeptMaxAggregateInputType
}

export type DeptGroupByOutputType = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
  _count: DeptCountAggregateOutputType | null
  _min: DeptMinAggregateOutputType | null
  _max: DeptMaxAggregateOutputType | null
}

type GetDeptGroupByPayload<T extends deptGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DeptGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DeptGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DeptGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DeptGroupByOutputType[P]>
      }
    >
  > 



export type deptWhereInput = {
  AND?: Prisma.deptWhereInput | Prisma.deptWhereInput[]
  OR?: Prisma.deptWhereInput[]
  NOT?: Prisma.deptWhereInput | Prisma.deptWhereInput[]
  dept_id?: Prisma.StringFilter<"dept"> | string
  dept_code?: Prisma.StringFilter<"dept"> | string
  initial?: Prisma.StringFilter<"dept"> | string
  name?: Prisma.StringFilter<"dept"> | string
  status?: Prisma.Enumdept_statusFilter<"dept"> | $Enums.dept_status
  employee?: Prisma.EmployeeListRelationFilter
  spl_spl_deptTodept?: Prisma.SplListRelationFilter
  sppd_sppd_deptTodept?: Prisma.SppdListRelationFilter
}

export type deptOrderByWithRelationInput = {
  dept_id?: Prisma.SortOrder
  dept_code?: Prisma.SortOrder
  initial?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  employee?: Prisma.employeeOrderByRelationAggregateInput
  spl_spl_deptTodept?: Prisma.splOrderByRelationAggregateInput
  sppd_sppd_deptTodept?: Prisma.sppdOrderByRelationAggregateInput
  _relevance?: Prisma.deptOrderByRelevanceInput
}

export type deptWhereUniqueInput = Prisma.AtLeast<{
  dept_id?: string
  dept_code?: string
  AND?: Prisma.deptWhereInput | Prisma.deptWhereInput[]
  OR?: Prisma.deptWhereInput[]
  NOT?: Prisma.deptWhereInput | Prisma.deptWhereInput[]
  initial?: Prisma.StringFilter<"dept"> | string
  name?: Prisma.StringFilter<"dept"> | string
  status?: Prisma.Enumdept_statusFilter<"dept"> | $Enums.dept_status
  employee?: Prisma.EmployeeListRelationFilter
  spl_spl_deptTodept?: Prisma.SplListRelationFilter
  sppd_sppd_deptTodept?: Prisma.SppdListRelationFilter
}, "dept_id" | "dept_code">

export type deptOrderByWithAggregationInput = {
  dept_id?: Prisma.SortOrder
  dept_code?: Prisma.SortOrder
  initial?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.deptCountOrderByAggregateInput
  _max?: Prisma.deptMaxOrderByAggregateInput
  _min?: Prisma.deptMinOrderByAggregateInput
}

export type deptScalarWhereWithAggregatesInput = {
  AND?: Prisma.deptScalarWhereWithAggregatesInput | Prisma.deptScalarWhereWithAggregatesInput[]
  OR?: Prisma.deptScalarWhereWithAggregatesInput[]
  NOT?: Prisma.deptScalarWhereWithAggregatesInput | Prisma.deptScalarWhereWithAggregatesInput[]
  dept_id?: Prisma.StringWithAggregatesFilter<"dept"> | string
  dept_code?: Prisma.StringWithAggregatesFilter<"dept"> | string
  initial?: Prisma.StringWithAggregatesFilter<"dept"> | string
  name?: Prisma.StringWithAggregatesFilter<"dept"> | string
  status?: Prisma.Enumdept_statusWithAggregatesFilter<"dept"> | $Enums.dept_status
}

export type deptCreateInput = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
  employee?: Prisma.employeeCreateNestedManyWithoutDeptInput
  spl_spl_deptTodept?: Prisma.splCreateNestedManyWithoutDept_spl_deptTodeptInput
  sppd_sppd_deptTodept?: Prisma.sppdCreateNestedManyWithoutDept_sppd_deptTodeptInput
}

export type deptUncheckedCreateInput = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
  employee?: Prisma.employeeUncheckedCreateNestedManyWithoutDeptInput
  spl_spl_deptTodept?: Prisma.splUncheckedCreateNestedManyWithoutDept_spl_deptTodeptInput
  sppd_sppd_deptTodept?: Prisma.sppdUncheckedCreateNestedManyWithoutDept_sppd_deptTodeptInput
}

export type deptUpdateInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
  employee?: Prisma.employeeUpdateManyWithoutDeptNestedInput
  spl_spl_deptTodept?: Prisma.splUpdateManyWithoutDept_spl_deptTodeptNestedInput
  sppd_sppd_deptTodept?: Prisma.sppdUpdateManyWithoutDept_sppd_deptTodeptNestedInput
}

export type deptUncheckedUpdateInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
  employee?: Prisma.employeeUncheckedUpdateManyWithoutDeptNestedInput
  spl_spl_deptTodept?: Prisma.splUncheckedUpdateManyWithoutDept_spl_deptTodeptNestedInput
  sppd_sppd_deptTodept?: Prisma.sppdUncheckedUpdateManyWithoutDept_sppd_deptTodeptNestedInput
}

export type deptCreateManyInput = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
}

export type deptUpdateManyMutationInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
}

export type deptUncheckedUpdateManyInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
}

export type DeptNullableScalarRelationFilter = {
  is?: Prisma.deptWhereInput | null
  isNot?: Prisma.deptWhereInput | null
}

export type deptOrderByRelevanceInput = {
  fields: Prisma.deptOrderByRelevanceFieldEnum | Prisma.deptOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type deptCountOrderByAggregateInput = {
  dept_id?: Prisma.SortOrder
  dept_code?: Prisma.SortOrder
  initial?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type deptMaxOrderByAggregateInput = {
  dept_id?: Prisma.SortOrder
  dept_code?: Prisma.SortOrder
  initial?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type deptMinOrderByAggregateInput = {
  dept_id?: Prisma.SortOrder
  dept_code?: Prisma.SortOrder
  initial?: Prisma.SortOrder
  name?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type deptCreateNestedOneWithoutEmployeeInput = {
  create?: Prisma.XOR<Prisma.deptCreateWithoutEmployeeInput, Prisma.deptUncheckedCreateWithoutEmployeeInput>
  connectOrCreate?: Prisma.deptCreateOrConnectWithoutEmployeeInput
  connect?: Prisma.deptWhereUniqueInput
}

export type deptUpdateOneWithoutEmployeeNestedInput = {
  create?: Prisma.XOR<Prisma.deptCreateWithoutEmployeeInput, Prisma.deptUncheckedCreateWithoutEmployeeInput>
  connectOrCreate?: Prisma.deptCreateOrConnectWithoutEmployeeInput
  upsert?: Prisma.deptUpsertWithoutEmployeeInput
  disconnect?: Prisma.deptWhereInput | boolean
  delete?: Prisma.deptWhereInput | boolean
  connect?: Prisma.deptWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.deptUpdateToOneWithWhereWithoutEmployeeInput, Prisma.deptUpdateWithoutEmployeeInput>, Prisma.deptUncheckedUpdateWithoutEmployeeInput>
}

export type deptCreateNestedOneWithoutSpl_spl_deptTodeptInput = {
  create?: Prisma.XOR<Prisma.deptCreateWithoutSpl_spl_deptTodeptInput, Prisma.deptUncheckedCreateWithoutSpl_spl_deptTodeptInput>
  connectOrCreate?: Prisma.deptCreateOrConnectWithoutSpl_spl_deptTodeptInput
  connect?: Prisma.deptWhereUniqueInput
}

export type deptUpdateOneWithoutSpl_spl_deptTodeptNestedInput = {
  create?: Prisma.XOR<Prisma.deptCreateWithoutSpl_spl_deptTodeptInput, Prisma.deptUncheckedCreateWithoutSpl_spl_deptTodeptInput>
  connectOrCreate?: Prisma.deptCreateOrConnectWithoutSpl_spl_deptTodeptInput
  upsert?: Prisma.deptUpsertWithoutSpl_spl_deptTodeptInput
  disconnect?: Prisma.deptWhereInput | boolean
  delete?: Prisma.deptWhereInput | boolean
  connect?: Prisma.deptWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.deptUpdateToOneWithWhereWithoutSpl_spl_deptTodeptInput, Prisma.deptUpdateWithoutSpl_spl_deptTodeptInput>, Prisma.deptUncheckedUpdateWithoutSpl_spl_deptTodeptInput>
}

export type Enumdept_statusFieldUpdateOperationsInput = {
  set?: $Enums.dept_status
}

export type deptCreateNestedOneWithoutSppd_sppd_deptTodeptInput = {
  create?: Prisma.XOR<Prisma.deptCreateWithoutSppd_sppd_deptTodeptInput, Prisma.deptUncheckedCreateWithoutSppd_sppd_deptTodeptInput>
  connectOrCreate?: Prisma.deptCreateOrConnectWithoutSppd_sppd_deptTodeptInput
  connect?: Prisma.deptWhereUniqueInput
}

export type deptUpdateOneWithoutSppd_sppd_deptTodeptNestedInput = {
  create?: Prisma.XOR<Prisma.deptCreateWithoutSppd_sppd_deptTodeptInput, Prisma.deptUncheckedCreateWithoutSppd_sppd_deptTodeptInput>
  connectOrCreate?: Prisma.deptCreateOrConnectWithoutSppd_sppd_deptTodeptInput
  upsert?: Prisma.deptUpsertWithoutSppd_sppd_deptTodeptInput
  disconnect?: Prisma.deptWhereInput | boolean
  delete?: Prisma.deptWhereInput | boolean
  connect?: Prisma.deptWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.deptUpdateToOneWithWhereWithoutSppd_sppd_deptTodeptInput, Prisma.deptUpdateWithoutSppd_sppd_deptTodeptInput>, Prisma.deptUncheckedUpdateWithoutSppd_sppd_deptTodeptInput>
}

export type deptCreateWithoutEmployeeInput = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
  spl_spl_deptTodept?: Prisma.splCreateNestedManyWithoutDept_spl_deptTodeptInput
  sppd_sppd_deptTodept?: Prisma.sppdCreateNestedManyWithoutDept_sppd_deptTodeptInput
}

export type deptUncheckedCreateWithoutEmployeeInput = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
  spl_spl_deptTodept?: Prisma.splUncheckedCreateNestedManyWithoutDept_spl_deptTodeptInput
  sppd_sppd_deptTodept?: Prisma.sppdUncheckedCreateNestedManyWithoutDept_sppd_deptTodeptInput
}

export type deptCreateOrConnectWithoutEmployeeInput = {
  where: Prisma.deptWhereUniqueInput
  create: Prisma.XOR<Prisma.deptCreateWithoutEmployeeInput, Prisma.deptUncheckedCreateWithoutEmployeeInput>
}

export type deptUpsertWithoutEmployeeInput = {
  update: Prisma.XOR<Prisma.deptUpdateWithoutEmployeeInput, Prisma.deptUncheckedUpdateWithoutEmployeeInput>
  create: Prisma.XOR<Prisma.deptCreateWithoutEmployeeInput, Prisma.deptUncheckedCreateWithoutEmployeeInput>
  where?: Prisma.deptWhereInput
}

export type deptUpdateToOneWithWhereWithoutEmployeeInput = {
  where?: Prisma.deptWhereInput
  data: Prisma.XOR<Prisma.deptUpdateWithoutEmployeeInput, Prisma.deptUncheckedUpdateWithoutEmployeeInput>
}

export type deptUpdateWithoutEmployeeInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
  spl_spl_deptTodept?: Prisma.splUpdateManyWithoutDept_spl_deptTodeptNestedInput
  sppd_sppd_deptTodept?: Prisma.sppdUpdateManyWithoutDept_sppd_deptTodeptNestedInput
}

export type deptUncheckedUpdateWithoutEmployeeInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
  spl_spl_deptTodept?: Prisma.splUncheckedUpdateManyWithoutDept_spl_deptTodeptNestedInput
  sppd_sppd_deptTodept?: Prisma.sppdUncheckedUpdateManyWithoutDept_sppd_deptTodeptNestedInput
}

export type deptCreateWithoutSpl_spl_deptTodeptInput = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
  employee?: Prisma.employeeCreateNestedManyWithoutDeptInput
  sppd_sppd_deptTodept?: Prisma.sppdCreateNestedManyWithoutDept_sppd_deptTodeptInput
}

export type deptUncheckedCreateWithoutSpl_spl_deptTodeptInput = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
  employee?: Prisma.employeeUncheckedCreateNestedManyWithoutDeptInput
  sppd_sppd_deptTodept?: Prisma.sppdUncheckedCreateNestedManyWithoutDept_sppd_deptTodeptInput
}

export type deptCreateOrConnectWithoutSpl_spl_deptTodeptInput = {
  where: Prisma.deptWhereUniqueInput
  create: Prisma.XOR<Prisma.deptCreateWithoutSpl_spl_deptTodeptInput, Prisma.deptUncheckedCreateWithoutSpl_spl_deptTodeptInput>
}

export type deptUpsertWithoutSpl_spl_deptTodeptInput = {
  update: Prisma.XOR<Prisma.deptUpdateWithoutSpl_spl_deptTodeptInput, Prisma.deptUncheckedUpdateWithoutSpl_spl_deptTodeptInput>
  create: Prisma.XOR<Prisma.deptCreateWithoutSpl_spl_deptTodeptInput, Prisma.deptUncheckedCreateWithoutSpl_spl_deptTodeptInput>
  where?: Prisma.deptWhereInput
}

export type deptUpdateToOneWithWhereWithoutSpl_spl_deptTodeptInput = {
  where?: Prisma.deptWhereInput
  data: Prisma.XOR<Prisma.deptUpdateWithoutSpl_spl_deptTodeptInput, Prisma.deptUncheckedUpdateWithoutSpl_spl_deptTodeptInput>
}

export type deptUpdateWithoutSpl_spl_deptTodeptInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
  employee?: Prisma.employeeUpdateManyWithoutDeptNestedInput
  sppd_sppd_deptTodept?: Prisma.sppdUpdateManyWithoutDept_sppd_deptTodeptNestedInput
}

export type deptUncheckedUpdateWithoutSpl_spl_deptTodeptInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
  employee?: Prisma.employeeUncheckedUpdateManyWithoutDeptNestedInput
  sppd_sppd_deptTodept?: Prisma.sppdUncheckedUpdateManyWithoutDept_sppd_deptTodeptNestedInput
}

export type deptCreateWithoutSppd_sppd_deptTodeptInput = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
  employee?: Prisma.employeeCreateNestedManyWithoutDeptInput
  spl_spl_deptTodept?: Prisma.splCreateNestedManyWithoutDept_spl_deptTodeptInput
}

export type deptUncheckedCreateWithoutSppd_sppd_deptTodeptInput = {
  dept_id: string
  dept_code: string
  initial: string
  name: string
  status: $Enums.dept_status
  employee?: Prisma.employeeUncheckedCreateNestedManyWithoutDeptInput
  spl_spl_deptTodept?: Prisma.splUncheckedCreateNestedManyWithoutDept_spl_deptTodeptInput
}

export type deptCreateOrConnectWithoutSppd_sppd_deptTodeptInput = {
  where: Prisma.deptWhereUniqueInput
  create: Prisma.XOR<Prisma.deptCreateWithoutSppd_sppd_deptTodeptInput, Prisma.deptUncheckedCreateWithoutSppd_sppd_deptTodeptInput>
}

export type deptUpsertWithoutSppd_sppd_deptTodeptInput = {
  update: Prisma.XOR<Prisma.deptUpdateWithoutSppd_sppd_deptTodeptInput, Prisma.deptUncheckedUpdateWithoutSppd_sppd_deptTodeptInput>
  create: Prisma.XOR<Prisma.deptCreateWithoutSppd_sppd_deptTodeptInput, Prisma.deptUncheckedCreateWithoutSppd_sppd_deptTodeptInput>
  where?: Prisma.deptWhereInput
}

export type deptUpdateToOneWithWhereWithoutSppd_sppd_deptTodeptInput = {
  where?: Prisma.deptWhereInput
  data: Prisma.XOR<Prisma.deptUpdateWithoutSppd_sppd_deptTodeptInput, Prisma.deptUncheckedUpdateWithoutSppd_sppd_deptTodeptInput>
}

export type deptUpdateWithoutSppd_sppd_deptTodeptInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
  employee?: Prisma.employeeUpdateManyWithoutDeptNestedInput
  spl_spl_deptTodept?: Prisma.splUpdateManyWithoutDept_spl_deptTodeptNestedInput
}

export type deptUncheckedUpdateWithoutSppd_sppd_deptTodeptInput = {
  dept_id?: Prisma.StringFieldUpdateOperationsInput | string
  dept_code?: Prisma.StringFieldUpdateOperationsInput | string
  initial?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumdept_statusFieldUpdateOperationsInput | $Enums.dept_status
  employee?: Prisma.employeeUncheckedUpdateManyWithoutDeptNestedInput
  spl_spl_deptTodept?: Prisma.splUncheckedUpdateManyWithoutDept_spl_deptTodeptNestedInput
}


/**
 * Count Type DeptCountOutputType
 */

export type DeptCountOutputType = {
  employee: number
  spl_spl_deptTodept: number
  sppd_sppd_deptTodept: number
}

export type DeptCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee?: boolean | DeptCountOutputTypeCountEmployeeArgs
  spl_spl_deptTodept?: boolean | DeptCountOutputTypeCountSpl_spl_deptTodeptArgs
  sppd_sppd_deptTodept?: boolean | DeptCountOutputTypeCountSppd_sppd_deptTodeptArgs
}

/**
 * DeptCountOutputType without action
 */
export type DeptCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DeptCountOutputType
   */
  select?: Prisma.DeptCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DeptCountOutputType without action
 */
export type DeptCountOutputTypeCountEmployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.employeeWhereInput
}

/**
 * DeptCountOutputType without action
 */
export type DeptCountOutputTypeCountSpl_spl_deptTodeptArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.splWhereInput
}

/**
 * DeptCountOutputType without action
 */
export type DeptCountOutputTypeCountSppd_sppd_deptTodeptArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.sppdWhereInput
}


export type deptSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  dept_id?: boolean
  dept_code?: boolean
  initial?: boolean
  name?: boolean
  status?: boolean
  employee?: boolean | Prisma.dept$employeeArgs<ExtArgs>
  spl_spl_deptTodept?: boolean | Prisma.dept$spl_spl_deptTodeptArgs<ExtArgs>
  sppd_sppd_deptTodept?: boolean | Prisma.dept$sppd_sppd_deptTodeptArgs<ExtArgs>
  _count?: boolean | Prisma.DeptCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["dept"]>



export type deptSelectScalar = {
  dept_id?: boolean
  dept_code?: boolean
  initial?: boolean
  name?: boolean
  status?: boolean
}

export type deptOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"dept_id" | "dept_code" | "initial" | "name" | "status", ExtArgs["result"]["dept"]>
export type deptInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee?: boolean | Prisma.dept$employeeArgs<ExtArgs>
  spl_spl_deptTodept?: boolean | Prisma.dept$spl_spl_deptTodeptArgs<ExtArgs>
  sppd_sppd_deptTodept?: boolean | Prisma.dept$sppd_sppd_deptTodeptArgs<ExtArgs>
  _count?: boolean | Prisma.DeptCountOutputTypeDefaultArgs<ExtArgs>
}

export type $deptPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "dept"
  objects: {
    employee: Prisma.$employeePayload<ExtArgs>[]
    spl_spl_deptTodept: Prisma.$splPayload<ExtArgs>[]
    sppd_sppd_deptTodept: Prisma.$sppdPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    dept_id: string
    dept_code: string
    initial: string
    name: string
    status: $Enums.dept_status
  }, ExtArgs["result"]["dept"]>
  composites: {}
}

export type deptGetPayload<S extends boolean | null | undefined | deptDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$deptPayload, S>

export type deptCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<deptFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DeptCountAggregateInputType | true
  }

export interface deptDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['dept'], meta: { name: 'dept' } }
  /**
   * Find zero or one Dept that matches the filter.
   * @param {deptFindUniqueArgs} args - Arguments to find a Dept
   * @example
   * // Get one Dept
   * const dept = await prisma.dept.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends deptFindUniqueArgs>(args: Prisma.SelectSubset<T, deptFindUniqueArgs<ExtArgs>>): Prisma.Prisma__deptClient<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Dept that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {deptFindUniqueOrThrowArgs} args - Arguments to find a Dept
   * @example
   * // Get one Dept
   * const dept = await prisma.dept.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends deptFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, deptFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__deptClient<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Dept that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {deptFindFirstArgs} args - Arguments to find a Dept
   * @example
   * // Get one Dept
   * const dept = await prisma.dept.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends deptFindFirstArgs>(args?: Prisma.SelectSubset<T, deptFindFirstArgs<ExtArgs>>): Prisma.Prisma__deptClient<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Dept that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {deptFindFirstOrThrowArgs} args - Arguments to find a Dept
   * @example
   * // Get one Dept
   * const dept = await prisma.dept.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends deptFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, deptFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__deptClient<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Depts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {deptFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Depts
   * const depts = await prisma.dept.findMany()
   * 
   * // Get first 10 Depts
   * const depts = await prisma.dept.findMany({ take: 10 })
   * 
   * // Only select the `dept_id`
   * const deptWithDept_idOnly = await prisma.dept.findMany({ select: { dept_id: true } })
   * 
   */
  findMany<T extends deptFindManyArgs>(args?: Prisma.SelectSubset<T, deptFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Dept.
   * @param {deptCreateArgs} args - Arguments to create a Dept.
   * @example
   * // Create one Dept
   * const Dept = await prisma.dept.create({
   *   data: {
   *     // ... data to create a Dept
   *   }
   * })
   * 
   */
  create<T extends deptCreateArgs>(args: Prisma.SelectSubset<T, deptCreateArgs<ExtArgs>>): Prisma.Prisma__deptClient<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Depts.
   * @param {deptCreateManyArgs} args - Arguments to create many Depts.
   * @example
   * // Create many Depts
   * const dept = await prisma.dept.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends deptCreateManyArgs>(args?: Prisma.SelectSubset<T, deptCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Dept.
   * @param {deptDeleteArgs} args - Arguments to delete one Dept.
   * @example
   * // Delete one Dept
   * const Dept = await prisma.dept.delete({
   *   where: {
   *     // ... filter to delete one Dept
   *   }
   * })
   * 
   */
  delete<T extends deptDeleteArgs>(args: Prisma.SelectSubset<T, deptDeleteArgs<ExtArgs>>): Prisma.Prisma__deptClient<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Dept.
   * @param {deptUpdateArgs} args - Arguments to update one Dept.
   * @example
   * // Update one Dept
   * const dept = await prisma.dept.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends deptUpdateArgs>(args: Prisma.SelectSubset<T, deptUpdateArgs<ExtArgs>>): Prisma.Prisma__deptClient<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Depts.
   * @param {deptDeleteManyArgs} args - Arguments to filter Depts to delete.
   * @example
   * // Delete a few Depts
   * const { count } = await prisma.dept.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends deptDeleteManyArgs>(args?: Prisma.SelectSubset<T, deptDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Depts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {deptUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Depts
   * const dept = await prisma.dept.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends deptUpdateManyArgs>(args: Prisma.SelectSubset<T, deptUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Dept.
   * @param {deptUpsertArgs} args - Arguments to update or create a Dept.
   * @example
   * // Update or create a Dept
   * const dept = await prisma.dept.upsert({
   *   create: {
   *     // ... data to create a Dept
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Dept we want to update
   *   }
   * })
   */
  upsert<T extends deptUpsertArgs>(args: Prisma.SelectSubset<T, deptUpsertArgs<ExtArgs>>): Prisma.Prisma__deptClient<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Depts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {deptCountArgs} args - Arguments to filter Depts to count.
   * @example
   * // Count the number of Depts
   * const count = await prisma.dept.count({
   *   where: {
   *     // ... the filter for the Depts we want to count
   *   }
   * })
  **/
  count<T extends deptCountArgs>(
    args?: Prisma.Subset<T, deptCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DeptCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Dept.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DeptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DeptAggregateArgs>(args: Prisma.Subset<T, DeptAggregateArgs>): Prisma.PrismaPromise<GetDeptAggregateType<T>>

  /**
   * Group by Dept.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {deptGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends deptGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: deptGroupByArgs['orderBy'] }
      : { orderBy?: deptGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, deptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeptGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the dept model
 */
readonly fields: deptFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for dept.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__deptClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  employee<T extends Prisma.dept$employeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.dept$employeeArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  spl_spl_deptTodept<T extends Prisma.dept$spl_spl_deptTodeptArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.dept$spl_spl_deptTodeptArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  sppd_sppd_deptTodept<T extends Prisma.dept$sppd_sppd_deptTodeptArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.dept$sppd_sppd_deptTodeptArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$sppdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the dept model
 */
export interface deptFieldRefs {
  readonly dept_id: Prisma.FieldRef<"dept", 'String'>
  readonly dept_code: Prisma.FieldRef<"dept", 'String'>
  readonly initial: Prisma.FieldRef<"dept", 'String'>
  readonly name: Prisma.FieldRef<"dept", 'String'>
  readonly status: Prisma.FieldRef<"dept", 'dept_status'>
}
    

// Custom InputTypes
/**
 * dept findUnique
 */
export type deptFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  /**
   * Filter, which dept to fetch.
   */
  where: Prisma.deptWhereUniqueInput
}

/**
 * dept findUniqueOrThrow
 */
export type deptFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  /**
   * Filter, which dept to fetch.
   */
  where: Prisma.deptWhereUniqueInput
}

/**
 * dept findFirst
 */
export type deptFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  /**
   * Filter, which dept to fetch.
   */
  where?: Prisma.deptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of depts to fetch.
   */
  orderBy?: Prisma.deptOrderByWithRelationInput | Prisma.deptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for depts.
   */
  cursor?: Prisma.deptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` depts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` depts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of depts.
   */
  distinct?: Prisma.DeptScalarFieldEnum | Prisma.DeptScalarFieldEnum[]
}

/**
 * dept findFirstOrThrow
 */
export type deptFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  /**
   * Filter, which dept to fetch.
   */
  where?: Prisma.deptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of depts to fetch.
   */
  orderBy?: Prisma.deptOrderByWithRelationInput | Prisma.deptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for depts.
   */
  cursor?: Prisma.deptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` depts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` depts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of depts.
   */
  distinct?: Prisma.DeptScalarFieldEnum | Prisma.DeptScalarFieldEnum[]
}

/**
 * dept findMany
 */
export type deptFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  /**
   * Filter, which depts to fetch.
   */
  where?: Prisma.deptWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of depts to fetch.
   */
  orderBy?: Prisma.deptOrderByWithRelationInput | Prisma.deptOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing depts.
   */
  cursor?: Prisma.deptWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` depts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` depts.
   */
  skip?: number
  distinct?: Prisma.DeptScalarFieldEnum | Prisma.DeptScalarFieldEnum[]
}

/**
 * dept create
 */
export type deptCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  /**
   * The data needed to create a dept.
   */
  data: Prisma.XOR<Prisma.deptCreateInput, Prisma.deptUncheckedCreateInput>
}

/**
 * dept createMany
 */
export type deptCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many depts.
   */
  data: Prisma.deptCreateManyInput | Prisma.deptCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * dept update
 */
export type deptUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  /**
   * The data needed to update a dept.
   */
  data: Prisma.XOR<Prisma.deptUpdateInput, Prisma.deptUncheckedUpdateInput>
  /**
   * Choose, which dept to update.
   */
  where: Prisma.deptWhereUniqueInput
}

/**
 * dept updateMany
 */
export type deptUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update depts.
   */
  data: Prisma.XOR<Prisma.deptUpdateManyMutationInput, Prisma.deptUncheckedUpdateManyInput>
  /**
   * Filter which depts to update
   */
  where?: Prisma.deptWhereInput
  /**
   * Limit how many depts to update.
   */
  limit?: number
}

/**
 * dept upsert
 */
export type deptUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  /**
   * The filter to search for the dept to update in case it exists.
   */
  where: Prisma.deptWhereUniqueInput
  /**
   * In case the dept found by the `where` argument doesn't exist, create a new dept with this data.
   */
  create: Prisma.XOR<Prisma.deptCreateInput, Prisma.deptUncheckedCreateInput>
  /**
   * In case the dept was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.deptUpdateInput, Prisma.deptUncheckedUpdateInput>
}

/**
 * dept delete
 */
export type deptDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  /**
   * Filter which dept to delete.
   */
  where: Prisma.deptWhereUniqueInput
}

/**
 * dept deleteMany
 */
export type deptDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which depts to delete
   */
  where?: Prisma.deptWhereInput
  /**
   * Limit how many depts to delete.
   */
  limit?: number
}

/**
 * dept.employee
 */
export type dept$employeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
  orderBy?: Prisma.employeeOrderByWithRelationInput | Prisma.employeeOrderByWithRelationInput[]
  cursor?: Prisma.employeeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EmployeeScalarFieldEnum | Prisma.EmployeeScalarFieldEnum[]
}

/**
 * dept.spl_spl_deptTodept
 */
export type dept$spl_spl_deptTodeptArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  where?: Prisma.splWhereInput
  orderBy?: Prisma.splOrderByWithRelationInput | Prisma.splOrderByWithRelationInput[]
  cursor?: Prisma.splWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SplScalarFieldEnum | Prisma.SplScalarFieldEnum[]
}

/**
 * dept.sppd_sppd_deptTodept
 */
export type dept$sppd_sppd_deptTodeptArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sppd
   */
  select?: Prisma.sppdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sppd
   */
  omit?: Prisma.sppdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sppdInclude<ExtArgs> | null
  where?: Prisma.sppdWhereInput
  orderBy?: Prisma.sppdOrderByWithRelationInput | Prisma.sppdOrderByWithRelationInput[]
  cursor?: Prisma.sppdWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SppdScalarFieldEnum | Prisma.SppdScalarFieldEnum[]
}

/**
 * dept without action
 */
export type deptDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
}
