
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `attendance` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model attendance
 * 
 */
export type attendanceModel = runtime.Types.Result.DefaultSelection<Prisma.$attendancePayload>

export type AggregateAttendance = {
  _count: AttendanceCountAggregateOutputType | null
  _min: AttendanceMinAggregateOutputType | null
  _max: AttendanceMaxAggregateOutputType | null
}

export type AttendanceMinAggregateOutputType = {
  attendance_id: string | null
  user_id_machine: string | null
  check_in: Date | null
  check_out: Date | null
  check_in2: Date | null
  check_out2: Date | null
  type: string | null
  ijin_info: string | null
  ijin_desc: string | null
  description: string | null
  attachment: string | null
  reference: string | null
  createdBy: string | null
  createdAt: Date | null
}

export type AttendanceMaxAggregateOutputType = {
  attendance_id: string | null
  user_id_machine: string | null
  check_in: Date | null
  check_out: Date | null
  check_in2: Date | null
  check_out2: Date | null
  type: string | null
  ijin_info: string | null
  ijin_desc: string | null
  description: string | null
  attachment: string | null
  reference: string | null
  createdBy: string | null
  createdAt: Date | null
}

export type AttendanceCountAggregateOutputType = {
  attendance_id: number
  user_id_machine: number
  check_in: number
  check_out: number
  check_in2: number
  check_out2: number
  type: number
  ijin_info: number
  ijin_desc: number
  description: number
  attachment: number
  reference: number
  createdBy: number
  createdAt: number
  _all: number
}


export type AttendanceMinAggregateInputType = {
  attendance_id?: true
  user_id_machine?: true
  check_in?: true
  check_out?: true
  check_in2?: true
  check_out2?: true
  type?: true
  ijin_info?: true
  ijin_desc?: true
  description?: true
  attachment?: true
  reference?: true
  createdBy?: true
  createdAt?: true
}

export type AttendanceMaxAggregateInputType = {
  attendance_id?: true
  user_id_machine?: true
  check_in?: true
  check_out?: true
  check_in2?: true
  check_out2?: true
  type?: true
  ijin_info?: true
  ijin_desc?: true
  description?: true
  attachment?: true
  reference?: true
  createdBy?: true
  createdAt?: true
}

export type AttendanceCountAggregateInputType = {
  attendance_id?: true
  user_id_machine?: true
  check_in?: true
  check_out?: true
  check_in2?: true
  check_out2?: true
  type?: true
  ijin_info?: true
  ijin_desc?: true
  description?: true
  attachment?: true
  reference?: true
  createdBy?: true
  createdAt?: true
  _all?: true
}

export type AttendanceAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which attendance to aggregate.
   */
  where?: Prisma.attendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of attendances to fetch.
   */
  orderBy?: Prisma.attendanceOrderByWithRelationInput | Prisma.attendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.attendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` attendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` attendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned attendances
  **/
  _count?: true | AttendanceCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: AttendanceMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: AttendanceMaxAggregateInputType
}

export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
      [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateAttendance[P]>
    : Prisma.GetScalarType<T[P], AggregateAttendance[P]>
}




export type attendanceGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.attendanceWhereInput
  orderBy?: Prisma.attendanceOrderByWithAggregationInput | Prisma.attendanceOrderByWithAggregationInput[]
  by: Prisma.AttendanceScalarFieldEnum[] | Prisma.AttendanceScalarFieldEnum
  having?: Prisma.attendanceScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: AttendanceCountAggregateInputType | true
  _min?: AttendanceMinAggregateInputType
  _max?: AttendanceMaxAggregateInputType
}

export type AttendanceGroupByOutputType = {
  attendance_id: string
  user_id_machine: string | null
  check_in: Date
  check_out: Date
  check_in2: Date | null
  check_out2: Date | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference: string
  createdBy: string | null
  createdAt: Date
  _count: AttendanceCountAggregateOutputType | null
  _min: AttendanceMinAggregateOutputType | null
  _max: AttendanceMaxAggregateOutputType | null
}

type GetAttendanceGroupByPayload<T extends attendanceGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<AttendanceGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], AttendanceGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], AttendanceGroupByOutputType[P]>
      }
    >
  > 



export type attendanceWhereInput = {
  AND?: Prisma.attendanceWhereInput | Prisma.attendanceWhereInput[]
  OR?: Prisma.attendanceWhereInput[]
  NOT?: Prisma.attendanceWhereInput | Prisma.attendanceWhereInput[]
  attendance_id?: Prisma.StringFilter<"attendance"> | string
  user_id_machine?: Prisma.StringNullableFilter<"attendance"> | string | null
  check_in?: Prisma.DateTimeFilter<"attendance"> | Date | string
  check_out?: Prisma.DateTimeFilter<"attendance"> | Date | string
  check_in2?: Prisma.DateTimeNullableFilter<"attendance"> | Date | string | null
  check_out2?: Prisma.DateTimeNullableFilter<"attendance"> | Date | string | null
  type?: Prisma.StringFilter<"attendance"> | string
  ijin_info?: Prisma.StringFilter<"attendance"> | string
  ijin_desc?: Prisma.StringFilter<"attendance"> | string
  description?: Prisma.StringFilter<"attendance"> | string
  attachment?: Prisma.StringFilter<"attendance"> | string
  reference?: Prisma.StringFilter<"attendance"> | string
  createdBy?: Prisma.StringNullableFilter<"attendance"> | string | null
  createdAt?: Prisma.DateTimeFilter<"attendance"> | Date | string
  employee_attendance_createdByToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee_attendance_user_id_machineToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
}

export type attendanceOrderByWithRelationInput = {
  attendance_id?: Prisma.SortOrder
  user_id_machine?: Prisma.SortOrderInput | Prisma.SortOrder
  check_in?: Prisma.SortOrder
  check_out?: Prisma.SortOrder
  check_in2?: Prisma.SortOrderInput | Prisma.SortOrder
  check_out2?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  ijin_info?: Prisma.SortOrder
  ijin_desc?: Prisma.SortOrder
  description?: Prisma.SortOrder
  attachment?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  employee_attendance_createdByToemployee?: Prisma.employeeOrderByWithRelationInput
  employee_attendance_user_id_machineToemployee?: Prisma.employeeOrderByWithRelationInput
  _relevance?: Prisma.attendanceOrderByRelevanceInput
}

export type attendanceWhereUniqueInput = Prisma.AtLeast<{
  attendance_id?: string
  AND?: Prisma.attendanceWhereInput | Prisma.attendanceWhereInput[]
  OR?: Prisma.attendanceWhereInput[]
  NOT?: Prisma.attendanceWhereInput | Prisma.attendanceWhereInput[]
  user_id_machine?: Prisma.StringNullableFilter<"attendance"> | string | null
  check_in?: Prisma.DateTimeFilter<"attendance"> | Date | string
  check_out?: Prisma.DateTimeFilter<"attendance"> | Date | string
  check_in2?: Prisma.DateTimeNullableFilter<"attendance"> | Date | string | null
  check_out2?: Prisma.DateTimeNullableFilter<"attendance"> | Date | string | null
  type?: Prisma.StringFilter<"attendance"> | string
  ijin_info?: Prisma.StringFilter<"attendance"> | string
  ijin_desc?: Prisma.StringFilter<"attendance"> | string
  description?: Prisma.StringFilter<"attendance"> | string
  attachment?: Prisma.StringFilter<"attendance"> | string
  reference?: Prisma.StringFilter<"attendance"> | string
  createdBy?: Prisma.StringNullableFilter<"attendance"> | string | null
  createdAt?: Prisma.DateTimeFilter<"attendance"> | Date | string
  employee_attendance_createdByToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee_attendance_user_id_machineToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
}, "attendance_id">

export type attendanceOrderByWithAggregationInput = {
  attendance_id?: Prisma.SortOrder
  user_id_machine?: Prisma.SortOrderInput | Prisma.SortOrder
  check_in?: Prisma.SortOrder
  check_out?: Prisma.SortOrder
  check_in2?: Prisma.SortOrderInput | Prisma.SortOrder
  check_out2?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  ijin_info?: Prisma.SortOrder
  ijin_desc?: Prisma.SortOrder
  description?: Prisma.SortOrder
  attachment?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.attendanceCountOrderByAggregateInput
  _max?: Prisma.attendanceMaxOrderByAggregateInput
  _min?: Prisma.attendanceMinOrderByAggregateInput
}

export type attendanceScalarWhereWithAggregatesInput = {
  AND?: Prisma.attendanceScalarWhereWithAggregatesInput | Prisma.attendanceScalarWhereWithAggregatesInput[]
  OR?: Prisma.attendanceScalarWhereWithAggregatesInput[]
  NOT?: Prisma.attendanceScalarWhereWithAggregatesInput | Prisma.attendanceScalarWhereWithAggregatesInput[]
  attendance_id?: Prisma.StringWithAggregatesFilter<"attendance"> | string
  user_id_machine?: Prisma.StringNullableWithAggregatesFilter<"attendance"> | string | null
  check_in?: Prisma.DateTimeWithAggregatesFilter<"attendance"> | Date | string
  check_out?: Prisma.DateTimeWithAggregatesFilter<"attendance"> | Date | string
  check_in2?: Prisma.DateTimeNullableWithAggregatesFilter<"attendance"> | Date | string | null
  check_out2?: Prisma.DateTimeNullableWithAggregatesFilter<"attendance"> | Date | string | null
  type?: Prisma.StringWithAggregatesFilter<"attendance"> | string
  ijin_info?: Prisma.StringWithAggregatesFilter<"attendance"> | string
  ijin_desc?: Prisma.StringWithAggregatesFilter<"attendance"> | string
  description?: Prisma.StringWithAggregatesFilter<"attendance"> | string
  attachment?: Prisma.StringWithAggregatesFilter<"attendance"> | string
  reference?: Prisma.StringWithAggregatesFilter<"attendance"> | string
  createdBy?: Prisma.StringNullableWithAggregatesFilter<"attendance"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"attendance"> | Date | string
}

export type attendanceCreateInput = {
  attendance_id: string
  check_in: Date | string
  check_out: Date | string
  check_in2?: Date | string | null
  check_out2?: Date | string | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference?: string
  createdAt?: Date | string
  employee_attendance_createdByToemployee?: Prisma.employeeCreateNestedOneWithoutAttendance_attendance_createdByToemployeeInput
  employee_attendance_user_id_machineToemployee?: Prisma.employeeCreateNestedOneWithoutAttendance_attendance_user_id_machineToemployeeInput
}

export type attendanceUncheckedCreateInput = {
  attendance_id: string
  user_id_machine?: string | null
  check_in: Date | string
  check_out: Date | string
  check_in2?: Date | string | null
  check_out2?: Date | string | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference?: string
  createdBy?: string | null
  createdAt?: Date | string
}

export type attendanceUpdateInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_attendance_createdByToemployee?: Prisma.employeeUpdateOneWithoutAttendance_attendance_createdByToemployeeNestedInput
  employee_attendance_user_id_machineToemployee?: Prisma.employeeUpdateOneWithoutAttendance_attendance_user_id_machineToemployeeNestedInput
}

export type attendanceUncheckedUpdateInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id_machine?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type attendanceCreateManyInput = {
  attendance_id: string
  user_id_machine?: string | null
  check_in: Date | string
  check_out: Date | string
  check_in2?: Date | string | null
  check_out2?: Date | string | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference?: string
  createdBy?: string | null
  createdAt?: Date | string
}

export type attendanceUpdateManyMutationInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type attendanceUncheckedUpdateManyInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id_machine?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type AttendanceListRelationFilter = {
  every?: Prisma.attendanceWhereInput
  some?: Prisma.attendanceWhereInput
  none?: Prisma.attendanceWhereInput
}

export type attendanceOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type attendanceOrderByRelevanceInput = {
  fields: Prisma.attendanceOrderByRelevanceFieldEnum | Prisma.attendanceOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type attendanceCountOrderByAggregateInput = {
  attendance_id?: Prisma.SortOrder
  user_id_machine?: Prisma.SortOrder
  check_in?: Prisma.SortOrder
  check_out?: Prisma.SortOrder
  check_in2?: Prisma.SortOrder
  check_out2?: Prisma.SortOrder
  type?: Prisma.SortOrder
  ijin_info?: Prisma.SortOrder
  ijin_desc?: Prisma.SortOrder
  description?: Prisma.SortOrder
  attachment?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type attendanceMaxOrderByAggregateInput = {
  attendance_id?: Prisma.SortOrder
  user_id_machine?: Prisma.SortOrder
  check_in?: Prisma.SortOrder
  check_out?: Prisma.SortOrder
  check_in2?: Prisma.SortOrder
  check_out2?: Prisma.SortOrder
  type?: Prisma.SortOrder
  ijin_info?: Prisma.SortOrder
  ijin_desc?: Prisma.SortOrder
  description?: Prisma.SortOrder
  attachment?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type attendanceMinOrderByAggregateInput = {
  attendance_id?: Prisma.SortOrder
  user_id_machine?: Prisma.SortOrder
  check_in?: Prisma.SortOrder
  check_out?: Prisma.SortOrder
  check_in2?: Prisma.SortOrder
  check_out2?: Prisma.SortOrder
  type?: Prisma.SortOrder
  ijin_info?: Prisma.SortOrder
  ijin_desc?: Prisma.SortOrder
  description?: Prisma.SortOrder
  attachment?: Prisma.SortOrder
  reference?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type attendanceCreateNestedManyWithoutEmployee_attendance_createdByToemployeeInput = {
  create?: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput> | Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput[] | Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput[]
  connectOrCreate?: Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_createdByToemployeeInput[]
  createMany?: Prisma.attendanceCreateManyEmployee_attendance_createdByToemployeeInputEnvelope
  connect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
}

export type attendanceCreateNestedManyWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  create?: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput> | Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput[] | Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  connectOrCreate?: Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  createMany?: Prisma.attendanceCreateManyEmployee_attendance_user_id_machineToemployeeInputEnvelope
  connect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
}

export type attendanceUncheckedCreateNestedManyWithoutEmployee_attendance_createdByToemployeeInput = {
  create?: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput> | Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput[] | Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput[]
  connectOrCreate?: Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_createdByToemployeeInput[]
  createMany?: Prisma.attendanceCreateManyEmployee_attendance_createdByToemployeeInputEnvelope
  connect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
}

export type attendanceUncheckedCreateNestedManyWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  create?: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput> | Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput[] | Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  connectOrCreate?: Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  createMany?: Prisma.attendanceCreateManyEmployee_attendance_user_id_machineToemployeeInputEnvelope
  connect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
}

export type attendanceUpdateManyWithoutEmployee_attendance_createdByToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput> | Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput[] | Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput[]
  connectOrCreate?: Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_createdByToemployeeInput[]
  upsert?: Prisma.attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput[]
  createMany?: Prisma.attendanceCreateManyEmployee_attendance_createdByToemployeeInputEnvelope
  set?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  disconnect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  delete?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  connect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  update?: Prisma.attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput[]
  updateMany?: Prisma.attendanceUpdateManyWithWhereWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceUpdateManyWithWhereWithoutEmployee_attendance_createdByToemployeeInput[]
  deleteMany?: Prisma.attendanceScalarWhereInput | Prisma.attendanceScalarWhereInput[]
}

export type attendanceUpdateManyWithoutEmployee_attendance_user_id_machineToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput> | Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput[] | Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  connectOrCreate?: Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  upsert?: Prisma.attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  createMany?: Prisma.attendanceCreateManyEmployee_attendance_user_id_machineToemployeeInputEnvelope
  set?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  disconnect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  delete?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  connect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  update?: Prisma.attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  updateMany?: Prisma.attendanceUpdateManyWithWhereWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceUpdateManyWithWhereWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  deleteMany?: Prisma.attendanceScalarWhereInput | Prisma.attendanceScalarWhereInput[]
}

export type attendanceUncheckedUpdateManyWithoutEmployee_attendance_createdByToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput> | Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput[] | Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput[]
  connectOrCreate?: Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_createdByToemployeeInput[]
  upsert?: Prisma.attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput[]
  createMany?: Prisma.attendanceCreateManyEmployee_attendance_createdByToemployeeInputEnvelope
  set?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  disconnect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  delete?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  connect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  update?: Prisma.attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput[]
  updateMany?: Prisma.attendanceUpdateManyWithWhereWithoutEmployee_attendance_createdByToemployeeInput | Prisma.attendanceUpdateManyWithWhereWithoutEmployee_attendance_createdByToemployeeInput[]
  deleteMany?: Prisma.attendanceScalarWhereInput | Prisma.attendanceScalarWhereInput[]
}

export type attendanceUncheckedUpdateManyWithoutEmployee_attendance_user_id_machineToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput> | Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput[] | Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  connectOrCreate?: Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceCreateOrConnectWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  upsert?: Prisma.attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  createMany?: Prisma.attendanceCreateManyEmployee_attendance_user_id_machineToemployeeInputEnvelope
  set?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  disconnect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  delete?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  connect?: Prisma.attendanceWhereUniqueInput | Prisma.attendanceWhereUniqueInput[]
  update?: Prisma.attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  updateMany?: Prisma.attendanceUpdateManyWithWhereWithoutEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceUpdateManyWithWhereWithoutEmployee_attendance_user_id_machineToemployeeInput[]
  deleteMany?: Prisma.attendanceScalarWhereInput | Prisma.attendanceScalarWhereInput[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput = {
  attendance_id: string
  check_in: Date | string
  check_out: Date | string
  check_in2?: Date | string | null
  check_out2?: Date | string | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference?: string
  createdAt?: Date | string
  employee_attendance_user_id_machineToemployee?: Prisma.employeeCreateNestedOneWithoutAttendance_attendance_user_id_machineToemployeeInput
}

export type attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput = {
  attendance_id: string
  user_id_machine?: string | null
  check_in: Date | string
  check_out: Date | string
  check_in2?: Date | string | null
  check_out2?: Date | string | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference?: string
  createdAt?: Date | string
}

export type attendanceCreateOrConnectWithoutEmployee_attendance_createdByToemployeeInput = {
  where: Prisma.attendanceWhereUniqueInput
  create: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput>
}

export type attendanceCreateManyEmployee_attendance_createdByToemployeeInputEnvelope = {
  data: Prisma.attendanceCreateManyEmployee_attendance_createdByToemployeeInput | Prisma.attendanceCreateManyEmployee_attendance_createdByToemployeeInput[]
  skipDuplicates?: boolean
}

export type attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  attendance_id: string
  check_in: Date | string
  check_out: Date | string
  check_in2?: Date | string | null
  check_out2?: Date | string | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference?: string
  createdAt?: Date | string
  employee_attendance_createdByToemployee?: Prisma.employeeCreateNestedOneWithoutAttendance_attendance_createdByToemployeeInput
}

export type attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  attendance_id: string
  check_in: Date | string
  check_out: Date | string
  check_in2?: Date | string | null
  check_out2?: Date | string | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference?: string
  createdBy?: string | null
  createdAt?: Date | string
}

export type attendanceCreateOrConnectWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  where: Prisma.attendanceWhereUniqueInput
  create: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput>
}

export type attendanceCreateManyEmployee_attendance_user_id_machineToemployeeInputEnvelope = {
  data: Prisma.attendanceCreateManyEmployee_attendance_user_id_machineToemployeeInput | Prisma.attendanceCreateManyEmployee_attendance_user_id_machineToemployeeInput[]
  skipDuplicates?: boolean
}

export type attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput = {
  where: Prisma.attendanceWhereUniqueInput
  update: Prisma.XOR<Prisma.attendanceUpdateWithoutEmployee_attendance_createdByToemployeeInput, Prisma.attendanceUncheckedUpdateWithoutEmployee_attendance_createdByToemployeeInput>
  create: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_createdByToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_createdByToemployeeInput>
}

export type attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_createdByToemployeeInput = {
  where: Prisma.attendanceWhereUniqueInput
  data: Prisma.XOR<Prisma.attendanceUpdateWithoutEmployee_attendance_createdByToemployeeInput, Prisma.attendanceUncheckedUpdateWithoutEmployee_attendance_createdByToemployeeInput>
}

export type attendanceUpdateManyWithWhereWithoutEmployee_attendance_createdByToemployeeInput = {
  where: Prisma.attendanceScalarWhereInput
  data: Prisma.XOR<Prisma.attendanceUpdateManyMutationInput, Prisma.attendanceUncheckedUpdateManyWithoutEmployee_attendance_createdByToemployeeInput>
}

export type attendanceScalarWhereInput = {
  AND?: Prisma.attendanceScalarWhereInput | Prisma.attendanceScalarWhereInput[]
  OR?: Prisma.attendanceScalarWhereInput[]
  NOT?: Prisma.attendanceScalarWhereInput | Prisma.attendanceScalarWhereInput[]
  attendance_id?: Prisma.StringFilter<"attendance"> | string
  user_id_machine?: Prisma.StringNullableFilter<"attendance"> | string | null
  check_in?: Prisma.DateTimeFilter<"attendance"> | Date | string
  check_out?: Prisma.DateTimeFilter<"attendance"> | Date | string
  check_in2?: Prisma.DateTimeNullableFilter<"attendance"> | Date | string | null
  check_out2?: Prisma.DateTimeNullableFilter<"attendance"> | Date | string | null
  type?: Prisma.StringFilter<"attendance"> | string
  ijin_info?: Prisma.StringFilter<"attendance"> | string
  ijin_desc?: Prisma.StringFilter<"attendance"> | string
  description?: Prisma.StringFilter<"attendance"> | string
  attachment?: Prisma.StringFilter<"attendance"> | string
  reference?: Prisma.StringFilter<"attendance"> | string
  createdBy?: Prisma.StringNullableFilter<"attendance"> | string | null
  createdAt?: Prisma.DateTimeFilter<"attendance"> | Date | string
}

export type attendanceUpsertWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  where: Prisma.attendanceWhereUniqueInput
  update: Prisma.XOR<Prisma.attendanceUpdateWithoutEmployee_attendance_user_id_machineToemployeeInput, Prisma.attendanceUncheckedUpdateWithoutEmployee_attendance_user_id_machineToemployeeInput>
  create: Prisma.XOR<Prisma.attendanceCreateWithoutEmployee_attendance_user_id_machineToemployeeInput, Prisma.attendanceUncheckedCreateWithoutEmployee_attendance_user_id_machineToemployeeInput>
}

export type attendanceUpdateWithWhereUniqueWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  where: Prisma.attendanceWhereUniqueInput
  data: Prisma.XOR<Prisma.attendanceUpdateWithoutEmployee_attendance_user_id_machineToemployeeInput, Prisma.attendanceUncheckedUpdateWithoutEmployee_attendance_user_id_machineToemployeeInput>
}

export type attendanceUpdateManyWithWhereWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  where: Prisma.attendanceScalarWhereInput
  data: Prisma.XOR<Prisma.attendanceUpdateManyMutationInput, Prisma.attendanceUncheckedUpdateManyWithoutEmployee_attendance_user_id_machineToemployeeInput>
}

export type attendanceCreateManyEmployee_attendance_createdByToemployeeInput = {
  attendance_id: string
  user_id_machine?: string | null
  check_in: Date | string
  check_out: Date | string
  check_in2?: Date | string | null
  check_out2?: Date | string | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference?: string
  createdAt?: Date | string
}

export type attendanceCreateManyEmployee_attendance_user_id_machineToemployeeInput = {
  attendance_id: string
  check_in: Date | string
  check_out: Date | string
  check_in2?: Date | string | null
  check_out2?: Date | string | null
  type: string
  ijin_info: string
  ijin_desc: string
  description: string
  attachment: string
  reference?: string
  createdBy?: string | null
  createdAt?: Date | string
}

export type attendanceUpdateWithoutEmployee_attendance_createdByToemployeeInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_attendance_user_id_machineToemployee?: Prisma.employeeUpdateOneWithoutAttendance_attendance_user_id_machineToemployeeNestedInput
}

export type attendanceUncheckedUpdateWithoutEmployee_attendance_createdByToemployeeInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id_machine?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type attendanceUncheckedUpdateManyWithoutEmployee_attendance_createdByToemployeeInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  user_id_machine?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type attendanceUpdateWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_attendance_createdByToemployee?: Prisma.employeeUpdateOneWithoutAttendance_attendance_createdByToemployeeNestedInput
}

export type attendanceUncheckedUpdateWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type attendanceUncheckedUpdateManyWithoutEmployee_attendance_user_id_machineToemployeeInput = {
  attendance_id?: Prisma.StringFieldUpdateOperationsInput | string
  check_in?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_out?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  check_in2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  check_out2?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_info?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_desc?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  attachment?: Prisma.StringFieldUpdateOperationsInput | string
  reference?: Prisma.StringFieldUpdateOperationsInput | string
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type attendanceSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  attendance_id?: boolean
  user_id_machine?: boolean
  check_in?: boolean
  check_out?: boolean
  check_in2?: boolean
  check_out2?: boolean
  type?: boolean
  ijin_info?: boolean
  ijin_desc?: boolean
  description?: boolean
  attachment?: boolean
  reference?: boolean
  createdBy?: boolean
  createdAt?: boolean
  employee_attendance_createdByToemployee?: boolean | Prisma.attendance$employee_attendance_createdByToemployeeArgs<ExtArgs>
  employee_attendance_user_id_machineToemployee?: boolean | Prisma.attendance$employee_attendance_user_id_machineToemployeeArgs<ExtArgs>
}, ExtArgs["result"]["attendance"]>



export type attendanceSelectScalar = {
  attendance_id?: boolean
  user_id_machine?: boolean
  check_in?: boolean
  check_out?: boolean
  check_in2?: boolean
  check_out2?: boolean
  type?: boolean
  ijin_info?: boolean
  ijin_desc?: boolean
  description?: boolean
  attachment?: boolean
  reference?: boolean
  createdBy?: boolean
  createdAt?: boolean
}

export type attendanceOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"attendance_id" | "user_id_machine" | "check_in" | "check_out" | "check_in2" | "check_out2" | "type" | "ijin_info" | "ijin_desc" | "description" | "attachment" | "reference" | "createdBy" | "createdAt", ExtArgs["result"]["attendance"]>
export type attendanceInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee_attendance_createdByToemployee?: boolean | Prisma.attendance$employee_attendance_createdByToemployeeArgs<ExtArgs>
  employee_attendance_user_id_machineToemployee?: boolean | Prisma.attendance$employee_attendance_user_id_machineToemployeeArgs<ExtArgs>
}

export type $attendancePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "attendance"
  objects: {
    employee_attendance_createdByToemployee: Prisma.$employeePayload<ExtArgs> | null
    employee_attendance_user_id_machineToemployee: Prisma.$employeePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    attendance_id: string
    user_id_machine: string | null
    check_in: Date
    check_out: Date
    check_in2: Date | null
    check_out2: Date | null
    type: string
    ijin_info: string
    ijin_desc: string
    description: string
    attachment: string
    reference: string
    createdBy: string | null
    createdAt: Date
  }, ExtArgs["result"]["attendance"]>
  composites: {}
}

export type attendanceGetPayload<S extends boolean | null | undefined | attendanceDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$attendancePayload, S>

export type attendanceCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<attendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: AttendanceCountAggregateInputType | true
  }

export interface attendanceDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['attendance'], meta: { name: 'attendance' } }
  /**
   * Find zero or one Attendance that matches the filter.
   * @param {attendanceFindUniqueArgs} args - Arguments to find a Attendance
   * @example
   * // Get one Attendance
   * const attendance = await prisma.attendance.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends attendanceFindUniqueArgs>(args: Prisma.SelectSubset<T, attendanceFindUniqueArgs<ExtArgs>>): Prisma.Prisma__attendanceClient<runtime.Types.Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {attendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
   * @example
   * // Get one Attendance
   * const attendance = await prisma.attendance.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends attendanceFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, attendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__attendanceClient<runtime.Types.Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Attendance that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {attendanceFindFirstArgs} args - Arguments to find a Attendance
   * @example
   * // Get one Attendance
   * const attendance = await prisma.attendance.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends attendanceFindFirstArgs>(args?: Prisma.SelectSubset<T, attendanceFindFirstArgs<ExtArgs>>): Prisma.Prisma__attendanceClient<runtime.Types.Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Attendance that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {attendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
   * @example
   * // Get one Attendance
   * const attendance = await prisma.attendance.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends attendanceFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, attendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__attendanceClient<runtime.Types.Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Attendances that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {attendanceFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Attendances
   * const attendances = await prisma.attendance.findMany()
   * 
   * // Get first 10 Attendances
   * const attendances = await prisma.attendance.findMany({ take: 10 })
   * 
   * // Only select the `attendance_id`
   * const attendanceWithAttendance_idOnly = await prisma.attendance.findMany({ select: { attendance_id: true } })
   * 
   */
  findMany<T extends attendanceFindManyArgs>(args?: Prisma.SelectSubset<T, attendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Attendance.
   * @param {attendanceCreateArgs} args - Arguments to create a Attendance.
   * @example
   * // Create one Attendance
   * const Attendance = await prisma.attendance.create({
   *   data: {
   *     // ... data to create a Attendance
   *   }
   * })
   * 
   */
  create<T extends attendanceCreateArgs>(args: Prisma.SelectSubset<T, attendanceCreateArgs<ExtArgs>>): Prisma.Prisma__attendanceClient<runtime.Types.Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Attendances.
   * @param {attendanceCreateManyArgs} args - Arguments to create many Attendances.
   * @example
   * // Create many Attendances
   * const attendance = await prisma.attendance.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends attendanceCreateManyArgs>(args?: Prisma.SelectSubset<T, attendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Attendance.
   * @param {attendanceDeleteArgs} args - Arguments to delete one Attendance.
   * @example
   * // Delete one Attendance
   * const Attendance = await prisma.attendance.delete({
   *   where: {
   *     // ... filter to delete one Attendance
   *   }
   * })
   * 
   */
  delete<T extends attendanceDeleteArgs>(args: Prisma.SelectSubset<T, attendanceDeleteArgs<ExtArgs>>): Prisma.Prisma__attendanceClient<runtime.Types.Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Attendance.
   * @param {attendanceUpdateArgs} args - Arguments to update one Attendance.
   * @example
   * // Update one Attendance
   * const attendance = await prisma.attendance.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends attendanceUpdateArgs>(args: Prisma.SelectSubset<T, attendanceUpdateArgs<ExtArgs>>): Prisma.Prisma__attendanceClient<runtime.Types.Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Attendances.
   * @param {attendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
   * @example
   * // Delete a few Attendances
   * const { count } = await prisma.attendance.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends attendanceDeleteManyArgs>(args?: Prisma.SelectSubset<T, attendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Attendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {attendanceUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Attendances
   * const attendance = await prisma.attendance.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends attendanceUpdateManyArgs>(args: Prisma.SelectSubset<T, attendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Attendance.
   * @param {attendanceUpsertArgs} args - Arguments to update or create a Attendance.
   * @example
   * // Update or create a Attendance
   * const attendance = await prisma.attendance.upsert({
   *   create: {
   *     // ... data to create a Attendance
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Attendance we want to update
   *   }
   * })
   */
  upsert<T extends attendanceUpsertArgs>(args: Prisma.SelectSubset<T, attendanceUpsertArgs<ExtArgs>>): Prisma.Prisma__attendanceClient<runtime.Types.Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Attendances.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {attendanceCountArgs} args - Arguments to filter Attendances to count.
   * @example
   * // Count the number of Attendances
   * const count = await prisma.attendance.count({
   *   where: {
   *     // ... the filter for the Attendances we want to count
   *   }
   * })
  **/
  count<T extends attendanceCountArgs>(
    args?: Prisma.Subset<T, attendanceCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], AttendanceCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Attendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends AttendanceAggregateArgs>(args: Prisma.Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

  /**
   * Group by Attendance.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {attendanceGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends attendanceGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: attendanceGroupByArgs['orderBy'] }
      : { orderBy?: attendanceGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, attendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the attendance model
 */
readonly fields: attendanceFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for attendance.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__attendanceClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  employee_attendance_createdByToemployee<T extends Prisma.attendance$employee_attendance_createdByToemployeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.attendance$employee_attendance_createdByToemployeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  employee_attendance_user_id_machineToemployee<T extends Prisma.attendance$employee_attendance_user_id_machineToemployeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.attendance$employee_attendance_user_id_machineToemployeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the attendance model
 */
export interface attendanceFieldRefs {
  readonly attendance_id: Prisma.FieldRef<"attendance", 'String'>
  readonly user_id_machine: Prisma.FieldRef<"attendance", 'String'>
  readonly check_in: Prisma.FieldRef<"attendance", 'DateTime'>
  readonly check_out: Prisma.FieldRef<"attendance", 'DateTime'>
  readonly check_in2: Prisma.FieldRef<"attendance", 'DateTime'>
  readonly check_out2: Prisma.FieldRef<"attendance", 'DateTime'>
  readonly type: Prisma.FieldRef<"attendance", 'String'>
  readonly ijin_info: Prisma.FieldRef<"attendance", 'String'>
  readonly ijin_desc: Prisma.FieldRef<"attendance", 'String'>
  readonly description: Prisma.FieldRef<"attendance", 'String'>
  readonly attachment: Prisma.FieldRef<"attendance", 'String'>
  readonly reference: Prisma.FieldRef<"attendance", 'String'>
  readonly createdBy: Prisma.FieldRef<"attendance", 'String'>
  readonly createdAt: Prisma.FieldRef<"attendance", 'DateTime'>
}
    

// Custom InputTypes
/**
 * attendance findUnique
 */
export type attendanceFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
  /**
   * Filter, which attendance to fetch.
   */
  where: Prisma.attendanceWhereUniqueInput
}

/**
 * attendance findUniqueOrThrow
 */
export type attendanceFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
  /**
   * Filter, which attendance to fetch.
   */
  where: Prisma.attendanceWhereUniqueInput
}

/**
 * attendance findFirst
 */
export type attendanceFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
  /**
   * Filter, which attendance to fetch.
   */
  where?: Prisma.attendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of attendances to fetch.
   */
  orderBy?: Prisma.attendanceOrderByWithRelationInput | Prisma.attendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for attendances.
   */
  cursor?: Prisma.attendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` attendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` attendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of attendances.
   */
  distinct?: Prisma.AttendanceScalarFieldEnum | Prisma.AttendanceScalarFieldEnum[]
}

/**
 * attendance findFirstOrThrow
 */
export type attendanceFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
  /**
   * Filter, which attendance to fetch.
   */
  where?: Prisma.attendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of attendances to fetch.
   */
  orderBy?: Prisma.attendanceOrderByWithRelationInput | Prisma.attendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for attendances.
   */
  cursor?: Prisma.attendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` attendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` attendances.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of attendances.
   */
  distinct?: Prisma.AttendanceScalarFieldEnum | Prisma.AttendanceScalarFieldEnum[]
}

/**
 * attendance findMany
 */
export type attendanceFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
  /**
   * Filter, which attendances to fetch.
   */
  where?: Prisma.attendanceWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of attendances to fetch.
   */
  orderBy?: Prisma.attendanceOrderByWithRelationInput | Prisma.attendanceOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing attendances.
   */
  cursor?: Prisma.attendanceWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` attendances from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` attendances.
   */
  skip?: number
  distinct?: Prisma.AttendanceScalarFieldEnum | Prisma.AttendanceScalarFieldEnum[]
}

/**
 * attendance create
 */
export type attendanceCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
  /**
   * The data needed to create a attendance.
   */
  data: Prisma.XOR<Prisma.attendanceCreateInput, Prisma.attendanceUncheckedCreateInput>
}

/**
 * attendance createMany
 */
export type attendanceCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many attendances.
   */
  data: Prisma.attendanceCreateManyInput | Prisma.attendanceCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * attendance update
 */
export type attendanceUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
  /**
   * The data needed to update a attendance.
   */
  data: Prisma.XOR<Prisma.attendanceUpdateInput, Prisma.attendanceUncheckedUpdateInput>
  /**
   * Choose, which attendance to update.
   */
  where: Prisma.attendanceWhereUniqueInput
}

/**
 * attendance updateMany
 */
export type attendanceUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update attendances.
   */
  data: Prisma.XOR<Prisma.attendanceUpdateManyMutationInput, Prisma.attendanceUncheckedUpdateManyInput>
  /**
   * Filter which attendances to update
   */
  where?: Prisma.attendanceWhereInput
  /**
   * Limit how many attendances to update.
   */
  limit?: number
}

/**
 * attendance upsert
 */
export type attendanceUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
  /**
   * The filter to search for the attendance to update in case it exists.
   */
  where: Prisma.attendanceWhereUniqueInput
  /**
   * In case the attendance found by the `where` argument doesn't exist, create a new attendance with this data.
   */
  create: Prisma.XOR<Prisma.attendanceCreateInput, Prisma.attendanceUncheckedCreateInput>
  /**
   * In case the attendance was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.attendanceUpdateInput, Prisma.attendanceUncheckedUpdateInput>
}

/**
 * attendance delete
 */
export type attendanceDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
  /**
   * Filter which attendance to delete.
   */
  where: Prisma.attendanceWhereUniqueInput
}

/**
 * attendance deleteMany
 */
export type attendanceDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which attendances to delete
   */
  where?: Prisma.attendanceWhereInput
  /**
   * Limit how many attendances to delete.
   */
  limit?: number
}

/**
 * attendance.employee_attendance_createdByToemployee
 */
export type attendance$employee_attendance_createdByToemployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * attendance.employee_attendance_user_id_machineToemployee
 */
export type attendance$employee_attendance_user_id_machineToemployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * attendance without action
 */
export type attendanceDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the attendance
   */
  select?: Prisma.attendanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the attendance
   */
  omit?: Prisma.attendanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.attendanceInclude<ExtArgs> | null
}
