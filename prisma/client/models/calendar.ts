
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `calendar` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model calendar
 * 
 */
export type calendarModel = runtime.Types.Result.DefaultSelection<Prisma.$calendarPayload>

export type AggregateCalendar = {
  _count: CalendarCountAggregateOutputType | null
  _min: CalendarMinAggregateOutputType | null
  _max: CalendarMaxAggregateOutputType | null
}

export type CalendarMinAggregateOutputType = {
  calendar_id: string | null
  description: string | null
  type: $Enums.calendar_type | null
  date: Date | null
  createdBy: string | null
  createdAt: Date | null
}

export type CalendarMaxAggregateOutputType = {
  calendar_id: string | null
  description: string | null
  type: $Enums.calendar_type | null
  date: Date | null
  createdBy: string | null
  createdAt: Date | null
}

export type CalendarCountAggregateOutputType = {
  calendar_id: number
  description: number
  type: number
  date: number
  createdBy: number
  createdAt: number
  _all: number
}


export type CalendarMinAggregateInputType = {
  calendar_id?: true
  description?: true
  type?: true
  date?: true
  createdBy?: true
  createdAt?: true
}

export type CalendarMaxAggregateInputType = {
  calendar_id?: true
  description?: true
  type?: true
  date?: true
  createdBy?: true
  createdAt?: true
}

export type CalendarCountAggregateInputType = {
  calendar_id?: true
  description?: true
  type?: true
  date?: true
  createdBy?: true
  createdAt?: true
  _all?: true
}

export type CalendarAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which calendar to aggregate.
   */
  where?: Prisma.calendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of calendars to fetch.
   */
  orderBy?: Prisma.calendarOrderByWithRelationInput | Prisma.calendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.calendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` calendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` calendars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned calendars
  **/
  _count?: true | CalendarCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: CalendarMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: CalendarMaxAggregateInputType
}

export type GetCalendarAggregateType<T extends CalendarAggregateArgs> = {
      [P in keyof T & keyof AggregateCalendar]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateCalendar[P]>
    : Prisma.GetScalarType<T[P], AggregateCalendar[P]>
}




export type calendarGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.calendarWhereInput
  orderBy?: Prisma.calendarOrderByWithAggregationInput | Prisma.calendarOrderByWithAggregationInput[]
  by: Prisma.CalendarScalarFieldEnum[] | Prisma.CalendarScalarFieldEnum
  having?: Prisma.calendarScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: CalendarCountAggregateInputType | true
  _min?: CalendarMinAggregateInputType
  _max?: CalendarMaxAggregateInputType
}

export type CalendarGroupByOutputType = {
  calendar_id: string
  description: string | null
  type: $Enums.calendar_type | null
  date: Date | null
  createdBy: string | null
  createdAt: Date
  _count: CalendarCountAggregateOutputType | null
  _min: CalendarMinAggregateOutputType | null
  _max: CalendarMaxAggregateOutputType | null
}

type GetCalendarGroupByPayload<T extends calendarGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<CalendarGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof CalendarGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], CalendarGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], CalendarGroupByOutputType[P]>
      }
    >
  > 



export type calendarWhereInput = {
  AND?: Prisma.calendarWhereInput | Prisma.calendarWhereInput[]
  OR?: Prisma.calendarWhereInput[]
  NOT?: Prisma.calendarWhereInput | Prisma.calendarWhereInput[]
  calendar_id?: Prisma.StringFilter<"calendar"> | string
  description?: Prisma.StringNullableFilter<"calendar"> | string | null
  type?: Prisma.Enumcalendar_typeNullableFilter<"calendar"> | $Enums.calendar_type | null
  date?: Prisma.DateTimeNullableFilter<"calendar"> | Date | string | null
  createdBy?: Prisma.StringNullableFilter<"calendar"> | string | null
  createdAt?: Prisma.DateTimeFilter<"calendar"> | Date | string
  employee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
}

export type calendarOrderByWithRelationInput = {
  calendar_id?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrderInput | Prisma.SortOrder
  date?: Prisma.SortOrderInput | Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  employee?: Prisma.employeeOrderByWithRelationInput
  _relevance?: Prisma.calendarOrderByRelevanceInput
}

export type calendarWhereUniqueInput = Prisma.AtLeast<{
  calendar_id?: string
  date?: Date | string
  AND?: Prisma.calendarWhereInput | Prisma.calendarWhereInput[]
  OR?: Prisma.calendarWhereInput[]
  NOT?: Prisma.calendarWhereInput | Prisma.calendarWhereInput[]
  description?: Prisma.StringNullableFilter<"calendar"> | string | null
  type?: Prisma.Enumcalendar_typeNullableFilter<"calendar"> | $Enums.calendar_type | null
  createdBy?: Prisma.StringNullableFilter<"calendar"> | string | null
  createdAt?: Prisma.DateTimeFilter<"calendar"> | Date | string
  employee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
}, "calendar_id" | "date">

export type calendarOrderByWithAggregationInput = {
  calendar_id?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrderInput | Prisma.SortOrder
  date?: Prisma.SortOrderInput | Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.calendarCountOrderByAggregateInput
  _max?: Prisma.calendarMaxOrderByAggregateInput
  _min?: Prisma.calendarMinOrderByAggregateInput
}

export type calendarScalarWhereWithAggregatesInput = {
  AND?: Prisma.calendarScalarWhereWithAggregatesInput | Prisma.calendarScalarWhereWithAggregatesInput[]
  OR?: Prisma.calendarScalarWhereWithAggregatesInput[]
  NOT?: Prisma.calendarScalarWhereWithAggregatesInput | Prisma.calendarScalarWhereWithAggregatesInput[]
  calendar_id?: Prisma.StringWithAggregatesFilter<"calendar"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"calendar"> | string | null
  type?: Prisma.Enumcalendar_typeNullableWithAggregatesFilter<"calendar"> | $Enums.calendar_type | null
  date?: Prisma.DateTimeNullableWithAggregatesFilter<"calendar"> | Date | string | null
  createdBy?: Prisma.StringNullableWithAggregatesFilter<"calendar"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"calendar"> | Date | string
}

export type calendarCreateInput = {
  calendar_id: string
  description?: string | null
  type?: $Enums.calendar_type | null
  date?: Date | string | null
  createdAt?: Date | string
  employee?: Prisma.employeeCreateNestedOneWithoutCalendarInput
}

export type calendarUncheckedCreateInput = {
  calendar_id: string
  description?: string | null
  type?: $Enums.calendar_type | null
  date?: Date | string | null
  createdBy?: string | null
  createdAt?: Date | string
}

export type calendarUpdateInput = {
  calendar_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableEnumcalendar_typeFieldUpdateOperationsInput | $Enums.calendar_type | null
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee?: Prisma.employeeUpdateOneWithoutCalendarNestedInput
}

export type calendarUncheckedUpdateInput = {
  calendar_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableEnumcalendar_typeFieldUpdateOperationsInput | $Enums.calendar_type | null
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type calendarCreateManyInput = {
  calendar_id: string
  description?: string | null
  type?: $Enums.calendar_type | null
  date?: Date | string | null
  createdBy?: string | null
  createdAt?: Date | string
}

export type calendarUpdateManyMutationInput = {
  calendar_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableEnumcalendar_typeFieldUpdateOperationsInput | $Enums.calendar_type | null
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type calendarUncheckedUpdateManyInput = {
  calendar_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableEnumcalendar_typeFieldUpdateOperationsInput | $Enums.calendar_type | null
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type CalendarListRelationFilter = {
  every?: Prisma.calendarWhereInput
  some?: Prisma.calendarWhereInput
  none?: Prisma.calendarWhereInput
}

export type calendarOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type calendarOrderByRelevanceInput = {
  fields: Prisma.calendarOrderByRelevanceFieldEnum | Prisma.calendarOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type calendarCountOrderByAggregateInput = {
  calendar_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  type?: Prisma.SortOrder
  date?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type calendarMaxOrderByAggregateInput = {
  calendar_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  type?: Prisma.SortOrder
  date?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type calendarMinOrderByAggregateInput = {
  calendar_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  type?: Prisma.SortOrder
  date?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type calendarCreateNestedManyWithoutEmployeeInput = {
  create?: Prisma.XOR<Prisma.calendarCreateWithoutEmployeeInput, Prisma.calendarUncheckedCreateWithoutEmployeeInput> | Prisma.calendarCreateWithoutEmployeeInput[] | Prisma.calendarUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.calendarCreateOrConnectWithoutEmployeeInput | Prisma.calendarCreateOrConnectWithoutEmployeeInput[]
  createMany?: Prisma.calendarCreateManyEmployeeInputEnvelope
  connect?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
}

export type calendarUncheckedCreateNestedManyWithoutEmployeeInput = {
  create?: Prisma.XOR<Prisma.calendarCreateWithoutEmployeeInput, Prisma.calendarUncheckedCreateWithoutEmployeeInput> | Prisma.calendarCreateWithoutEmployeeInput[] | Prisma.calendarUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.calendarCreateOrConnectWithoutEmployeeInput | Prisma.calendarCreateOrConnectWithoutEmployeeInput[]
  createMany?: Prisma.calendarCreateManyEmployeeInputEnvelope
  connect?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
}

export type calendarUpdateManyWithoutEmployeeNestedInput = {
  create?: Prisma.XOR<Prisma.calendarCreateWithoutEmployeeInput, Prisma.calendarUncheckedCreateWithoutEmployeeInput> | Prisma.calendarCreateWithoutEmployeeInput[] | Prisma.calendarUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.calendarCreateOrConnectWithoutEmployeeInput | Prisma.calendarCreateOrConnectWithoutEmployeeInput[]
  upsert?: Prisma.calendarUpsertWithWhereUniqueWithoutEmployeeInput | Prisma.calendarUpsertWithWhereUniqueWithoutEmployeeInput[]
  createMany?: Prisma.calendarCreateManyEmployeeInputEnvelope
  set?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
  disconnect?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
  delete?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
  connect?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
  update?: Prisma.calendarUpdateWithWhereUniqueWithoutEmployeeInput | Prisma.calendarUpdateWithWhereUniqueWithoutEmployeeInput[]
  updateMany?: Prisma.calendarUpdateManyWithWhereWithoutEmployeeInput | Prisma.calendarUpdateManyWithWhereWithoutEmployeeInput[]
  deleteMany?: Prisma.calendarScalarWhereInput | Prisma.calendarScalarWhereInput[]
}

export type calendarUncheckedUpdateManyWithoutEmployeeNestedInput = {
  create?: Prisma.XOR<Prisma.calendarCreateWithoutEmployeeInput, Prisma.calendarUncheckedCreateWithoutEmployeeInput> | Prisma.calendarCreateWithoutEmployeeInput[] | Prisma.calendarUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.calendarCreateOrConnectWithoutEmployeeInput | Prisma.calendarCreateOrConnectWithoutEmployeeInput[]
  upsert?: Prisma.calendarUpsertWithWhereUniqueWithoutEmployeeInput | Prisma.calendarUpsertWithWhereUniqueWithoutEmployeeInput[]
  createMany?: Prisma.calendarCreateManyEmployeeInputEnvelope
  set?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
  disconnect?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
  delete?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
  connect?: Prisma.calendarWhereUniqueInput | Prisma.calendarWhereUniqueInput[]
  update?: Prisma.calendarUpdateWithWhereUniqueWithoutEmployeeInput | Prisma.calendarUpdateWithWhereUniqueWithoutEmployeeInput[]
  updateMany?: Prisma.calendarUpdateManyWithWhereWithoutEmployeeInput | Prisma.calendarUpdateManyWithWhereWithoutEmployeeInput[]
  deleteMany?: Prisma.calendarScalarWhereInput | Prisma.calendarScalarWhereInput[]
}

export type NullableEnumcalendar_typeFieldUpdateOperationsInput = {
  set?: $Enums.calendar_type | null
}

export type calendarCreateWithoutEmployeeInput = {
  calendar_id: string
  description?: string | null
  type?: $Enums.calendar_type | null
  date?: Date | string | null
  createdAt?: Date | string
}

export type calendarUncheckedCreateWithoutEmployeeInput = {
  calendar_id: string
  description?: string | null
  type?: $Enums.calendar_type | null
  date?: Date | string | null
  createdAt?: Date | string
}

export type calendarCreateOrConnectWithoutEmployeeInput = {
  where: Prisma.calendarWhereUniqueInput
  create: Prisma.XOR<Prisma.calendarCreateWithoutEmployeeInput, Prisma.calendarUncheckedCreateWithoutEmployeeInput>
}

export type calendarCreateManyEmployeeInputEnvelope = {
  data: Prisma.calendarCreateManyEmployeeInput | Prisma.calendarCreateManyEmployeeInput[]
  skipDuplicates?: boolean
}

export type calendarUpsertWithWhereUniqueWithoutEmployeeInput = {
  where: Prisma.calendarWhereUniqueInput
  update: Prisma.XOR<Prisma.calendarUpdateWithoutEmployeeInput, Prisma.calendarUncheckedUpdateWithoutEmployeeInput>
  create: Prisma.XOR<Prisma.calendarCreateWithoutEmployeeInput, Prisma.calendarUncheckedCreateWithoutEmployeeInput>
}

export type calendarUpdateWithWhereUniqueWithoutEmployeeInput = {
  where: Prisma.calendarWhereUniqueInput
  data: Prisma.XOR<Prisma.calendarUpdateWithoutEmployeeInput, Prisma.calendarUncheckedUpdateWithoutEmployeeInput>
}

export type calendarUpdateManyWithWhereWithoutEmployeeInput = {
  where: Prisma.calendarScalarWhereInput
  data: Prisma.XOR<Prisma.calendarUpdateManyMutationInput, Prisma.calendarUncheckedUpdateManyWithoutEmployeeInput>
}

export type calendarScalarWhereInput = {
  AND?: Prisma.calendarScalarWhereInput | Prisma.calendarScalarWhereInput[]
  OR?: Prisma.calendarScalarWhereInput[]
  NOT?: Prisma.calendarScalarWhereInput | Prisma.calendarScalarWhereInput[]
  calendar_id?: Prisma.StringFilter<"calendar"> | string
  description?: Prisma.StringNullableFilter<"calendar"> | string | null
  type?: Prisma.Enumcalendar_typeNullableFilter<"calendar"> | $Enums.calendar_type | null
  date?: Prisma.DateTimeNullableFilter<"calendar"> | Date | string | null
  createdBy?: Prisma.StringNullableFilter<"calendar"> | string | null
  createdAt?: Prisma.DateTimeFilter<"calendar"> | Date | string
}

export type calendarCreateManyEmployeeInput = {
  calendar_id: string
  description?: string | null
  type?: $Enums.calendar_type | null
  date?: Date | string | null
  createdAt?: Date | string
}

export type calendarUpdateWithoutEmployeeInput = {
  calendar_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableEnumcalendar_typeFieldUpdateOperationsInput | $Enums.calendar_type | null
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type calendarUncheckedUpdateWithoutEmployeeInput = {
  calendar_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableEnumcalendar_typeFieldUpdateOperationsInput | $Enums.calendar_type | null
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type calendarUncheckedUpdateManyWithoutEmployeeInput = {
  calendar_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.NullableEnumcalendar_typeFieldUpdateOperationsInput | $Enums.calendar_type | null
  date?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type calendarSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  calendar_id?: boolean
  description?: boolean
  type?: boolean
  date?: boolean
  createdBy?: boolean
  createdAt?: boolean
  employee?: boolean | Prisma.calendar$employeeArgs<ExtArgs>
}, ExtArgs["result"]["calendar"]>



export type calendarSelectScalar = {
  calendar_id?: boolean
  description?: boolean
  type?: boolean
  date?: boolean
  createdBy?: boolean
  createdAt?: boolean
}

export type calendarOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"calendar_id" | "description" | "type" | "date" | "createdBy" | "createdAt", ExtArgs["result"]["calendar"]>
export type calendarInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee?: boolean | Prisma.calendar$employeeArgs<ExtArgs>
}

export type $calendarPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "calendar"
  objects: {
    employee: Prisma.$employeePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    calendar_id: string
    description: string | null
    type: $Enums.calendar_type | null
    date: Date | null
    createdBy: string | null
    createdAt: Date
  }, ExtArgs["result"]["calendar"]>
  composites: {}
}

export type calendarGetPayload<S extends boolean | null | undefined | calendarDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$calendarPayload, S>

export type calendarCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<calendarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: CalendarCountAggregateInputType | true
  }

export interface calendarDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['calendar'], meta: { name: 'calendar' } }
  /**
   * Find zero or one Calendar that matches the filter.
   * @param {calendarFindUniqueArgs} args - Arguments to find a Calendar
   * @example
   * // Get one Calendar
   * const calendar = await prisma.calendar.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends calendarFindUniqueArgs>(args: Prisma.SelectSubset<T, calendarFindUniqueArgs<ExtArgs>>): Prisma.Prisma__calendarClient<runtime.Types.Result.GetResult<Prisma.$calendarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Calendar that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {calendarFindUniqueOrThrowArgs} args - Arguments to find a Calendar
   * @example
   * // Get one Calendar
   * const calendar = await prisma.calendar.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends calendarFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, calendarFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__calendarClient<runtime.Types.Result.GetResult<Prisma.$calendarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Calendar that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {calendarFindFirstArgs} args - Arguments to find a Calendar
   * @example
   * // Get one Calendar
   * const calendar = await prisma.calendar.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends calendarFindFirstArgs>(args?: Prisma.SelectSubset<T, calendarFindFirstArgs<ExtArgs>>): Prisma.Prisma__calendarClient<runtime.Types.Result.GetResult<Prisma.$calendarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Calendar that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {calendarFindFirstOrThrowArgs} args - Arguments to find a Calendar
   * @example
   * // Get one Calendar
   * const calendar = await prisma.calendar.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends calendarFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, calendarFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__calendarClient<runtime.Types.Result.GetResult<Prisma.$calendarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Calendars that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {calendarFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Calendars
   * const calendars = await prisma.calendar.findMany()
   * 
   * // Get first 10 Calendars
   * const calendars = await prisma.calendar.findMany({ take: 10 })
   * 
   * // Only select the `calendar_id`
   * const calendarWithCalendar_idOnly = await prisma.calendar.findMany({ select: { calendar_id: true } })
   * 
   */
  findMany<T extends calendarFindManyArgs>(args?: Prisma.SelectSubset<T, calendarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$calendarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Calendar.
   * @param {calendarCreateArgs} args - Arguments to create a Calendar.
   * @example
   * // Create one Calendar
   * const Calendar = await prisma.calendar.create({
   *   data: {
   *     // ... data to create a Calendar
   *   }
   * })
   * 
   */
  create<T extends calendarCreateArgs>(args: Prisma.SelectSubset<T, calendarCreateArgs<ExtArgs>>): Prisma.Prisma__calendarClient<runtime.Types.Result.GetResult<Prisma.$calendarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Calendars.
   * @param {calendarCreateManyArgs} args - Arguments to create many Calendars.
   * @example
   * // Create many Calendars
   * const calendar = await prisma.calendar.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends calendarCreateManyArgs>(args?: Prisma.SelectSubset<T, calendarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Calendar.
   * @param {calendarDeleteArgs} args - Arguments to delete one Calendar.
   * @example
   * // Delete one Calendar
   * const Calendar = await prisma.calendar.delete({
   *   where: {
   *     // ... filter to delete one Calendar
   *   }
   * })
   * 
   */
  delete<T extends calendarDeleteArgs>(args: Prisma.SelectSubset<T, calendarDeleteArgs<ExtArgs>>): Prisma.Prisma__calendarClient<runtime.Types.Result.GetResult<Prisma.$calendarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Calendar.
   * @param {calendarUpdateArgs} args - Arguments to update one Calendar.
   * @example
   * // Update one Calendar
   * const calendar = await prisma.calendar.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends calendarUpdateArgs>(args: Prisma.SelectSubset<T, calendarUpdateArgs<ExtArgs>>): Prisma.Prisma__calendarClient<runtime.Types.Result.GetResult<Prisma.$calendarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Calendars.
   * @param {calendarDeleteManyArgs} args - Arguments to filter Calendars to delete.
   * @example
   * // Delete a few Calendars
   * const { count } = await prisma.calendar.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends calendarDeleteManyArgs>(args?: Prisma.SelectSubset<T, calendarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Calendars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {calendarUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Calendars
   * const calendar = await prisma.calendar.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends calendarUpdateManyArgs>(args: Prisma.SelectSubset<T, calendarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Calendar.
   * @param {calendarUpsertArgs} args - Arguments to update or create a Calendar.
   * @example
   * // Update or create a Calendar
   * const calendar = await prisma.calendar.upsert({
   *   create: {
   *     // ... data to create a Calendar
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Calendar we want to update
   *   }
   * })
   */
  upsert<T extends calendarUpsertArgs>(args: Prisma.SelectSubset<T, calendarUpsertArgs<ExtArgs>>): Prisma.Prisma__calendarClient<runtime.Types.Result.GetResult<Prisma.$calendarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Calendars.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {calendarCountArgs} args - Arguments to filter Calendars to count.
   * @example
   * // Count the number of Calendars
   * const count = await prisma.calendar.count({
   *   where: {
   *     // ... the filter for the Calendars we want to count
   *   }
   * })
  **/
  count<T extends calendarCountArgs>(
    args?: Prisma.Subset<T, calendarCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], CalendarCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Calendar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {CalendarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends CalendarAggregateArgs>(args: Prisma.Subset<T, CalendarAggregateArgs>): Prisma.PrismaPromise<GetCalendarAggregateType<T>>

  /**
   * Group by Calendar.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {calendarGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends calendarGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: calendarGroupByArgs['orderBy'] }
      : { orderBy?: calendarGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, calendarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCalendarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the calendar model
 */
readonly fields: calendarFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for calendar.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__calendarClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  employee<T extends Prisma.calendar$employeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.calendar$employeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the calendar model
 */
export interface calendarFieldRefs {
  readonly calendar_id: Prisma.FieldRef<"calendar", 'String'>
  readonly description: Prisma.FieldRef<"calendar", 'String'>
  readonly type: Prisma.FieldRef<"calendar", 'calendar_type'>
  readonly date: Prisma.FieldRef<"calendar", 'DateTime'>
  readonly createdBy: Prisma.FieldRef<"calendar", 'String'>
  readonly createdAt: Prisma.FieldRef<"calendar", 'DateTime'>
}
    

// Custom InputTypes
/**
 * calendar findUnique
 */
export type calendarFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
  /**
   * Filter, which calendar to fetch.
   */
  where: Prisma.calendarWhereUniqueInput
}

/**
 * calendar findUniqueOrThrow
 */
export type calendarFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
  /**
   * Filter, which calendar to fetch.
   */
  where: Prisma.calendarWhereUniqueInput
}

/**
 * calendar findFirst
 */
export type calendarFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
  /**
   * Filter, which calendar to fetch.
   */
  where?: Prisma.calendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of calendars to fetch.
   */
  orderBy?: Prisma.calendarOrderByWithRelationInput | Prisma.calendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for calendars.
   */
  cursor?: Prisma.calendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` calendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` calendars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of calendars.
   */
  distinct?: Prisma.CalendarScalarFieldEnum | Prisma.CalendarScalarFieldEnum[]
}

/**
 * calendar findFirstOrThrow
 */
export type calendarFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
  /**
   * Filter, which calendar to fetch.
   */
  where?: Prisma.calendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of calendars to fetch.
   */
  orderBy?: Prisma.calendarOrderByWithRelationInput | Prisma.calendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for calendars.
   */
  cursor?: Prisma.calendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` calendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` calendars.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of calendars.
   */
  distinct?: Prisma.CalendarScalarFieldEnum | Prisma.CalendarScalarFieldEnum[]
}

/**
 * calendar findMany
 */
export type calendarFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
  /**
   * Filter, which calendars to fetch.
   */
  where?: Prisma.calendarWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of calendars to fetch.
   */
  orderBy?: Prisma.calendarOrderByWithRelationInput | Prisma.calendarOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing calendars.
   */
  cursor?: Prisma.calendarWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` calendars from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` calendars.
   */
  skip?: number
  distinct?: Prisma.CalendarScalarFieldEnum | Prisma.CalendarScalarFieldEnum[]
}

/**
 * calendar create
 */
export type calendarCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
  /**
   * The data needed to create a calendar.
   */
  data: Prisma.XOR<Prisma.calendarCreateInput, Prisma.calendarUncheckedCreateInput>
}

/**
 * calendar createMany
 */
export type calendarCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many calendars.
   */
  data: Prisma.calendarCreateManyInput | Prisma.calendarCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * calendar update
 */
export type calendarUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
  /**
   * The data needed to update a calendar.
   */
  data: Prisma.XOR<Prisma.calendarUpdateInput, Prisma.calendarUncheckedUpdateInput>
  /**
   * Choose, which calendar to update.
   */
  where: Prisma.calendarWhereUniqueInput
}

/**
 * calendar updateMany
 */
export type calendarUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update calendars.
   */
  data: Prisma.XOR<Prisma.calendarUpdateManyMutationInput, Prisma.calendarUncheckedUpdateManyInput>
  /**
   * Filter which calendars to update
   */
  where?: Prisma.calendarWhereInput
  /**
   * Limit how many calendars to update.
   */
  limit?: number
}

/**
 * calendar upsert
 */
export type calendarUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
  /**
   * The filter to search for the calendar to update in case it exists.
   */
  where: Prisma.calendarWhereUniqueInput
  /**
   * In case the calendar found by the `where` argument doesn't exist, create a new calendar with this data.
   */
  create: Prisma.XOR<Prisma.calendarCreateInput, Prisma.calendarUncheckedCreateInput>
  /**
   * In case the calendar was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.calendarUpdateInput, Prisma.calendarUncheckedUpdateInput>
}

/**
 * calendar delete
 */
export type calendarDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
  /**
   * Filter which calendar to delete.
   */
  where: Prisma.calendarWhereUniqueInput
}

/**
 * calendar deleteMany
 */
export type calendarDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which calendars to delete
   */
  where?: Prisma.calendarWhereInput
  /**
   * Limit how many calendars to delete.
   */
  limit?: number
}

/**
 * calendar.employee
 */
export type calendar$employeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * calendar without action
 */
export type calendarDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the calendar
   */
  select?: Prisma.calendarSelect<ExtArgs> | null
  /**
   * Omit specific fields from the calendar
   */
  omit?: Prisma.calendarOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.calendarInclude<ExtArgs> | null
}
