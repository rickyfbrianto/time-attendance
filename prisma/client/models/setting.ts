
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `setting` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model setting
 * 
 */
export type settingModel = runtime.Types.Result.DefaultSelection<Prisma.$settingPayload>

export type AggregateSetting = {
  _count: SettingCountAggregateOutputType | null
  _avg: SettingAvgAggregateOutputType | null
  _sum: SettingSumAggregateOutputType | null
  _min: SettingMinAggregateOutputType | null
  _max: SettingMaxAggregateOutputType | null
}

export type SettingAvgAggregateOutputType = {
  start_periode: number | null
  end_periode: number | null
  late_dispen: number | null
  overtime_allow: number | null
}

export type SettingSumAggregateOutputType = {
  start_periode: number | null
  end_periode: number | null
  late_dispen: number | null
  overtime_allow: number | null
}

export type SettingMinAggregateOutputType = {
  setting_id: string | null
  start_periode: number | null
  end_periode: number | null
  late_dispen: number | null
  overtime_allow: number | null
  overtime_round_up: boolean | null
}

export type SettingMaxAggregateOutputType = {
  setting_id: string | null
  start_periode: number | null
  end_periode: number | null
  late_dispen: number | null
  overtime_allow: number | null
  overtime_round_up: boolean | null
}

export type SettingCountAggregateOutputType = {
  setting_id: number
  start_periode: number
  end_periode: number
  late_dispen: number
  overtime_allow: number
  overtime_round_up: number
  _all: number
}


export type SettingAvgAggregateInputType = {
  start_periode?: true
  end_periode?: true
  late_dispen?: true
  overtime_allow?: true
}

export type SettingSumAggregateInputType = {
  start_periode?: true
  end_periode?: true
  late_dispen?: true
  overtime_allow?: true
}

export type SettingMinAggregateInputType = {
  setting_id?: true
  start_periode?: true
  end_periode?: true
  late_dispen?: true
  overtime_allow?: true
  overtime_round_up?: true
}

export type SettingMaxAggregateInputType = {
  setting_id?: true
  start_periode?: true
  end_periode?: true
  late_dispen?: true
  overtime_allow?: true
  overtime_round_up?: true
}

export type SettingCountAggregateInputType = {
  setting_id?: true
  start_periode?: true
  end_periode?: true
  late_dispen?: true
  overtime_allow?: true
  overtime_round_up?: true
  _all?: true
}

export type SettingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which setting to aggregate.
   */
  where?: Prisma.settingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of settings to fetch.
   */
  orderBy?: Prisma.settingOrderByWithRelationInput | Prisma.settingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.settingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` settings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` settings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned settings
  **/
  _count?: true | SettingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: SettingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: SettingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SettingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SettingMaxAggregateInputType
}

export type GetSettingAggregateType<T extends SettingAggregateArgs> = {
      [P in keyof T & keyof AggregateSetting]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSetting[P]>
    : Prisma.GetScalarType<T[P], AggregateSetting[P]>
}




export type settingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.settingWhereInput
  orderBy?: Prisma.settingOrderByWithAggregationInput | Prisma.settingOrderByWithAggregationInput[]
  by: Prisma.SettingScalarFieldEnum[] | Prisma.SettingScalarFieldEnum
  having?: Prisma.settingScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SettingCountAggregateInputType | true
  _avg?: SettingAvgAggregateInputType
  _sum?: SettingSumAggregateInputType
  _min?: SettingMinAggregateInputType
  _max?: SettingMaxAggregateInputType
}

export type SettingGroupByOutputType = {
  setting_id: string
  start_periode: number
  end_periode: number
  late_dispen: number
  overtime_allow: number
  overtime_round_up: boolean
  _count: SettingCountAggregateOutputType | null
  _avg: SettingAvgAggregateOutputType | null
  _sum: SettingSumAggregateOutputType | null
  _min: SettingMinAggregateOutputType | null
  _max: SettingMaxAggregateOutputType | null
}

type GetSettingGroupByPayload<T extends settingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SettingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SettingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SettingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SettingGroupByOutputType[P]>
      }
    >
  > 



export type settingWhereInput = {
  AND?: Prisma.settingWhereInput | Prisma.settingWhereInput[]
  OR?: Prisma.settingWhereInput[]
  NOT?: Prisma.settingWhereInput | Prisma.settingWhereInput[]
  setting_id?: Prisma.StringFilter<"setting"> | string
  start_periode?: Prisma.IntFilter<"setting"> | number
  end_periode?: Prisma.IntFilter<"setting"> | number
  late_dispen?: Prisma.IntFilter<"setting"> | number
  overtime_allow?: Prisma.IntFilter<"setting"> | number
  overtime_round_up?: Prisma.BoolFilter<"setting"> | boolean
}

export type settingOrderByWithRelationInput = {
  setting_id?: Prisma.SortOrder
  start_periode?: Prisma.SortOrder
  end_periode?: Prisma.SortOrder
  late_dispen?: Prisma.SortOrder
  overtime_allow?: Prisma.SortOrder
  overtime_round_up?: Prisma.SortOrder
  _relevance?: Prisma.settingOrderByRelevanceInput
}

export type settingWhereUniqueInput = Prisma.AtLeast<{
  setting_id?: string
  AND?: Prisma.settingWhereInput | Prisma.settingWhereInput[]
  OR?: Prisma.settingWhereInput[]
  NOT?: Prisma.settingWhereInput | Prisma.settingWhereInput[]
  start_periode?: Prisma.IntFilter<"setting"> | number
  end_periode?: Prisma.IntFilter<"setting"> | number
  late_dispen?: Prisma.IntFilter<"setting"> | number
  overtime_allow?: Prisma.IntFilter<"setting"> | number
  overtime_round_up?: Prisma.BoolFilter<"setting"> | boolean
}, "setting_id">

export type settingOrderByWithAggregationInput = {
  setting_id?: Prisma.SortOrder
  start_periode?: Prisma.SortOrder
  end_periode?: Prisma.SortOrder
  late_dispen?: Prisma.SortOrder
  overtime_allow?: Prisma.SortOrder
  overtime_round_up?: Prisma.SortOrder
  _count?: Prisma.settingCountOrderByAggregateInput
  _avg?: Prisma.settingAvgOrderByAggregateInput
  _max?: Prisma.settingMaxOrderByAggregateInput
  _min?: Prisma.settingMinOrderByAggregateInput
  _sum?: Prisma.settingSumOrderByAggregateInput
}

export type settingScalarWhereWithAggregatesInput = {
  AND?: Prisma.settingScalarWhereWithAggregatesInput | Prisma.settingScalarWhereWithAggregatesInput[]
  OR?: Prisma.settingScalarWhereWithAggregatesInput[]
  NOT?: Prisma.settingScalarWhereWithAggregatesInput | Prisma.settingScalarWhereWithAggregatesInput[]
  setting_id?: Prisma.StringWithAggregatesFilter<"setting"> | string
  start_periode?: Prisma.IntWithAggregatesFilter<"setting"> | number
  end_periode?: Prisma.IntWithAggregatesFilter<"setting"> | number
  late_dispen?: Prisma.IntWithAggregatesFilter<"setting"> | number
  overtime_allow?: Prisma.IntWithAggregatesFilter<"setting"> | number
  overtime_round_up?: Prisma.BoolWithAggregatesFilter<"setting"> | boolean
}

export type settingCreateInput = {
  setting_id: string
  start_periode?: number
  end_periode?: number
  late_dispen?: number
  overtime_allow?: number
  overtime_round_up: boolean
}

export type settingUncheckedCreateInput = {
  setting_id: string
  start_periode?: number
  end_periode?: number
  late_dispen?: number
  overtime_allow?: number
  overtime_round_up: boolean
}

export type settingUpdateInput = {
  setting_id?: Prisma.StringFieldUpdateOperationsInput | string
  start_periode?: Prisma.IntFieldUpdateOperationsInput | number
  end_periode?: Prisma.IntFieldUpdateOperationsInput | number
  late_dispen?: Prisma.IntFieldUpdateOperationsInput | number
  overtime_allow?: Prisma.IntFieldUpdateOperationsInput | number
  overtime_round_up?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type settingUncheckedUpdateInput = {
  setting_id?: Prisma.StringFieldUpdateOperationsInput | string
  start_periode?: Prisma.IntFieldUpdateOperationsInput | number
  end_periode?: Prisma.IntFieldUpdateOperationsInput | number
  late_dispen?: Prisma.IntFieldUpdateOperationsInput | number
  overtime_allow?: Prisma.IntFieldUpdateOperationsInput | number
  overtime_round_up?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type settingCreateManyInput = {
  setting_id: string
  start_periode?: number
  end_periode?: number
  late_dispen?: number
  overtime_allow?: number
  overtime_round_up: boolean
}

export type settingUpdateManyMutationInput = {
  setting_id?: Prisma.StringFieldUpdateOperationsInput | string
  start_periode?: Prisma.IntFieldUpdateOperationsInput | number
  end_periode?: Prisma.IntFieldUpdateOperationsInput | number
  late_dispen?: Prisma.IntFieldUpdateOperationsInput | number
  overtime_allow?: Prisma.IntFieldUpdateOperationsInput | number
  overtime_round_up?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type settingUncheckedUpdateManyInput = {
  setting_id?: Prisma.StringFieldUpdateOperationsInput | string
  start_periode?: Prisma.IntFieldUpdateOperationsInput | number
  end_periode?: Prisma.IntFieldUpdateOperationsInput | number
  late_dispen?: Prisma.IntFieldUpdateOperationsInput | number
  overtime_allow?: Prisma.IntFieldUpdateOperationsInput | number
  overtime_round_up?: Prisma.BoolFieldUpdateOperationsInput | boolean
}

export type settingOrderByRelevanceInput = {
  fields: Prisma.settingOrderByRelevanceFieldEnum | Prisma.settingOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type settingCountOrderByAggregateInput = {
  setting_id?: Prisma.SortOrder
  start_periode?: Prisma.SortOrder
  end_periode?: Prisma.SortOrder
  late_dispen?: Prisma.SortOrder
  overtime_allow?: Prisma.SortOrder
  overtime_round_up?: Prisma.SortOrder
}

export type settingAvgOrderByAggregateInput = {
  start_periode?: Prisma.SortOrder
  end_periode?: Prisma.SortOrder
  late_dispen?: Prisma.SortOrder
  overtime_allow?: Prisma.SortOrder
}

export type settingMaxOrderByAggregateInput = {
  setting_id?: Prisma.SortOrder
  start_periode?: Prisma.SortOrder
  end_periode?: Prisma.SortOrder
  late_dispen?: Prisma.SortOrder
  overtime_allow?: Prisma.SortOrder
  overtime_round_up?: Prisma.SortOrder
}

export type settingMinOrderByAggregateInput = {
  setting_id?: Prisma.SortOrder
  start_periode?: Prisma.SortOrder
  end_periode?: Prisma.SortOrder
  late_dispen?: Prisma.SortOrder
  overtime_allow?: Prisma.SortOrder
  overtime_round_up?: Prisma.SortOrder
}

export type settingSumOrderByAggregateInput = {
  start_periode?: Prisma.SortOrder
  end_periode?: Prisma.SortOrder
  late_dispen?: Prisma.SortOrder
  overtime_allow?: Prisma.SortOrder
}



export type settingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  setting_id?: boolean
  start_periode?: boolean
  end_periode?: boolean
  late_dispen?: boolean
  overtime_allow?: boolean
  overtime_round_up?: boolean
}, ExtArgs["result"]["setting"]>



export type settingSelectScalar = {
  setting_id?: boolean
  start_periode?: boolean
  end_periode?: boolean
  late_dispen?: boolean
  overtime_allow?: boolean
  overtime_round_up?: boolean
}

export type settingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"setting_id" | "start_periode" | "end_periode" | "late_dispen" | "overtime_allow" | "overtime_round_up", ExtArgs["result"]["setting"]>

export type $settingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "setting"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    setting_id: string
    start_periode: number
    end_periode: number
    late_dispen: number
    overtime_allow: number
    overtime_round_up: boolean
  }, ExtArgs["result"]["setting"]>
  composites: {}
}

export type settingGetPayload<S extends boolean | null | undefined | settingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$settingPayload, S>

export type settingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<settingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SettingCountAggregateInputType | true
  }

export interface settingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['setting'], meta: { name: 'setting' } }
  /**
   * Find zero or one Setting that matches the filter.
   * @param {settingFindUniqueArgs} args - Arguments to find a Setting
   * @example
   * // Get one Setting
   * const setting = await prisma.setting.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends settingFindUniqueArgs>(args: Prisma.SelectSubset<T, settingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__settingClient<runtime.Types.Result.GetResult<Prisma.$settingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Setting that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {settingFindUniqueOrThrowArgs} args - Arguments to find a Setting
   * @example
   * // Get one Setting
   * const setting = await prisma.setting.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends settingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, settingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__settingClient<runtime.Types.Result.GetResult<Prisma.$settingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Setting that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {settingFindFirstArgs} args - Arguments to find a Setting
   * @example
   * // Get one Setting
   * const setting = await prisma.setting.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends settingFindFirstArgs>(args?: Prisma.SelectSubset<T, settingFindFirstArgs<ExtArgs>>): Prisma.Prisma__settingClient<runtime.Types.Result.GetResult<Prisma.$settingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Setting that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {settingFindFirstOrThrowArgs} args - Arguments to find a Setting
   * @example
   * // Get one Setting
   * const setting = await prisma.setting.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends settingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, settingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__settingClient<runtime.Types.Result.GetResult<Prisma.$settingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Settings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {settingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Settings
   * const settings = await prisma.setting.findMany()
   * 
   * // Get first 10 Settings
   * const settings = await prisma.setting.findMany({ take: 10 })
   * 
   * // Only select the `setting_id`
   * const settingWithSetting_idOnly = await prisma.setting.findMany({ select: { setting_id: true } })
   * 
   */
  findMany<T extends settingFindManyArgs>(args?: Prisma.SelectSubset<T, settingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$settingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Setting.
   * @param {settingCreateArgs} args - Arguments to create a Setting.
   * @example
   * // Create one Setting
   * const Setting = await prisma.setting.create({
   *   data: {
   *     // ... data to create a Setting
   *   }
   * })
   * 
   */
  create<T extends settingCreateArgs>(args: Prisma.SelectSubset<T, settingCreateArgs<ExtArgs>>): Prisma.Prisma__settingClient<runtime.Types.Result.GetResult<Prisma.$settingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Settings.
   * @param {settingCreateManyArgs} args - Arguments to create many Settings.
   * @example
   * // Create many Settings
   * const setting = await prisma.setting.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends settingCreateManyArgs>(args?: Prisma.SelectSubset<T, settingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Setting.
   * @param {settingDeleteArgs} args - Arguments to delete one Setting.
   * @example
   * // Delete one Setting
   * const Setting = await prisma.setting.delete({
   *   where: {
   *     // ... filter to delete one Setting
   *   }
   * })
   * 
   */
  delete<T extends settingDeleteArgs>(args: Prisma.SelectSubset<T, settingDeleteArgs<ExtArgs>>): Prisma.Prisma__settingClient<runtime.Types.Result.GetResult<Prisma.$settingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Setting.
   * @param {settingUpdateArgs} args - Arguments to update one Setting.
   * @example
   * // Update one Setting
   * const setting = await prisma.setting.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends settingUpdateArgs>(args: Prisma.SelectSubset<T, settingUpdateArgs<ExtArgs>>): Prisma.Prisma__settingClient<runtime.Types.Result.GetResult<Prisma.$settingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Settings.
   * @param {settingDeleteManyArgs} args - Arguments to filter Settings to delete.
   * @example
   * // Delete a few Settings
   * const { count } = await prisma.setting.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends settingDeleteManyArgs>(args?: Prisma.SelectSubset<T, settingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Settings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {settingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Settings
   * const setting = await prisma.setting.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends settingUpdateManyArgs>(args: Prisma.SelectSubset<T, settingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Setting.
   * @param {settingUpsertArgs} args - Arguments to update or create a Setting.
   * @example
   * // Update or create a Setting
   * const setting = await prisma.setting.upsert({
   *   create: {
   *     // ... data to create a Setting
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Setting we want to update
   *   }
   * })
   */
  upsert<T extends settingUpsertArgs>(args: Prisma.SelectSubset<T, settingUpsertArgs<ExtArgs>>): Prisma.Prisma__settingClient<runtime.Types.Result.GetResult<Prisma.$settingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Settings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {settingCountArgs} args - Arguments to filter Settings to count.
   * @example
   * // Count the number of Settings
   * const count = await prisma.setting.count({
   *   where: {
   *     // ... the filter for the Settings we want to count
   *   }
   * })
  **/
  count<T extends settingCountArgs>(
    args?: Prisma.Subset<T, settingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SettingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Setting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SettingAggregateArgs>(args: Prisma.Subset<T, SettingAggregateArgs>): Prisma.PrismaPromise<GetSettingAggregateType<T>>

  /**
   * Group by Setting.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {settingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends settingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: settingGroupByArgs['orderBy'] }
      : { orderBy?: settingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, settingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the setting model
 */
readonly fields: settingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for setting.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__settingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the setting model
 */
export interface settingFieldRefs {
  readonly setting_id: Prisma.FieldRef<"setting", 'String'>
  readonly start_periode: Prisma.FieldRef<"setting", 'Int'>
  readonly end_periode: Prisma.FieldRef<"setting", 'Int'>
  readonly late_dispen: Prisma.FieldRef<"setting", 'Int'>
  readonly overtime_allow: Prisma.FieldRef<"setting", 'Int'>
  readonly overtime_round_up: Prisma.FieldRef<"setting", 'Boolean'>
}
    

// Custom InputTypes
/**
 * setting findUnique
 */
export type settingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
  /**
   * Filter, which setting to fetch.
   */
  where: Prisma.settingWhereUniqueInput
}

/**
 * setting findUniqueOrThrow
 */
export type settingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
  /**
   * Filter, which setting to fetch.
   */
  where: Prisma.settingWhereUniqueInput
}

/**
 * setting findFirst
 */
export type settingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
  /**
   * Filter, which setting to fetch.
   */
  where?: Prisma.settingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of settings to fetch.
   */
  orderBy?: Prisma.settingOrderByWithRelationInput | Prisma.settingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for settings.
   */
  cursor?: Prisma.settingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` settings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` settings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of settings.
   */
  distinct?: Prisma.SettingScalarFieldEnum | Prisma.SettingScalarFieldEnum[]
}

/**
 * setting findFirstOrThrow
 */
export type settingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
  /**
   * Filter, which setting to fetch.
   */
  where?: Prisma.settingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of settings to fetch.
   */
  orderBy?: Prisma.settingOrderByWithRelationInput | Prisma.settingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for settings.
   */
  cursor?: Prisma.settingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` settings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` settings.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of settings.
   */
  distinct?: Prisma.SettingScalarFieldEnum | Prisma.SettingScalarFieldEnum[]
}

/**
 * setting findMany
 */
export type settingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
  /**
   * Filter, which settings to fetch.
   */
  where?: Prisma.settingWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of settings to fetch.
   */
  orderBy?: Prisma.settingOrderByWithRelationInput | Prisma.settingOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing settings.
   */
  cursor?: Prisma.settingWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` settings from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` settings.
   */
  skip?: number
  distinct?: Prisma.SettingScalarFieldEnum | Prisma.SettingScalarFieldEnum[]
}

/**
 * setting create
 */
export type settingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
  /**
   * The data needed to create a setting.
   */
  data: Prisma.XOR<Prisma.settingCreateInput, Prisma.settingUncheckedCreateInput>
}

/**
 * setting createMany
 */
export type settingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many settings.
   */
  data: Prisma.settingCreateManyInput | Prisma.settingCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * setting update
 */
export type settingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
  /**
   * The data needed to update a setting.
   */
  data: Prisma.XOR<Prisma.settingUpdateInput, Prisma.settingUncheckedUpdateInput>
  /**
   * Choose, which setting to update.
   */
  where: Prisma.settingWhereUniqueInput
}

/**
 * setting updateMany
 */
export type settingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update settings.
   */
  data: Prisma.XOR<Prisma.settingUpdateManyMutationInput, Prisma.settingUncheckedUpdateManyInput>
  /**
   * Filter which settings to update
   */
  where?: Prisma.settingWhereInput
  /**
   * Limit how many settings to update.
   */
  limit?: number
}

/**
 * setting upsert
 */
export type settingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
  /**
   * The filter to search for the setting to update in case it exists.
   */
  where: Prisma.settingWhereUniqueInput
  /**
   * In case the setting found by the `where` argument doesn't exist, create a new setting with this data.
   */
  create: Prisma.XOR<Prisma.settingCreateInput, Prisma.settingUncheckedCreateInput>
  /**
   * In case the setting was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.settingUpdateInput, Prisma.settingUncheckedUpdateInput>
}

/**
 * setting delete
 */
export type settingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
  /**
   * Filter which setting to delete.
   */
  where: Prisma.settingWhereUniqueInput
}

/**
 * setting deleteMany
 */
export type settingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which settings to delete
   */
  where?: Prisma.settingWhereInput
  /**
   * Limit how many settings to delete.
   */
  limit?: number
}

/**
 * setting without action
 */
export type settingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the setting
   */
  select?: Prisma.settingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the setting
   */
  omit?: Prisma.settingOmit<ExtArgs> | null
}
