
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `ijin` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ijin
 * 
 */
export type ijinModel = runtime.Types.Result.DefaultSelection<Prisma.$ijinPayload>

export type AggregateIjin = {
  _count: IjinCountAggregateOutputType | null
  _min: IjinMinAggregateOutputType | null
  _max: IjinMaxAggregateOutputType | null
}

export type IjinMinAggregateOutputType = {
  ijin_id: string | null
  ijin_group_id: string | null
  payroll: string | null
  type: string | null
  description: string | null
  date: Date | null
  status: $Enums.ijin_status | null
  approval: string | null
  is_delegate: boolean | null
  createdAt: Date | null
}

export type IjinMaxAggregateOutputType = {
  ijin_id: string | null
  ijin_group_id: string | null
  payroll: string | null
  type: string | null
  description: string | null
  date: Date | null
  status: $Enums.ijin_status | null
  approval: string | null
  is_delegate: boolean | null
  createdAt: Date | null
}

export type IjinCountAggregateOutputType = {
  ijin_id: number
  ijin_group_id: number
  payroll: number
  type: number
  description: number
  date: number
  status: number
  approval: number
  is_delegate: number
  createdAt: number
  _all: number
}


export type IjinMinAggregateInputType = {
  ijin_id?: true
  ijin_group_id?: true
  payroll?: true
  type?: true
  description?: true
  date?: true
  status?: true
  approval?: true
  is_delegate?: true
  createdAt?: true
}

export type IjinMaxAggregateInputType = {
  ijin_id?: true
  ijin_group_id?: true
  payroll?: true
  type?: true
  description?: true
  date?: true
  status?: true
  approval?: true
  is_delegate?: true
  createdAt?: true
}

export type IjinCountAggregateInputType = {
  ijin_id?: true
  ijin_group_id?: true
  payroll?: true
  type?: true
  description?: true
  date?: true
  status?: true
  approval?: true
  is_delegate?: true
  createdAt?: true
  _all?: true
}

export type IjinAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ijin to aggregate.
   */
  where?: Prisma.ijinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ijins to fetch.
   */
  orderBy?: Prisma.ijinOrderByWithRelationInput | Prisma.ijinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ijinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ijins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ijins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ijins
  **/
  _count?: true | IjinCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: IjinMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: IjinMaxAggregateInputType
}

export type GetIjinAggregateType<T extends IjinAggregateArgs> = {
      [P in keyof T & keyof AggregateIjin]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateIjin[P]>
    : Prisma.GetScalarType<T[P], AggregateIjin[P]>
}




export type ijinGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ijinWhereInput
  orderBy?: Prisma.ijinOrderByWithAggregationInput | Prisma.ijinOrderByWithAggregationInput[]
  by: Prisma.IjinScalarFieldEnum[] | Prisma.IjinScalarFieldEnum
  having?: Prisma.ijinScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: IjinCountAggregateInputType | true
  _min?: IjinMinAggregateInputType
  _max?: IjinMaxAggregateInputType
}

export type IjinGroupByOutputType = {
  ijin_id: string
  ijin_group_id: string
  payroll: string | null
  type: string
  description: string
  date: Date
  status: $Enums.ijin_status
  approval: string | null
  is_delegate: boolean
  createdAt: Date
  _count: IjinCountAggregateOutputType | null
  _min: IjinMinAggregateOutputType | null
  _max: IjinMaxAggregateOutputType | null
}

type GetIjinGroupByPayload<T extends ijinGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<IjinGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof IjinGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], IjinGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], IjinGroupByOutputType[P]>
      }
    >
  > 



export type ijinWhereInput = {
  AND?: Prisma.ijinWhereInput | Prisma.ijinWhereInput[]
  OR?: Prisma.ijinWhereInput[]
  NOT?: Prisma.ijinWhereInput | Prisma.ijinWhereInput[]
  ijin_id?: Prisma.StringFilter<"ijin"> | string
  ijin_group_id?: Prisma.StringFilter<"ijin"> | string
  payroll?: Prisma.StringNullableFilter<"ijin"> | string | null
  type?: Prisma.StringFilter<"ijin"> | string
  description?: Prisma.StringFilter<"ijin"> | string
  date?: Prisma.DateTimeFilter<"ijin"> | Date | string
  status?: Prisma.Enumijin_statusFilter<"ijin"> | $Enums.ijin_status
  approval?: Prisma.StringNullableFilter<"ijin"> | string | null
  is_delegate?: Prisma.BoolFilter<"ijin"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ijin"> | Date | string
  employee_ijin_approvalToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
}

export type ijinOrderByWithRelationInput = {
  ijin_id?: Prisma.SortOrder
  ijin_group_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  approval?: Prisma.SortOrderInput | Prisma.SortOrder
  is_delegate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  employee_ijin_approvalToemployee?: Prisma.employeeOrderByWithRelationInput
  employee?: Prisma.employeeOrderByWithRelationInput
  _relevance?: Prisma.ijinOrderByRelevanceInput
}

export type ijinWhereUniqueInput = Prisma.AtLeast<{
  ijin_id?: string
  AND?: Prisma.ijinWhereInput | Prisma.ijinWhereInput[]
  OR?: Prisma.ijinWhereInput[]
  NOT?: Prisma.ijinWhereInput | Prisma.ijinWhereInput[]
  ijin_group_id?: Prisma.StringFilter<"ijin"> | string
  payroll?: Prisma.StringNullableFilter<"ijin"> | string | null
  type?: Prisma.StringFilter<"ijin"> | string
  description?: Prisma.StringFilter<"ijin"> | string
  date?: Prisma.DateTimeFilter<"ijin"> | Date | string
  status?: Prisma.Enumijin_statusFilter<"ijin"> | $Enums.ijin_status
  approval?: Prisma.StringNullableFilter<"ijin"> | string | null
  is_delegate?: Prisma.BoolFilter<"ijin"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ijin"> | Date | string
  employee_ijin_approvalToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
}, "ijin_id">

export type ijinOrderByWithAggregationInput = {
  ijin_id?: Prisma.SortOrder
  ijin_group_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  approval?: Prisma.SortOrderInput | Prisma.SortOrder
  is_delegate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.ijinCountOrderByAggregateInput
  _max?: Prisma.ijinMaxOrderByAggregateInput
  _min?: Prisma.ijinMinOrderByAggregateInput
}

export type ijinScalarWhereWithAggregatesInput = {
  AND?: Prisma.ijinScalarWhereWithAggregatesInput | Prisma.ijinScalarWhereWithAggregatesInput[]
  OR?: Prisma.ijinScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ijinScalarWhereWithAggregatesInput | Prisma.ijinScalarWhereWithAggregatesInput[]
  ijin_id?: Prisma.StringWithAggregatesFilter<"ijin"> | string
  ijin_group_id?: Prisma.StringWithAggregatesFilter<"ijin"> | string
  payroll?: Prisma.StringNullableWithAggregatesFilter<"ijin"> | string | null
  type?: Prisma.StringWithAggregatesFilter<"ijin"> | string
  description?: Prisma.StringWithAggregatesFilter<"ijin"> | string
  date?: Prisma.DateTimeWithAggregatesFilter<"ijin"> | Date | string
  status?: Prisma.Enumijin_statusWithAggregatesFilter<"ijin"> | $Enums.ijin_status
  approval?: Prisma.StringNullableWithAggregatesFilter<"ijin"> | string | null
  is_delegate?: Prisma.BoolWithAggregatesFilter<"ijin"> | boolean
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ijin"> | Date | string
}

export type ijinCreateInput = {
  ijin_id: string
  ijin_group_id: string
  type: string
  description: string
  date: Date | string
  status: $Enums.ijin_status
  is_delegate: boolean
  createdAt: Date | string
  employee_ijin_approvalToemployee?: Prisma.employeeCreateNestedOneWithoutIjin_ijin_approvalToemployeeInput
  employee?: Prisma.employeeCreateNestedOneWithoutIjinInput
}

export type ijinUncheckedCreateInput = {
  ijin_id: string
  ijin_group_id: string
  payroll?: string | null
  type: string
  description: string
  date: Date | string
  status: $Enums.ijin_status
  approval?: string | null
  is_delegate: boolean
  createdAt: Date | string
}

export type ijinUpdateInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_ijin_approvalToemployee?: Prisma.employeeUpdateOneWithoutIjin_ijin_approvalToemployeeNestedInput
  employee?: Prisma.employeeUpdateOneWithoutIjinNestedInput
}

export type ijinUncheckedUpdateInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  approval?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ijinCreateManyInput = {
  ijin_id: string
  ijin_group_id: string
  payroll?: string | null
  type: string
  description: string
  date: Date | string
  status: $Enums.ijin_status
  approval?: string | null
  is_delegate: boolean
  createdAt: Date | string
}

export type ijinUpdateManyMutationInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ijinUncheckedUpdateManyInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  approval?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IjinListRelationFilter = {
  every?: Prisma.ijinWhereInput
  some?: Prisma.ijinWhereInput
  none?: Prisma.ijinWhereInput
}

export type ijinOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ijinOrderByRelevanceInput = {
  fields: Prisma.ijinOrderByRelevanceFieldEnum | Prisma.ijinOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type ijinCountOrderByAggregateInput = {
  ijin_id?: Prisma.SortOrder
  ijin_group_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  approval?: Prisma.SortOrder
  is_delegate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ijinMaxOrderByAggregateInput = {
  ijin_id?: Prisma.SortOrder
  ijin_group_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  approval?: Prisma.SortOrder
  is_delegate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ijinMinOrderByAggregateInput = {
  ijin_id?: Prisma.SortOrder
  ijin_group_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrder
  type?: Prisma.SortOrder
  description?: Prisma.SortOrder
  date?: Prisma.SortOrder
  status?: Prisma.SortOrder
  approval?: Prisma.SortOrder
  is_delegate?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type ijinCreateNestedManyWithoutEmployee_ijin_approvalToemployeeInput = {
  create?: Prisma.XOR<Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput, Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput> | Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput[] | Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput[]
  connectOrCreate?: Prisma.ijinCreateOrConnectWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinCreateOrConnectWithoutEmployee_ijin_approvalToemployeeInput[]
  createMany?: Prisma.ijinCreateManyEmployee_ijin_approvalToemployeeInputEnvelope
  connect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
}

export type ijinCreateNestedManyWithoutEmployeeInput = {
  create?: Prisma.XOR<Prisma.ijinCreateWithoutEmployeeInput, Prisma.ijinUncheckedCreateWithoutEmployeeInput> | Prisma.ijinCreateWithoutEmployeeInput[] | Prisma.ijinUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.ijinCreateOrConnectWithoutEmployeeInput | Prisma.ijinCreateOrConnectWithoutEmployeeInput[]
  createMany?: Prisma.ijinCreateManyEmployeeInputEnvelope
  connect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
}

export type ijinUncheckedCreateNestedManyWithoutEmployee_ijin_approvalToemployeeInput = {
  create?: Prisma.XOR<Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput, Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput> | Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput[] | Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput[]
  connectOrCreate?: Prisma.ijinCreateOrConnectWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinCreateOrConnectWithoutEmployee_ijin_approvalToemployeeInput[]
  createMany?: Prisma.ijinCreateManyEmployee_ijin_approvalToemployeeInputEnvelope
  connect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
}

export type ijinUncheckedCreateNestedManyWithoutEmployeeInput = {
  create?: Prisma.XOR<Prisma.ijinCreateWithoutEmployeeInput, Prisma.ijinUncheckedCreateWithoutEmployeeInput> | Prisma.ijinCreateWithoutEmployeeInput[] | Prisma.ijinUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.ijinCreateOrConnectWithoutEmployeeInput | Prisma.ijinCreateOrConnectWithoutEmployeeInput[]
  createMany?: Prisma.ijinCreateManyEmployeeInputEnvelope
  connect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
}

export type ijinUpdateManyWithoutEmployee_ijin_approvalToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput, Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput> | Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput[] | Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput[]
  connectOrCreate?: Prisma.ijinCreateOrConnectWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinCreateOrConnectWithoutEmployee_ijin_approvalToemployeeInput[]
  upsert?: Prisma.ijinUpsertWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinUpsertWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput[]
  createMany?: Prisma.ijinCreateManyEmployee_ijin_approvalToemployeeInputEnvelope
  set?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  disconnect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  delete?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  connect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  update?: Prisma.ijinUpdateWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinUpdateWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput[]
  updateMany?: Prisma.ijinUpdateManyWithWhereWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinUpdateManyWithWhereWithoutEmployee_ijin_approvalToemployeeInput[]
  deleteMany?: Prisma.ijinScalarWhereInput | Prisma.ijinScalarWhereInput[]
}

export type ijinUpdateManyWithoutEmployeeNestedInput = {
  create?: Prisma.XOR<Prisma.ijinCreateWithoutEmployeeInput, Prisma.ijinUncheckedCreateWithoutEmployeeInput> | Prisma.ijinCreateWithoutEmployeeInput[] | Prisma.ijinUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.ijinCreateOrConnectWithoutEmployeeInput | Prisma.ijinCreateOrConnectWithoutEmployeeInput[]
  upsert?: Prisma.ijinUpsertWithWhereUniqueWithoutEmployeeInput | Prisma.ijinUpsertWithWhereUniqueWithoutEmployeeInput[]
  createMany?: Prisma.ijinCreateManyEmployeeInputEnvelope
  set?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  disconnect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  delete?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  connect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  update?: Prisma.ijinUpdateWithWhereUniqueWithoutEmployeeInput | Prisma.ijinUpdateWithWhereUniqueWithoutEmployeeInput[]
  updateMany?: Prisma.ijinUpdateManyWithWhereWithoutEmployeeInput | Prisma.ijinUpdateManyWithWhereWithoutEmployeeInput[]
  deleteMany?: Prisma.ijinScalarWhereInput | Prisma.ijinScalarWhereInput[]
}

export type ijinUncheckedUpdateManyWithoutEmployee_ijin_approvalToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput, Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput> | Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput[] | Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput[]
  connectOrCreate?: Prisma.ijinCreateOrConnectWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinCreateOrConnectWithoutEmployee_ijin_approvalToemployeeInput[]
  upsert?: Prisma.ijinUpsertWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinUpsertWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput[]
  createMany?: Prisma.ijinCreateManyEmployee_ijin_approvalToemployeeInputEnvelope
  set?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  disconnect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  delete?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  connect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  update?: Prisma.ijinUpdateWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinUpdateWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput[]
  updateMany?: Prisma.ijinUpdateManyWithWhereWithoutEmployee_ijin_approvalToemployeeInput | Prisma.ijinUpdateManyWithWhereWithoutEmployee_ijin_approvalToemployeeInput[]
  deleteMany?: Prisma.ijinScalarWhereInput | Prisma.ijinScalarWhereInput[]
}

export type ijinUncheckedUpdateManyWithoutEmployeeNestedInput = {
  create?: Prisma.XOR<Prisma.ijinCreateWithoutEmployeeInput, Prisma.ijinUncheckedCreateWithoutEmployeeInput> | Prisma.ijinCreateWithoutEmployeeInput[] | Prisma.ijinUncheckedCreateWithoutEmployeeInput[]
  connectOrCreate?: Prisma.ijinCreateOrConnectWithoutEmployeeInput | Prisma.ijinCreateOrConnectWithoutEmployeeInput[]
  upsert?: Prisma.ijinUpsertWithWhereUniqueWithoutEmployeeInput | Prisma.ijinUpsertWithWhereUniqueWithoutEmployeeInput[]
  createMany?: Prisma.ijinCreateManyEmployeeInputEnvelope
  set?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  disconnect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  delete?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  connect?: Prisma.ijinWhereUniqueInput | Prisma.ijinWhereUniqueInput[]
  update?: Prisma.ijinUpdateWithWhereUniqueWithoutEmployeeInput | Prisma.ijinUpdateWithWhereUniqueWithoutEmployeeInput[]
  updateMany?: Prisma.ijinUpdateManyWithWhereWithoutEmployeeInput | Prisma.ijinUpdateManyWithWhereWithoutEmployeeInput[]
  deleteMany?: Prisma.ijinScalarWhereInput | Prisma.ijinScalarWhereInput[]
}

export type Enumijin_statusFieldUpdateOperationsInput = {
  set?: $Enums.ijin_status
}

export type ijinCreateWithoutEmployee_ijin_approvalToemployeeInput = {
  ijin_id: string
  ijin_group_id: string
  type: string
  description: string
  date: Date | string
  status: $Enums.ijin_status
  is_delegate: boolean
  createdAt: Date | string
  employee?: Prisma.employeeCreateNestedOneWithoutIjinInput
}

export type ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput = {
  ijin_id: string
  ijin_group_id: string
  payroll?: string | null
  type: string
  description: string
  date: Date | string
  status: $Enums.ijin_status
  is_delegate: boolean
  createdAt: Date | string
}

export type ijinCreateOrConnectWithoutEmployee_ijin_approvalToemployeeInput = {
  where: Prisma.ijinWhereUniqueInput
  create: Prisma.XOR<Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput, Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput>
}

export type ijinCreateManyEmployee_ijin_approvalToemployeeInputEnvelope = {
  data: Prisma.ijinCreateManyEmployee_ijin_approvalToemployeeInput | Prisma.ijinCreateManyEmployee_ijin_approvalToemployeeInput[]
  skipDuplicates?: boolean
}

export type ijinCreateWithoutEmployeeInput = {
  ijin_id: string
  ijin_group_id: string
  type: string
  description: string
  date: Date | string
  status: $Enums.ijin_status
  is_delegate: boolean
  createdAt: Date | string
  employee_ijin_approvalToemployee?: Prisma.employeeCreateNestedOneWithoutIjin_ijin_approvalToemployeeInput
}

export type ijinUncheckedCreateWithoutEmployeeInput = {
  ijin_id: string
  ijin_group_id: string
  type: string
  description: string
  date: Date | string
  status: $Enums.ijin_status
  approval?: string | null
  is_delegate: boolean
  createdAt: Date | string
}

export type ijinCreateOrConnectWithoutEmployeeInput = {
  where: Prisma.ijinWhereUniqueInput
  create: Prisma.XOR<Prisma.ijinCreateWithoutEmployeeInput, Prisma.ijinUncheckedCreateWithoutEmployeeInput>
}

export type ijinCreateManyEmployeeInputEnvelope = {
  data: Prisma.ijinCreateManyEmployeeInput | Prisma.ijinCreateManyEmployeeInput[]
  skipDuplicates?: boolean
}

export type ijinUpsertWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput = {
  where: Prisma.ijinWhereUniqueInput
  update: Prisma.XOR<Prisma.ijinUpdateWithoutEmployee_ijin_approvalToemployeeInput, Prisma.ijinUncheckedUpdateWithoutEmployee_ijin_approvalToemployeeInput>
  create: Prisma.XOR<Prisma.ijinCreateWithoutEmployee_ijin_approvalToemployeeInput, Prisma.ijinUncheckedCreateWithoutEmployee_ijin_approvalToemployeeInput>
}

export type ijinUpdateWithWhereUniqueWithoutEmployee_ijin_approvalToemployeeInput = {
  where: Prisma.ijinWhereUniqueInput
  data: Prisma.XOR<Prisma.ijinUpdateWithoutEmployee_ijin_approvalToemployeeInput, Prisma.ijinUncheckedUpdateWithoutEmployee_ijin_approvalToemployeeInput>
}

export type ijinUpdateManyWithWhereWithoutEmployee_ijin_approvalToemployeeInput = {
  where: Prisma.ijinScalarWhereInput
  data: Prisma.XOR<Prisma.ijinUpdateManyMutationInput, Prisma.ijinUncheckedUpdateManyWithoutEmployee_ijin_approvalToemployeeInput>
}

export type ijinScalarWhereInput = {
  AND?: Prisma.ijinScalarWhereInput | Prisma.ijinScalarWhereInput[]
  OR?: Prisma.ijinScalarWhereInput[]
  NOT?: Prisma.ijinScalarWhereInput | Prisma.ijinScalarWhereInput[]
  ijin_id?: Prisma.StringFilter<"ijin"> | string
  ijin_group_id?: Prisma.StringFilter<"ijin"> | string
  payroll?: Prisma.StringNullableFilter<"ijin"> | string | null
  type?: Prisma.StringFilter<"ijin"> | string
  description?: Prisma.StringFilter<"ijin"> | string
  date?: Prisma.DateTimeFilter<"ijin"> | Date | string
  status?: Prisma.Enumijin_statusFilter<"ijin"> | $Enums.ijin_status
  approval?: Prisma.StringNullableFilter<"ijin"> | string | null
  is_delegate?: Prisma.BoolFilter<"ijin"> | boolean
  createdAt?: Prisma.DateTimeFilter<"ijin"> | Date | string
}

export type ijinUpsertWithWhereUniqueWithoutEmployeeInput = {
  where: Prisma.ijinWhereUniqueInput
  update: Prisma.XOR<Prisma.ijinUpdateWithoutEmployeeInput, Prisma.ijinUncheckedUpdateWithoutEmployeeInput>
  create: Prisma.XOR<Prisma.ijinCreateWithoutEmployeeInput, Prisma.ijinUncheckedCreateWithoutEmployeeInput>
}

export type ijinUpdateWithWhereUniqueWithoutEmployeeInput = {
  where: Prisma.ijinWhereUniqueInput
  data: Prisma.XOR<Prisma.ijinUpdateWithoutEmployeeInput, Prisma.ijinUncheckedUpdateWithoutEmployeeInput>
}

export type ijinUpdateManyWithWhereWithoutEmployeeInput = {
  where: Prisma.ijinScalarWhereInput
  data: Prisma.XOR<Prisma.ijinUpdateManyMutationInput, Prisma.ijinUncheckedUpdateManyWithoutEmployeeInput>
}

export type ijinCreateManyEmployee_ijin_approvalToemployeeInput = {
  ijin_id: string
  ijin_group_id: string
  payroll?: string | null
  type: string
  description: string
  date: Date | string
  status: $Enums.ijin_status
  is_delegate: boolean
  createdAt: Date | string
}

export type ijinCreateManyEmployeeInput = {
  ijin_id: string
  ijin_group_id: string
  type: string
  description: string
  date: Date | string
  status: $Enums.ijin_status
  approval?: string | null
  is_delegate: boolean
  createdAt: Date | string
}

export type ijinUpdateWithoutEmployee_ijin_approvalToemployeeInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee?: Prisma.employeeUpdateOneWithoutIjinNestedInput
}

export type ijinUncheckedUpdateWithoutEmployee_ijin_approvalToemployeeInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ijinUncheckedUpdateManyWithoutEmployee_ijin_approvalToemployeeInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ijinUpdateWithoutEmployeeInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_ijin_approvalToemployee?: Prisma.employeeUpdateOneWithoutIjin_ijin_approvalToemployeeNestedInput
}

export type ijinUncheckedUpdateWithoutEmployeeInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  approval?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ijinUncheckedUpdateManyWithoutEmployeeInput = {
  ijin_id?: Prisma.StringFieldUpdateOperationsInput | string
  ijin_group_id?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  date?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumijin_statusFieldUpdateOperationsInput | $Enums.ijin_status
  approval?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  is_delegate?: Prisma.BoolFieldUpdateOperationsInput | boolean
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ijinSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  ijin_id?: boolean
  ijin_group_id?: boolean
  payroll?: boolean
  type?: boolean
  description?: boolean
  date?: boolean
  status?: boolean
  approval?: boolean
  is_delegate?: boolean
  createdAt?: boolean
  employee_ijin_approvalToemployee?: boolean | Prisma.ijin$employee_ijin_approvalToemployeeArgs<ExtArgs>
  employee?: boolean | Prisma.ijin$employeeArgs<ExtArgs>
}, ExtArgs["result"]["ijin"]>



export type ijinSelectScalar = {
  ijin_id?: boolean
  ijin_group_id?: boolean
  payroll?: boolean
  type?: boolean
  description?: boolean
  date?: boolean
  status?: boolean
  approval?: boolean
  is_delegate?: boolean
  createdAt?: boolean
}

export type ijinOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"ijin_id" | "ijin_group_id" | "payroll" | "type" | "description" | "date" | "status" | "approval" | "is_delegate" | "createdAt", ExtArgs["result"]["ijin"]>
export type ijinInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee_ijin_approvalToemployee?: boolean | Prisma.ijin$employee_ijin_approvalToemployeeArgs<ExtArgs>
  employee?: boolean | Prisma.ijin$employeeArgs<ExtArgs>
}

export type $ijinPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ijin"
  objects: {
    employee_ijin_approvalToemployee: Prisma.$employeePayload<ExtArgs> | null
    employee: Prisma.$employeePayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    ijin_id: string
    ijin_group_id: string
    payroll: string | null
    type: string
    description: string
    date: Date
    status: $Enums.ijin_status
    approval: string | null
    is_delegate: boolean
    createdAt: Date
  }, ExtArgs["result"]["ijin"]>
  composites: {}
}

export type ijinGetPayload<S extends boolean | null | undefined | ijinDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ijinPayload, S>

export type ijinCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ijinFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: IjinCountAggregateInputType | true
  }

export interface ijinDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ijin'], meta: { name: 'ijin' } }
  /**
   * Find zero or one Ijin that matches the filter.
   * @param {ijinFindUniqueArgs} args - Arguments to find a Ijin
   * @example
   * // Get one Ijin
   * const ijin = await prisma.ijin.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ijinFindUniqueArgs>(args: Prisma.SelectSubset<T, ijinFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ijinClient<runtime.Types.Result.GetResult<Prisma.$ijinPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Ijin that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ijinFindUniqueOrThrowArgs} args - Arguments to find a Ijin
   * @example
   * // Get one Ijin
   * const ijin = await prisma.ijin.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ijinFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ijinFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ijinClient<runtime.Types.Result.GetResult<Prisma.$ijinPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ijin that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ijinFindFirstArgs} args - Arguments to find a Ijin
   * @example
   * // Get one Ijin
   * const ijin = await prisma.ijin.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ijinFindFirstArgs>(args?: Prisma.SelectSubset<T, ijinFindFirstArgs<ExtArgs>>): Prisma.Prisma__ijinClient<runtime.Types.Result.GetResult<Prisma.$ijinPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Ijin that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ijinFindFirstOrThrowArgs} args - Arguments to find a Ijin
   * @example
   * // Get one Ijin
   * const ijin = await prisma.ijin.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ijinFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ijinFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ijinClient<runtime.Types.Result.GetResult<Prisma.$ijinPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Ijins that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ijinFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Ijins
   * const ijins = await prisma.ijin.findMany()
   * 
   * // Get first 10 Ijins
   * const ijins = await prisma.ijin.findMany({ take: 10 })
   * 
   * // Only select the `ijin_id`
   * const ijinWithIjin_idOnly = await prisma.ijin.findMany({ select: { ijin_id: true } })
   * 
   */
  findMany<T extends ijinFindManyArgs>(args?: Prisma.SelectSubset<T, ijinFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ijinPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Ijin.
   * @param {ijinCreateArgs} args - Arguments to create a Ijin.
   * @example
   * // Create one Ijin
   * const Ijin = await prisma.ijin.create({
   *   data: {
   *     // ... data to create a Ijin
   *   }
   * })
   * 
   */
  create<T extends ijinCreateArgs>(args: Prisma.SelectSubset<T, ijinCreateArgs<ExtArgs>>): Prisma.Prisma__ijinClient<runtime.Types.Result.GetResult<Prisma.$ijinPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Ijins.
   * @param {ijinCreateManyArgs} args - Arguments to create many Ijins.
   * @example
   * // Create many Ijins
   * const ijin = await prisma.ijin.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ijinCreateManyArgs>(args?: Prisma.SelectSubset<T, ijinCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Ijin.
   * @param {ijinDeleteArgs} args - Arguments to delete one Ijin.
   * @example
   * // Delete one Ijin
   * const Ijin = await prisma.ijin.delete({
   *   where: {
   *     // ... filter to delete one Ijin
   *   }
   * })
   * 
   */
  delete<T extends ijinDeleteArgs>(args: Prisma.SelectSubset<T, ijinDeleteArgs<ExtArgs>>): Prisma.Prisma__ijinClient<runtime.Types.Result.GetResult<Prisma.$ijinPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Ijin.
   * @param {ijinUpdateArgs} args - Arguments to update one Ijin.
   * @example
   * // Update one Ijin
   * const ijin = await prisma.ijin.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ijinUpdateArgs>(args: Prisma.SelectSubset<T, ijinUpdateArgs<ExtArgs>>): Prisma.Prisma__ijinClient<runtime.Types.Result.GetResult<Prisma.$ijinPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Ijins.
   * @param {ijinDeleteManyArgs} args - Arguments to filter Ijins to delete.
   * @example
   * // Delete a few Ijins
   * const { count } = await prisma.ijin.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ijinDeleteManyArgs>(args?: Prisma.SelectSubset<T, ijinDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Ijins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ijinUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Ijins
   * const ijin = await prisma.ijin.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ijinUpdateManyArgs>(args: Prisma.SelectSubset<T, ijinUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Ijin.
   * @param {ijinUpsertArgs} args - Arguments to update or create a Ijin.
   * @example
   * // Update or create a Ijin
   * const ijin = await prisma.ijin.upsert({
   *   create: {
   *     // ... data to create a Ijin
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Ijin we want to update
   *   }
   * })
   */
  upsert<T extends ijinUpsertArgs>(args: Prisma.SelectSubset<T, ijinUpsertArgs<ExtArgs>>): Prisma.Prisma__ijinClient<runtime.Types.Result.GetResult<Prisma.$ijinPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Ijins.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ijinCountArgs} args - Arguments to filter Ijins to count.
   * @example
   * // Count the number of Ijins
   * const count = await prisma.ijin.count({
   *   where: {
   *     // ... the filter for the Ijins we want to count
   *   }
   * })
  **/
  count<T extends ijinCountArgs>(
    args?: Prisma.Subset<T, ijinCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], IjinCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Ijin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {IjinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends IjinAggregateArgs>(args: Prisma.Subset<T, IjinAggregateArgs>): Prisma.PrismaPromise<GetIjinAggregateType<T>>

  /**
   * Group by Ijin.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ijinGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ijinGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ijinGroupByArgs['orderBy'] }
      : { orderBy?: ijinGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ijinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIjinGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ijin model
 */
readonly fields: ijinFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ijin.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ijinClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  employee_ijin_approvalToemployee<T extends Prisma.ijin$employee_ijin_approvalToemployeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ijin$employee_ijin_approvalToemployeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  employee<T extends Prisma.ijin$employeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ijin$employeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ijin model
 */
export interface ijinFieldRefs {
  readonly ijin_id: Prisma.FieldRef<"ijin", 'String'>
  readonly ijin_group_id: Prisma.FieldRef<"ijin", 'String'>
  readonly payroll: Prisma.FieldRef<"ijin", 'String'>
  readonly type: Prisma.FieldRef<"ijin", 'String'>
  readonly description: Prisma.FieldRef<"ijin", 'String'>
  readonly date: Prisma.FieldRef<"ijin", 'DateTime'>
  readonly status: Prisma.FieldRef<"ijin", 'ijin_status'>
  readonly approval: Prisma.FieldRef<"ijin", 'String'>
  readonly is_delegate: Prisma.FieldRef<"ijin", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"ijin", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ijin findUnique
 */
export type ijinFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
  /**
   * Filter, which ijin to fetch.
   */
  where: Prisma.ijinWhereUniqueInput
}

/**
 * ijin findUniqueOrThrow
 */
export type ijinFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
  /**
   * Filter, which ijin to fetch.
   */
  where: Prisma.ijinWhereUniqueInput
}

/**
 * ijin findFirst
 */
export type ijinFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
  /**
   * Filter, which ijin to fetch.
   */
  where?: Prisma.ijinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ijins to fetch.
   */
  orderBy?: Prisma.ijinOrderByWithRelationInput | Prisma.ijinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ijins.
   */
  cursor?: Prisma.ijinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ijins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ijins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ijins.
   */
  distinct?: Prisma.IjinScalarFieldEnum | Prisma.IjinScalarFieldEnum[]
}

/**
 * ijin findFirstOrThrow
 */
export type ijinFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
  /**
   * Filter, which ijin to fetch.
   */
  where?: Prisma.ijinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ijins to fetch.
   */
  orderBy?: Prisma.ijinOrderByWithRelationInput | Prisma.ijinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ijins.
   */
  cursor?: Prisma.ijinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ijins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ijins.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ijins.
   */
  distinct?: Prisma.IjinScalarFieldEnum | Prisma.IjinScalarFieldEnum[]
}

/**
 * ijin findMany
 */
export type ijinFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
  /**
   * Filter, which ijins to fetch.
   */
  where?: Prisma.ijinWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ijins to fetch.
   */
  orderBy?: Prisma.ijinOrderByWithRelationInput | Prisma.ijinOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ijins.
   */
  cursor?: Prisma.ijinWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ijins from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ijins.
   */
  skip?: number
  distinct?: Prisma.IjinScalarFieldEnum | Prisma.IjinScalarFieldEnum[]
}

/**
 * ijin create
 */
export type ijinCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
  /**
   * The data needed to create a ijin.
   */
  data: Prisma.XOR<Prisma.ijinCreateInput, Prisma.ijinUncheckedCreateInput>
}

/**
 * ijin createMany
 */
export type ijinCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ijins.
   */
  data: Prisma.ijinCreateManyInput | Prisma.ijinCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ijin update
 */
export type ijinUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
  /**
   * The data needed to update a ijin.
   */
  data: Prisma.XOR<Prisma.ijinUpdateInput, Prisma.ijinUncheckedUpdateInput>
  /**
   * Choose, which ijin to update.
   */
  where: Prisma.ijinWhereUniqueInput
}

/**
 * ijin updateMany
 */
export type ijinUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ijins.
   */
  data: Prisma.XOR<Prisma.ijinUpdateManyMutationInput, Prisma.ijinUncheckedUpdateManyInput>
  /**
   * Filter which ijins to update
   */
  where?: Prisma.ijinWhereInput
  /**
   * Limit how many ijins to update.
   */
  limit?: number
}

/**
 * ijin upsert
 */
export type ijinUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
  /**
   * The filter to search for the ijin to update in case it exists.
   */
  where: Prisma.ijinWhereUniqueInput
  /**
   * In case the ijin found by the `where` argument doesn't exist, create a new ijin with this data.
   */
  create: Prisma.XOR<Prisma.ijinCreateInput, Prisma.ijinUncheckedCreateInput>
  /**
   * In case the ijin was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ijinUpdateInput, Prisma.ijinUncheckedUpdateInput>
}

/**
 * ijin delete
 */
export type ijinDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
  /**
   * Filter which ijin to delete.
   */
  where: Prisma.ijinWhereUniqueInput
}

/**
 * ijin deleteMany
 */
export type ijinDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ijins to delete
   */
  where?: Prisma.ijinWhereInput
  /**
   * Limit how many ijins to delete.
   */
  limit?: number
}

/**
 * ijin.employee_ijin_approvalToemployee
 */
export type ijin$employee_ijin_approvalToemployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * ijin.employee
 */
export type ijin$employeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * ijin without action
 */
export type ijinDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ijin
   */
  select?: Prisma.ijinSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ijin
   */
  omit?: Prisma.ijinOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ijinInclude<ExtArgs> | null
}
