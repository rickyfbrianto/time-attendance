
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `profile` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model profile
 * 
 */
export type profileModel = runtime.Types.Result.DefaultSelection<Prisma.$profilePayload>

export type AggregateProfile = {
  _count: ProfileCountAggregateOutputType | null
  _avg: ProfileAvgAggregateOutputType | null
  _sum: ProfileSumAggregateOutputType | null
  _min: ProfileMinAggregateOutputType | null
  _max: ProfileMaxAggregateOutputType | null
}

export type ProfileAvgAggregateOutputType = {
  level: number | null
}

export type ProfileSumAggregateOutputType = {
  level: number | null
}

export type ProfileMinAggregateOutputType = {
  profile_id: string | null
  name: string | null
  description: string | null
  level: number | null
  user_hrd: boolean | null
  access_sppd: string | null
  access_skpd: string | null
  access_attendance: string | null
  access_spl: string | null
  access_srl: string | null
  access_cuti: string | null
  access_ijin: string | null
  access_calendar: string | null
  access_user: string | null
  access_profile: string | null
  access_dept: string | null
  access_setting: string | null
  status: $Enums.profile_status | null
}

export type ProfileMaxAggregateOutputType = {
  profile_id: string | null
  name: string | null
  description: string | null
  level: number | null
  user_hrd: boolean | null
  access_sppd: string | null
  access_skpd: string | null
  access_attendance: string | null
  access_spl: string | null
  access_srl: string | null
  access_cuti: string | null
  access_ijin: string | null
  access_calendar: string | null
  access_user: string | null
  access_profile: string | null
  access_dept: string | null
  access_setting: string | null
  status: $Enums.profile_status | null
}

export type ProfileCountAggregateOutputType = {
  profile_id: number
  name: number
  description: number
  level: number
  user_hrd: number
  access_sppd: number
  access_skpd: number
  access_attendance: number
  access_spl: number
  access_srl: number
  access_cuti: number
  access_ijin: number
  access_calendar: number
  access_user: number
  access_profile: number
  access_dept: number
  access_setting: number
  status: number
  _all: number
}


export type ProfileAvgAggregateInputType = {
  level?: true
}

export type ProfileSumAggregateInputType = {
  level?: true
}

export type ProfileMinAggregateInputType = {
  profile_id?: true
  name?: true
  description?: true
  level?: true
  user_hrd?: true
  access_sppd?: true
  access_skpd?: true
  access_attendance?: true
  access_spl?: true
  access_srl?: true
  access_cuti?: true
  access_ijin?: true
  access_calendar?: true
  access_user?: true
  access_profile?: true
  access_dept?: true
  access_setting?: true
  status?: true
}

export type ProfileMaxAggregateInputType = {
  profile_id?: true
  name?: true
  description?: true
  level?: true
  user_hrd?: true
  access_sppd?: true
  access_skpd?: true
  access_attendance?: true
  access_spl?: true
  access_srl?: true
  access_cuti?: true
  access_ijin?: true
  access_calendar?: true
  access_user?: true
  access_profile?: true
  access_dept?: true
  access_setting?: true
  status?: true
}

export type ProfileCountAggregateInputType = {
  profile_id?: true
  name?: true
  description?: true
  level?: true
  user_hrd?: true
  access_sppd?: true
  access_skpd?: true
  access_attendance?: true
  access_spl?: true
  access_srl?: true
  access_cuti?: true
  access_ijin?: true
  access_calendar?: true
  access_user?: true
  access_profile?: true
  access_dept?: true
  access_setting?: true
  status?: true
  _all?: true
}

export type ProfileAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which profile to aggregate.
   */
  where?: Prisma.profileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of profiles to fetch.
   */
  orderBy?: Prisma.profileOrderByWithRelationInput | Prisma.profileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.profileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` profiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` profiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned profiles
  **/
  _count?: true | ProfileCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ProfileAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ProfileSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProfileMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProfileMaxAggregateInputType
}

export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
      [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProfile[P]>
    : Prisma.GetScalarType<T[P], AggregateProfile[P]>
}




export type profileGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.profileWhereInput
  orderBy?: Prisma.profileOrderByWithAggregationInput | Prisma.profileOrderByWithAggregationInput[]
  by: Prisma.ProfileScalarFieldEnum[] | Prisma.ProfileScalarFieldEnum
  having?: Prisma.profileScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProfileCountAggregateInputType | true
  _avg?: ProfileAvgAggregateInputType
  _sum?: ProfileSumAggregateInputType
  _min?: ProfileMinAggregateInputType
  _max?: ProfileMaxAggregateInputType
}

export type ProfileGroupByOutputType = {
  profile_id: string
  name: string
  description: string
  level: number
  user_hrd: boolean
  access_sppd: string
  access_skpd: string
  access_attendance: string
  access_spl: string
  access_srl: string
  access_cuti: string
  access_ijin: string
  access_calendar: string
  access_user: string
  access_profile: string
  access_dept: string
  access_setting: string
  status: $Enums.profile_status
  _count: ProfileCountAggregateOutputType | null
  _avg: ProfileAvgAggregateOutputType | null
  _sum: ProfileSumAggregateOutputType | null
  _min: ProfileMinAggregateOutputType | null
  _max: ProfileMaxAggregateOutputType | null
}

type GetProfileGroupByPayload<T extends profileGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProfileGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProfileGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProfileGroupByOutputType[P]>
      }
    >
  > 



export type profileWhereInput = {
  AND?: Prisma.profileWhereInput | Prisma.profileWhereInput[]
  OR?: Prisma.profileWhereInput[]
  NOT?: Prisma.profileWhereInput | Prisma.profileWhereInput[]
  profile_id?: Prisma.StringFilter<"profile"> | string
  name?: Prisma.StringFilter<"profile"> | string
  description?: Prisma.StringFilter<"profile"> | string
  level?: Prisma.IntFilter<"profile"> | number
  user_hrd?: Prisma.BoolFilter<"profile"> | boolean
  access_sppd?: Prisma.StringFilter<"profile"> | string
  access_skpd?: Prisma.StringFilter<"profile"> | string
  access_attendance?: Prisma.StringFilter<"profile"> | string
  access_spl?: Prisma.StringFilter<"profile"> | string
  access_srl?: Prisma.StringFilter<"profile"> | string
  access_cuti?: Prisma.StringFilter<"profile"> | string
  access_ijin?: Prisma.StringFilter<"profile"> | string
  access_calendar?: Prisma.StringFilter<"profile"> | string
  access_user?: Prisma.StringFilter<"profile"> | string
  access_profile?: Prisma.StringFilter<"profile"> | string
  access_dept?: Prisma.StringFilter<"profile"> | string
  access_setting?: Prisma.StringFilter<"profile"> | string
  status?: Prisma.Enumprofile_statusFilter<"profile"> | $Enums.profile_status
  employee?: Prisma.EmployeeListRelationFilter
}

export type profileOrderByWithRelationInput = {
  profile_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  level?: Prisma.SortOrder
  user_hrd?: Prisma.SortOrder
  access_sppd?: Prisma.SortOrder
  access_skpd?: Prisma.SortOrder
  access_attendance?: Prisma.SortOrder
  access_spl?: Prisma.SortOrder
  access_srl?: Prisma.SortOrder
  access_cuti?: Prisma.SortOrder
  access_ijin?: Prisma.SortOrder
  access_calendar?: Prisma.SortOrder
  access_user?: Prisma.SortOrder
  access_profile?: Prisma.SortOrder
  access_dept?: Prisma.SortOrder
  access_setting?: Prisma.SortOrder
  status?: Prisma.SortOrder
  employee?: Prisma.employeeOrderByRelationAggregateInput
  _relevance?: Prisma.profileOrderByRelevanceInput
}

export type profileWhereUniqueInput = Prisma.AtLeast<{
  profile_id?: string
  AND?: Prisma.profileWhereInput | Prisma.profileWhereInput[]
  OR?: Prisma.profileWhereInput[]
  NOT?: Prisma.profileWhereInput | Prisma.profileWhereInput[]
  name?: Prisma.StringFilter<"profile"> | string
  description?: Prisma.StringFilter<"profile"> | string
  level?: Prisma.IntFilter<"profile"> | number
  user_hrd?: Prisma.BoolFilter<"profile"> | boolean
  access_sppd?: Prisma.StringFilter<"profile"> | string
  access_skpd?: Prisma.StringFilter<"profile"> | string
  access_attendance?: Prisma.StringFilter<"profile"> | string
  access_spl?: Prisma.StringFilter<"profile"> | string
  access_srl?: Prisma.StringFilter<"profile"> | string
  access_cuti?: Prisma.StringFilter<"profile"> | string
  access_ijin?: Prisma.StringFilter<"profile"> | string
  access_calendar?: Prisma.StringFilter<"profile"> | string
  access_user?: Prisma.StringFilter<"profile"> | string
  access_profile?: Prisma.StringFilter<"profile"> | string
  access_dept?: Prisma.StringFilter<"profile"> | string
  access_setting?: Prisma.StringFilter<"profile"> | string
  status?: Prisma.Enumprofile_statusFilter<"profile"> | $Enums.profile_status
  employee?: Prisma.EmployeeListRelationFilter
}, "profile_id">

export type profileOrderByWithAggregationInput = {
  profile_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  level?: Prisma.SortOrder
  user_hrd?: Prisma.SortOrder
  access_sppd?: Prisma.SortOrder
  access_skpd?: Prisma.SortOrder
  access_attendance?: Prisma.SortOrder
  access_spl?: Prisma.SortOrder
  access_srl?: Prisma.SortOrder
  access_cuti?: Prisma.SortOrder
  access_ijin?: Prisma.SortOrder
  access_calendar?: Prisma.SortOrder
  access_user?: Prisma.SortOrder
  access_profile?: Prisma.SortOrder
  access_dept?: Prisma.SortOrder
  access_setting?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.profileCountOrderByAggregateInput
  _avg?: Prisma.profileAvgOrderByAggregateInput
  _max?: Prisma.profileMaxOrderByAggregateInput
  _min?: Prisma.profileMinOrderByAggregateInput
  _sum?: Prisma.profileSumOrderByAggregateInput
}

export type profileScalarWhereWithAggregatesInput = {
  AND?: Prisma.profileScalarWhereWithAggregatesInput | Prisma.profileScalarWhereWithAggregatesInput[]
  OR?: Prisma.profileScalarWhereWithAggregatesInput[]
  NOT?: Prisma.profileScalarWhereWithAggregatesInput | Prisma.profileScalarWhereWithAggregatesInput[]
  profile_id?: Prisma.StringWithAggregatesFilter<"profile"> | string
  name?: Prisma.StringWithAggregatesFilter<"profile"> | string
  description?: Prisma.StringWithAggregatesFilter<"profile"> | string
  level?: Prisma.IntWithAggregatesFilter<"profile"> | number
  user_hrd?: Prisma.BoolWithAggregatesFilter<"profile"> | boolean
  access_sppd?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_skpd?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_attendance?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_spl?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_srl?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_cuti?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_ijin?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_calendar?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_user?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_profile?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_dept?: Prisma.StringWithAggregatesFilter<"profile"> | string
  access_setting?: Prisma.StringWithAggregatesFilter<"profile"> | string
  status?: Prisma.Enumprofile_statusWithAggregatesFilter<"profile"> | $Enums.profile_status
}

export type profileCreateInput = {
  profile_id: string
  name: string
  description: string
  level: number
  user_hrd: boolean
  access_sppd: string
  access_skpd: string
  access_attendance: string
  access_spl: string
  access_srl: string
  access_cuti: string
  access_ijin: string
  access_calendar: string
  access_user: string
  access_profile: string
  access_dept: string
  access_setting: string
  status: $Enums.profile_status
  employee?: Prisma.employeeCreateNestedManyWithoutProfileInput
}

export type profileUncheckedCreateInput = {
  profile_id: string
  name: string
  description: string
  level: number
  user_hrd: boolean
  access_sppd: string
  access_skpd: string
  access_attendance: string
  access_spl: string
  access_srl: string
  access_cuti: string
  access_ijin: string
  access_calendar: string
  access_user: string
  access_profile: string
  access_dept: string
  access_setting: string
  status: $Enums.profile_status
  employee?: Prisma.employeeUncheckedCreateNestedManyWithoutProfileInput
}

export type profileUpdateInput = {
  profile_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  user_hrd?: Prisma.BoolFieldUpdateOperationsInput | boolean
  access_sppd?: Prisma.StringFieldUpdateOperationsInput | string
  access_skpd?: Prisma.StringFieldUpdateOperationsInput | string
  access_attendance?: Prisma.StringFieldUpdateOperationsInput | string
  access_spl?: Prisma.StringFieldUpdateOperationsInput | string
  access_srl?: Prisma.StringFieldUpdateOperationsInput | string
  access_cuti?: Prisma.StringFieldUpdateOperationsInput | string
  access_ijin?: Prisma.StringFieldUpdateOperationsInput | string
  access_calendar?: Prisma.StringFieldUpdateOperationsInput | string
  access_user?: Prisma.StringFieldUpdateOperationsInput | string
  access_profile?: Prisma.StringFieldUpdateOperationsInput | string
  access_dept?: Prisma.StringFieldUpdateOperationsInput | string
  access_setting?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumprofile_statusFieldUpdateOperationsInput | $Enums.profile_status
  employee?: Prisma.employeeUpdateManyWithoutProfileNestedInput
}

export type profileUncheckedUpdateInput = {
  profile_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  user_hrd?: Prisma.BoolFieldUpdateOperationsInput | boolean
  access_sppd?: Prisma.StringFieldUpdateOperationsInput | string
  access_skpd?: Prisma.StringFieldUpdateOperationsInput | string
  access_attendance?: Prisma.StringFieldUpdateOperationsInput | string
  access_spl?: Prisma.StringFieldUpdateOperationsInput | string
  access_srl?: Prisma.StringFieldUpdateOperationsInput | string
  access_cuti?: Prisma.StringFieldUpdateOperationsInput | string
  access_ijin?: Prisma.StringFieldUpdateOperationsInput | string
  access_calendar?: Prisma.StringFieldUpdateOperationsInput | string
  access_user?: Prisma.StringFieldUpdateOperationsInput | string
  access_profile?: Prisma.StringFieldUpdateOperationsInput | string
  access_dept?: Prisma.StringFieldUpdateOperationsInput | string
  access_setting?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumprofile_statusFieldUpdateOperationsInput | $Enums.profile_status
  employee?: Prisma.employeeUncheckedUpdateManyWithoutProfileNestedInput
}

export type profileCreateManyInput = {
  profile_id: string
  name: string
  description: string
  level: number
  user_hrd: boolean
  access_sppd: string
  access_skpd: string
  access_attendance: string
  access_spl: string
  access_srl: string
  access_cuti: string
  access_ijin: string
  access_calendar: string
  access_user: string
  access_profile: string
  access_dept: string
  access_setting: string
  status: $Enums.profile_status
}

export type profileUpdateManyMutationInput = {
  profile_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  user_hrd?: Prisma.BoolFieldUpdateOperationsInput | boolean
  access_sppd?: Prisma.StringFieldUpdateOperationsInput | string
  access_skpd?: Prisma.StringFieldUpdateOperationsInput | string
  access_attendance?: Prisma.StringFieldUpdateOperationsInput | string
  access_spl?: Prisma.StringFieldUpdateOperationsInput | string
  access_srl?: Prisma.StringFieldUpdateOperationsInput | string
  access_cuti?: Prisma.StringFieldUpdateOperationsInput | string
  access_ijin?: Prisma.StringFieldUpdateOperationsInput | string
  access_calendar?: Prisma.StringFieldUpdateOperationsInput | string
  access_user?: Prisma.StringFieldUpdateOperationsInput | string
  access_profile?: Prisma.StringFieldUpdateOperationsInput | string
  access_dept?: Prisma.StringFieldUpdateOperationsInput | string
  access_setting?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumprofile_statusFieldUpdateOperationsInput | $Enums.profile_status
}

export type profileUncheckedUpdateManyInput = {
  profile_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  user_hrd?: Prisma.BoolFieldUpdateOperationsInput | boolean
  access_sppd?: Prisma.StringFieldUpdateOperationsInput | string
  access_skpd?: Prisma.StringFieldUpdateOperationsInput | string
  access_attendance?: Prisma.StringFieldUpdateOperationsInput | string
  access_spl?: Prisma.StringFieldUpdateOperationsInput | string
  access_srl?: Prisma.StringFieldUpdateOperationsInput | string
  access_cuti?: Prisma.StringFieldUpdateOperationsInput | string
  access_ijin?: Prisma.StringFieldUpdateOperationsInput | string
  access_calendar?: Prisma.StringFieldUpdateOperationsInput | string
  access_user?: Prisma.StringFieldUpdateOperationsInput | string
  access_profile?: Prisma.StringFieldUpdateOperationsInput | string
  access_dept?: Prisma.StringFieldUpdateOperationsInput | string
  access_setting?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumprofile_statusFieldUpdateOperationsInput | $Enums.profile_status
}

export type ProfileNullableScalarRelationFilter = {
  is?: Prisma.profileWhereInput | null
  isNot?: Prisma.profileWhereInput | null
}

export type profileOrderByRelevanceInput = {
  fields: Prisma.profileOrderByRelevanceFieldEnum | Prisma.profileOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type profileCountOrderByAggregateInput = {
  profile_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  level?: Prisma.SortOrder
  user_hrd?: Prisma.SortOrder
  access_sppd?: Prisma.SortOrder
  access_skpd?: Prisma.SortOrder
  access_attendance?: Prisma.SortOrder
  access_spl?: Prisma.SortOrder
  access_srl?: Prisma.SortOrder
  access_cuti?: Prisma.SortOrder
  access_ijin?: Prisma.SortOrder
  access_calendar?: Prisma.SortOrder
  access_user?: Prisma.SortOrder
  access_profile?: Prisma.SortOrder
  access_dept?: Prisma.SortOrder
  access_setting?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type profileAvgOrderByAggregateInput = {
  level?: Prisma.SortOrder
}

export type profileMaxOrderByAggregateInput = {
  profile_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  level?: Prisma.SortOrder
  user_hrd?: Prisma.SortOrder
  access_sppd?: Prisma.SortOrder
  access_skpd?: Prisma.SortOrder
  access_attendance?: Prisma.SortOrder
  access_spl?: Prisma.SortOrder
  access_srl?: Prisma.SortOrder
  access_cuti?: Prisma.SortOrder
  access_ijin?: Prisma.SortOrder
  access_calendar?: Prisma.SortOrder
  access_user?: Prisma.SortOrder
  access_profile?: Prisma.SortOrder
  access_dept?: Prisma.SortOrder
  access_setting?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type profileMinOrderByAggregateInput = {
  profile_id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  level?: Prisma.SortOrder
  user_hrd?: Prisma.SortOrder
  access_sppd?: Prisma.SortOrder
  access_skpd?: Prisma.SortOrder
  access_attendance?: Prisma.SortOrder
  access_spl?: Prisma.SortOrder
  access_srl?: Prisma.SortOrder
  access_cuti?: Prisma.SortOrder
  access_ijin?: Prisma.SortOrder
  access_calendar?: Prisma.SortOrder
  access_user?: Prisma.SortOrder
  access_profile?: Prisma.SortOrder
  access_dept?: Prisma.SortOrder
  access_setting?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type profileSumOrderByAggregateInput = {
  level?: Prisma.SortOrder
}

export type profileCreateNestedOneWithoutEmployeeInput = {
  create?: Prisma.XOR<Prisma.profileCreateWithoutEmployeeInput, Prisma.profileUncheckedCreateWithoutEmployeeInput>
  connectOrCreate?: Prisma.profileCreateOrConnectWithoutEmployeeInput
  connect?: Prisma.profileWhereUniqueInput
}

export type profileUpdateOneWithoutEmployeeNestedInput = {
  create?: Prisma.XOR<Prisma.profileCreateWithoutEmployeeInput, Prisma.profileUncheckedCreateWithoutEmployeeInput>
  connectOrCreate?: Prisma.profileCreateOrConnectWithoutEmployeeInput
  upsert?: Prisma.profileUpsertWithoutEmployeeInput
  disconnect?: Prisma.profileWhereInput | boolean
  delete?: Prisma.profileWhereInput | boolean
  connect?: Prisma.profileWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.profileUpdateToOneWithWhereWithoutEmployeeInput, Prisma.profileUpdateWithoutEmployeeInput>, Prisma.profileUncheckedUpdateWithoutEmployeeInput>
}

export type Enumprofile_statusFieldUpdateOperationsInput = {
  set?: $Enums.profile_status
}

export type profileCreateWithoutEmployeeInput = {
  profile_id: string
  name: string
  description: string
  level: number
  user_hrd: boolean
  access_sppd: string
  access_skpd: string
  access_attendance: string
  access_spl: string
  access_srl: string
  access_cuti: string
  access_ijin: string
  access_calendar: string
  access_user: string
  access_profile: string
  access_dept: string
  access_setting: string
  status: $Enums.profile_status
}

export type profileUncheckedCreateWithoutEmployeeInput = {
  profile_id: string
  name: string
  description: string
  level: number
  user_hrd: boolean
  access_sppd: string
  access_skpd: string
  access_attendance: string
  access_spl: string
  access_srl: string
  access_cuti: string
  access_ijin: string
  access_calendar: string
  access_user: string
  access_profile: string
  access_dept: string
  access_setting: string
  status: $Enums.profile_status
}

export type profileCreateOrConnectWithoutEmployeeInput = {
  where: Prisma.profileWhereUniqueInput
  create: Prisma.XOR<Prisma.profileCreateWithoutEmployeeInput, Prisma.profileUncheckedCreateWithoutEmployeeInput>
}

export type profileUpsertWithoutEmployeeInput = {
  update: Prisma.XOR<Prisma.profileUpdateWithoutEmployeeInput, Prisma.profileUncheckedUpdateWithoutEmployeeInput>
  create: Prisma.XOR<Prisma.profileCreateWithoutEmployeeInput, Prisma.profileUncheckedCreateWithoutEmployeeInput>
  where?: Prisma.profileWhereInput
}

export type profileUpdateToOneWithWhereWithoutEmployeeInput = {
  where?: Prisma.profileWhereInput
  data: Prisma.XOR<Prisma.profileUpdateWithoutEmployeeInput, Prisma.profileUncheckedUpdateWithoutEmployeeInput>
}

export type profileUpdateWithoutEmployeeInput = {
  profile_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  user_hrd?: Prisma.BoolFieldUpdateOperationsInput | boolean
  access_sppd?: Prisma.StringFieldUpdateOperationsInput | string
  access_skpd?: Prisma.StringFieldUpdateOperationsInput | string
  access_attendance?: Prisma.StringFieldUpdateOperationsInput | string
  access_spl?: Prisma.StringFieldUpdateOperationsInput | string
  access_srl?: Prisma.StringFieldUpdateOperationsInput | string
  access_cuti?: Prisma.StringFieldUpdateOperationsInput | string
  access_ijin?: Prisma.StringFieldUpdateOperationsInput | string
  access_calendar?: Prisma.StringFieldUpdateOperationsInput | string
  access_user?: Prisma.StringFieldUpdateOperationsInput | string
  access_profile?: Prisma.StringFieldUpdateOperationsInput | string
  access_dept?: Prisma.StringFieldUpdateOperationsInput | string
  access_setting?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumprofile_statusFieldUpdateOperationsInput | $Enums.profile_status
}

export type profileUncheckedUpdateWithoutEmployeeInput = {
  profile_id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  level?: Prisma.IntFieldUpdateOperationsInput | number
  user_hrd?: Prisma.BoolFieldUpdateOperationsInput | boolean
  access_sppd?: Prisma.StringFieldUpdateOperationsInput | string
  access_skpd?: Prisma.StringFieldUpdateOperationsInput | string
  access_attendance?: Prisma.StringFieldUpdateOperationsInput | string
  access_spl?: Prisma.StringFieldUpdateOperationsInput | string
  access_srl?: Prisma.StringFieldUpdateOperationsInput | string
  access_cuti?: Prisma.StringFieldUpdateOperationsInput | string
  access_ijin?: Prisma.StringFieldUpdateOperationsInput | string
  access_calendar?: Prisma.StringFieldUpdateOperationsInput | string
  access_user?: Prisma.StringFieldUpdateOperationsInput | string
  access_profile?: Prisma.StringFieldUpdateOperationsInput | string
  access_dept?: Prisma.StringFieldUpdateOperationsInput | string
  access_setting?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.Enumprofile_statusFieldUpdateOperationsInput | $Enums.profile_status
}


/**
 * Count Type ProfileCountOutputType
 */

export type ProfileCountOutputType = {
  employee: number
}

export type ProfileCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee?: boolean | ProfileCountOutputTypeCountEmployeeArgs
}

/**
 * ProfileCountOutputType without action
 */
export type ProfileCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProfileCountOutputType
   */
  select?: Prisma.ProfileCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProfileCountOutputType without action
 */
export type ProfileCountOutputTypeCountEmployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.employeeWhereInput
}


export type profileSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  profile_id?: boolean
  name?: boolean
  description?: boolean
  level?: boolean
  user_hrd?: boolean
  access_sppd?: boolean
  access_skpd?: boolean
  access_attendance?: boolean
  access_spl?: boolean
  access_srl?: boolean
  access_cuti?: boolean
  access_ijin?: boolean
  access_calendar?: boolean
  access_user?: boolean
  access_profile?: boolean
  access_dept?: boolean
  access_setting?: boolean
  status?: boolean
  employee?: boolean | Prisma.profile$employeeArgs<ExtArgs>
  _count?: boolean | Prisma.ProfileCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["profile"]>



export type profileSelectScalar = {
  profile_id?: boolean
  name?: boolean
  description?: boolean
  level?: boolean
  user_hrd?: boolean
  access_sppd?: boolean
  access_skpd?: boolean
  access_attendance?: boolean
  access_spl?: boolean
  access_srl?: boolean
  access_cuti?: boolean
  access_ijin?: boolean
  access_calendar?: boolean
  access_user?: boolean
  access_profile?: boolean
  access_dept?: boolean
  access_setting?: boolean
  status?: boolean
}

export type profileOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"profile_id" | "name" | "description" | "level" | "user_hrd" | "access_sppd" | "access_skpd" | "access_attendance" | "access_spl" | "access_srl" | "access_cuti" | "access_ijin" | "access_calendar" | "access_user" | "access_profile" | "access_dept" | "access_setting" | "status", ExtArgs["result"]["profile"]>
export type profileInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee?: boolean | Prisma.profile$employeeArgs<ExtArgs>
  _count?: boolean | Prisma.ProfileCountOutputTypeDefaultArgs<ExtArgs>
}

export type $profilePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "profile"
  objects: {
    employee: Prisma.$employeePayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    profile_id: string
    name: string
    description: string
    level: number
    user_hrd: boolean
    access_sppd: string
    access_skpd: string
    access_attendance: string
    access_spl: string
    access_srl: string
    access_cuti: string
    access_ijin: string
    access_calendar: string
    access_user: string
    access_profile: string
    access_dept: string
    access_setting: string
    status: $Enums.profile_status
  }, ExtArgs["result"]["profile"]>
  composites: {}
}

export type profileGetPayload<S extends boolean | null | undefined | profileDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$profilePayload, S>

export type profileCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<profileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProfileCountAggregateInputType | true
  }

export interface profileDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['profile'], meta: { name: 'profile' } }
  /**
   * Find zero or one Profile that matches the filter.
   * @param {profileFindUniqueArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends profileFindUniqueArgs>(args: Prisma.SelectSubset<T, profileFindUniqueArgs<ExtArgs>>): Prisma.Prisma__profileClient<runtime.Types.Result.GetResult<Prisma.$profilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {profileFindUniqueOrThrowArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends profileFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, profileFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__profileClient<runtime.Types.Result.GetResult<Prisma.$profilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Profile that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {profileFindFirstArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends profileFindFirstArgs>(args?: Prisma.SelectSubset<T, profileFindFirstArgs<ExtArgs>>): Prisma.Prisma__profileClient<runtime.Types.Result.GetResult<Prisma.$profilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Profile that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {profileFindFirstOrThrowArgs} args - Arguments to find a Profile
   * @example
   * // Get one Profile
   * const profile = await prisma.profile.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends profileFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, profileFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__profileClient<runtime.Types.Result.GetResult<Prisma.$profilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Profiles that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {profileFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Profiles
   * const profiles = await prisma.profile.findMany()
   * 
   * // Get first 10 Profiles
   * const profiles = await prisma.profile.findMany({ take: 10 })
   * 
   * // Only select the `profile_id`
   * const profileWithProfile_idOnly = await prisma.profile.findMany({ select: { profile_id: true } })
   * 
   */
  findMany<T extends profileFindManyArgs>(args?: Prisma.SelectSubset<T, profileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$profilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Profile.
   * @param {profileCreateArgs} args - Arguments to create a Profile.
   * @example
   * // Create one Profile
   * const Profile = await prisma.profile.create({
   *   data: {
   *     // ... data to create a Profile
   *   }
   * })
   * 
   */
  create<T extends profileCreateArgs>(args: Prisma.SelectSubset<T, profileCreateArgs<ExtArgs>>): Prisma.Prisma__profileClient<runtime.Types.Result.GetResult<Prisma.$profilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Profiles.
   * @param {profileCreateManyArgs} args - Arguments to create many Profiles.
   * @example
   * // Create many Profiles
   * const profile = await prisma.profile.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends profileCreateManyArgs>(args?: Prisma.SelectSubset<T, profileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Profile.
   * @param {profileDeleteArgs} args - Arguments to delete one Profile.
   * @example
   * // Delete one Profile
   * const Profile = await prisma.profile.delete({
   *   where: {
   *     // ... filter to delete one Profile
   *   }
   * })
   * 
   */
  delete<T extends profileDeleteArgs>(args: Prisma.SelectSubset<T, profileDeleteArgs<ExtArgs>>): Prisma.Prisma__profileClient<runtime.Types.Result.GetResult<Prisma.$profilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Profile.
   * @param {profileUpdateArgs} args - Arguments to update one Profile.
   * @example
   * // Update one Profile
   * const profile = await prisma.profile.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends profileUpdateArgs>(args: Prisma.SelectSubset<T, profileUpdateArgs<ExtArgs>>): Prisma.Prisma__profileClient<runtime.Types.Result.GetResult<Prisma.$profilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Profiles.
   * @param {profileDeleteManyArgs} args - Arguments to filter Profiles to delete.
   * @example
   * // Delete a few Profiles
   * const { count } = await prisma.profile.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends profileDeleteManyArgs>(args?: Prisma.SelectSubset<T, profileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Profiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {profileUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Profiles
   * const profile = await prisma.profile.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends profileUpdateManyArgs>(args: Prisma.SelectSubset<T, profileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Profile.
   * @param {profileUpsertArgs} args - Arguments to update or create a Profile.
   * @example
   * // Update or create a Profile
   * const profile = await prisma.profile.upsert({
   *   create: {
   *     // ... data to create a Profile
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Profile we want to update
   *   }
   * })
   */
  upsert<T extends profileUpsertArgs>(args: Prisma.SelectSubset<T, profileUpsertArgs<ExtArgs>>): Prisma.Prisma__profileClient<runtime.Types.Result.GetResult<Prisma.$profilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Profiles.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {profileCountArgs} args - Arguments to filter Profiles to count.
   * @example
   * // Count the number of Profiles
   * const count = await prisma.profile.count({
   *   where: {
   *     // ... the filter for the Profiles we want to count
   *   }
   * })
  **/
  count<T extends profileCountArgs>(
    args?: Prisma.Subset<T, profileCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProfileCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Profile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProfileAggregateArgs>(args: Prisma.Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

  /**
   * Group by Profile.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {profileGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends profileGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: profileGroupByArgs['orderBy'] }
      : { orderBy?: profileGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, profileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the profile model
 */
readonly fields: profileFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for profile.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__profileClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  employee<T extends Prisma.profile$employeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.profile$employeeArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the profile model
 */
export interface profileFieldRefs {
  readonly profile_id: Prisma.FieldRef<"profile", 'String'>
  readonly name: Prisma.FieldRef<"profile", 'String'>
  readonly description: Prisma.FieldRef<"profile", 'String'>
  readonly level: Prisma.FieldRef<"profile", 'Int'>
  readonly user_hrd: Prisma.FieldRef<"profile", 'Boolean'>
  readonly access_sppd: Prisma.FieldRef<"profile", 'String'>
  readonly access_skpd: Prisma.FieldRef<"profile", 'String'>
  readonly access_attendance: Prisma.FieldRef<"profile", 'String'>
  readonly access_spl: Prisma.FieldRef<"profile", 'String'>
  readonly access_srl: Prisma.FieldRef<"profile", 'String'>
  readonly access_cuti: Prisma.FieldRef<"profile", 'String'>
  readonly access_ijin: Prisma.FieldRef<"profile", 'String'>
  readonly access_calendar: Prisma.FieldRef<"profile", 'String'>
  readonly access_user: Prisma.FieldRef<"profile", 'String'>
  readonly access_profile: Prisma.FieldRef<"profile", 'String'>
  readonly access_dept: Prisma.FieldRef<"profile", 'String'>
  readonly access_setting: Prisma.FieldRef<"profile", 'String'>
  readonly status: Prisma.FieldRef<"profile", 'profile_status'>
}
    

// Custom InputTypes
/**
 * profile findUnique
 */
export type profileFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
  /**
   * Filter, which profile to fetch.
   */
  where: Prisma.profileWhereUniqueInput
}

/**
 * profile findUniqueOrThrow
 */
export type profileFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
  /**
   * Filter, which profile to fetch.
   */
  where: Prisma.profileWhereUniqueInput
}

/**
 * profile findFirst
 */
export type profileFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
  /**
   * Filter, which profile to fetch.
   */
  where?: Prisma.profileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of profiles to fetch.
   */
  orderBy?: Prisma.profileOrderByWithRelationInput | Prisma.profileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for profiles.
   */
  cursor?: Prisma.profileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` profiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` profiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of profiles.
   */
  distinct?: Prisma.ProfileScalarFieldEnum | Prisma.ProfileScalarFieldEnum[]
}

/**
 * profile findFirstOrThrow
 */
export type profileFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
  /**
   * Filter, which profile to fetch.
   */
  where?: Prisma.profileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of profiles to fetch.
   */
  orderBy?: Prisma.profileOrderByWithRelationInput | Prisma.profileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for profiles.
   */
  cursor?: Prisma.profileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` profiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` profiles.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of profiles.
   */
  distinct?: Prisma.ProfileScalarFieldEnum | Prisma.ProfileScalarFieldEnum[]
}

/**
 * profile findMany
 */
export type profileFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
  /**
   * Filter, which profiles to fetch.
   */
  where?: Prisma.profileWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of profiles to fetch.
   */
  orderBy?: Prisma.profileOrderByWithRelationInput | Prisma.profileOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing profiles.
   */
  cursor?: Prisma.profileWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` profiles from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` profiles.
   */
  skip?: number
  distinct?: Prisma.ProfileScalarFieldEnum | Prisma.ProfileScalarFieldEnum[]
}

/**
 * profile create
 */
export type profileCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
  /**
   * The data needed to create a profile.
   */
  data: Prisma.XOR<Prisma.profileCreateInput, Prisma.profileUncheckedCreateInput>
}

/**
 * profile createMany
 */
export type profileCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many profiles.
   */
  data: Prisma.profileCreateManyInput | Prisma.profileCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * profile update
 */
export type profileUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
  /**
   * The data needed to update a profile.
   */
  data: Prisma.XOR<Prisma.profileUpdateInput, Prisma.profileUncheckedUpdateInput>
  /**
   * Choose, which profile to update.
   */
  where: Prisma.profileWhereUniqueInput
}

/**
 * profile updateMany
 */
export type profileUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update profiles.
   */
  data: Prisma.XOR<Prisma.profileUpdateManyMutationInput, Prisma.profileUncheckedUpdateManyInput>
  /**
   * Filter which profiles to update
   */
  where?: Prisma.profileWhereInput
  /**
   * Limit how many profiles to update.
   */
  limit?: number
}

/**
 * profile upsert
 */
export type profileUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
  /**
   * The filter to search for the profile to update in case it exists.
   */
  where: Prisma.profileWhereUniqueInput
  /**
   * In case the profile found by the `where` argument doesn't exist, create a new profile with this data.
   */
  create: Prisma.XOR<Prisma.profileCreateInput, Prisma.profileUncheckedCreateInput>
  /**
   * In case the profile was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.profileUpdateInput, Prisma.profileUncheckedUpdateInput>
}

/**
 * profile delete
 */
export type profileDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
  /**
   * Filter which profile to delete.
   */
  where: Prisma.profileWhereUniqueInput
}

/**
 * profile deleteMany
 */
export type profileDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which profiles to delete
   */
  where?: Prisma.profileWhereInput
  /**
   * Limit how many profiles to delete.
   */
  limit?: number
}

/**
 * profile.employee
 */
export type profile$employeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
  orderBy?: Prisma.employeeOrderByWithRelationInput | Prisma.employeeOrderByWithRelationInput[]
  cursor?: Prisma.employeeWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EmployeeScalarFieldEnum | Prisma.EmployeeScalarFieldEnum[]
}

/**
 * profile without action
 */
export type profileDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the profile
   */
  select?: Prisma.profileSelect<ExtArgs> | null
  /**
   * Omit specific fields from the profile
   */
  omit?: Prisma.profileOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.profileInclude<ExtArgs> | null
}
