
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `skpd` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model skpd
 * 
 */
export type skpdModel = runtime.Types.Result.DefaultSelection<Prisma.$skpdPayload>

export type AggregateSkpd = {
  _count: SkpdCountAggregateOutputType | null
  _min: SkpdMinAggregateOutputType | null
  _max: SkpdMaxAggregateOutputType | null
}

export type SkpdMinAggregateOutputType = {
  skpd_id: string | null
  sppd_id: string | null
  payroll: string | null
  real_start: Date | null
  real_end: Date | null
  status: $Enums.skpd_status | null
  createdBy: string | null
  createdAt: Date | null
}

export type SkpdMaxAggregateOutputType = {
  skpd_id: string | null
  sppd_id: string | null
  payroll: string | null
  real_start: Date | null
  real_end: Date | null
  status: $Enums.skpd_status | null
  createdBy: string | null
  createdAt: Date | null
}

export type SkpdCountAggregateOutputType = {
  skpd_id: number
  sppd_id: number
  payroll: number
  real_start: number
  real_end: number
  status: number
  createdBy: number
  createdAt: number
  _all: number
}


export type SkpdMinAggregateInputType = {
  skpd_id?: true
  sppd_id?: true
  payroll?: true
  real_start?: true
  real_end?: true
  status?: true
  createdBy?: true
  createdAt?: true
}

export type SkpdMaxAggregateInputType = {
  skpd_id?: true
  sppd_id?: true
  payroll?: true
  real_start?: true
  real_end?: true
  status?: true
  createdBy?: true
  createdAt?: true
}

export type SkpdCountAggregateInputType = {
  skpd_id?: true
  sppd_id?: true
  payroll?: true
  real_start?: true
  real_end?: true
  status?: true
  createdBy?: true
  createdAt?: true
  _all?: true
}

export type SkpdAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which skpd to aggregate.
   */
  where?: Prisma.skpdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of skpds to fetch.
   */
  orderBy?: Prisma.skpdOrderByWithRelationInput | Prisma.skpdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.skpdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` skpds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` skpds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned skpds
  **/
  _count?: true | SkpdCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SkpdMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SkpdMaxAggregateInputType
}

export type GetSkpdAggregateType<T extends SkpdAggregateArgs> = {
      [P in keyof T & keyof AggregateSkpd]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSkpd[P]>
    : Prisma.GetScalarType<T[P], AggregateSkpd[P]>
}




export type skpdGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.skpdWhereInput
  orderBy?: Prisma.skpdOrderByWithAggregationInput | Prisma.skpdOrderByWithAggregationInput[]
  by: Prisma.SkpdScalarFieldEnum[] | Prisma.SkpdScalarFieldEnum
  having?: Prisma.skpdScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SkpdCountAggregateInputType | true
  _min?: SkpdMinAggregateInputType
  _max?: SkpdMaxAggregateInputType
}

export type SkpdGroupByOutputType = {
  skpd_id: string
  sppd_id: string | null
  payroll: string | null
  real_start: Date
  real_end: Date
  status: $Enums.skpd_status
  createdBy: string | null
  createdAt: Date
  _count: SkpdCountAggregateOutputType | null
  _min: SkpdMinAggregateOutputType | null
  _max: SkpdMaxAggregateOutputType | null
}

type GetSkpdGroupByPayload<T extends skpdGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SkpdGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SkpdGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SkpdGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SkpdGroupByOutputType[P]>
      }
    >
  > 



export type skpdWhereInput = {
  AND?: Prisma.skpdWhereInput | Prisma.skpdWhereInput[]
  OR?: Prisma.skpdWhereInput[]
  NOT?: Prisma.skpdWhereInput | Prisma.skpdWhereInput[]
  skpd_id?: Prisma.StringFilter<"skpd"> | string
  sppd_id?: Prisma.StringNullableFilter<"skpd"> | string | null
  payroll?: Prisma.StringNullableFilter<"skpd"> | string | null
  real_start?: Prisma.DateTimeFilter<"skpd"> | Date | string
  real_end?: Prisma.DateTimeFilter<"skpd"> | Date | string
  status?: Prisma.Enumskpd_statusFilter<"skpd"> | $Enums.skpd_status
  createdBy?: Prisma.StringNullableFilter<"skpd"> | string | null
  createdAt?: Prisma.DateTimeFilter<"skpd"> | Date | string
  employee_skpd_createdByToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee_skpd_payrollToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  sppd?: Prisma.XOR<Prisma.SppdNullableScalarRelationFilter, Prisma.sppdWhereInput> | null
}

export type skpdOrderByWithRelationInput = {
  skpd_id?: Prisma.SortOrder
  sppd_id?: Prisma.SortOrderInput | Prisma.SortOrder
  payroll?: Prisma.SortOrderInput | Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  employee_skpd_createdByToemployee?: Prisma.employeeOrderByWithRelationInput
  employee_skpd_payrollToemployee?: Prisma.employeeOrderByWithRelationInput
  sppd?: Prisma.sppdOrderByWithRelationInput
  _relevance?: Prisma.skpdOrderByRelevanceInput
}

export type skpdWhereUniqueInput = Prisma.AtLeast<{
  skpd_id?: string
  AND?: Prisma.skpdWhereInput | Prisma.skpdWhereInput[]
  OR?: Prisma.skpdWhereInput[]
  NOT?: Prisma.skpdWhereInput | Prisma.skpdWhereInput[]
  sppd_id?: Prisma.StringNullableFilter<"skpd"> | string | null
  payroll?: Prisma.StringNullableFilter<"skpd"> | string | null
  real_start?: Prisma.DateTimeFilter<"skpd"> | Date | string
  real_end?: Prisma.DateTimeFilter<"skpd"> | Date | string
  status?: Prisma.Enumskpd_statusFilter<"skpd"> | $Enums.skpd_status
  createdBy?: Prisma.StringNullableFilter<"skpd"> | string | null
  createdAt?: Prisma.DateTimeFilter<"skpd"> | Date | string
  employee_skpd_createdByToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee_skpd_payrollToemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  sppd?: Prisma.XOR<Prisma.SppdNullableScalarRelationFilter, Prisma.sppdWhereInput> | null
}, "skpd_id">

export type skpdOrderByWithAggregationInput = {
  skpd_id?: Prisma.SortOrder
  sppd_id?: Prisma.SortOrderInput | Prisma.SortOrder
  payroll?: Prisma.SortOrderInput | Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.skpdCountOrderByAggregateInput
  _max?: Prisma.skpdMaxOrderByAggregateInput
  _min?: Prisma.skpdMinOrderByAggregateInput
}

export type skpdScalarWhereWithAggregatesInput = {
  AND?: Prisma.skpdScalarWhereWithAggregatesInput | Prisma.skpdScalarWhereWithAggregatesInput[]
  OR?: Prisma.skpdScalarWhereWithAggregatesInput[]
  NOT?: Prisma.skpdScalarWhereWithAggregatesInput | Prisma.skpdScalarWhereWithAggregatesInput[]
  skpd_id?: Prisma.StringWithAggregatesFilter<"skpd"> | string
  sppd_id?: Prisma.StringNullableWithAggregatesFilter<"skpd"> | string | null
  payroll?: Prisma.StringNullableWithAggregatesFilter<"skpd"> | string | null
  real_start?: Prisma.DateTimeWithAggregatesFilter<"skpd"> | Date | string
  real_end?: Prisma.DateTimeWithAggregatesFilter<"skpd"> | Date | string
  status?: Prisma.Enumskpd_statusWithAggregatesFilter<"skpd"> | $Enums.skpd_status
  createdBy?: Prisma.StringNullableWithAggregatesFilter<"skpd"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"skpd"> | Date | string
}

export type skpdCreateInput = {
  skpd_id?: string
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdAt: Date | string
  employee_skpd_createdByToemployee?: Prisma.employeeCreateNestedOneWithoutSkpd_skpd_createdByToemployeeInput
  employee_skpd_payrollToemployee?: Prisma.employeeCreateNestedOneWithoutSkpd_skpd_payrollToemployeeInput
  sppd?: Prisma.sppdCreateNestedOneWithoutSkpdInput
}

export type skpdUncheckedCreateInput = {
  skpd_id?: string
  sppd_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdBy?: string | null
  createdAt: Date | string
}

export type skpdUpdateInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_skpd_createdByToemployee?: Prisma.employeeUpdateOneWithoutSkpd_skpd_createdByToemployeeNestedInput
  employee_skpd_payrollToemployee?: Prisma.employeeUpdateOneWithoutSkpd_skpd_payrollToemployeeNestedInput
  sppd?: Prisma.sppdUpdateOneWithoutSkpdNestedInput
}

export type skpdUncheckedUpdateInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  sppd_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type skpdCreateManyInput = {
  skpd_id?: string
  sppd_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdBy?: string | null
  createdAt: Date | string
}

export type skpdUpdateManyMutationInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type skpdUncheckedUpdateManyInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  sppd_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SkpdListRelationFilter = {
  every?: Prisma.skpdWhereInput
  some?: Prisma.skpdWhereInput
  none?: Prisma.skpdWhereInput
}

export type skpdOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type skpdOrderByRelevanceInput = {
  fields: Prisma.skpdOrderByRelevanceFieldEnum | Prisma.skpdOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type skpdCountOrderByAggregateInput = {
  skpd_id?: Prisma.SortOrder
  sppd_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type skpdMaxOrderByAggregateInput = {
  skpd_id?: Prisma.SortOrder
  sppd_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type skpdMinOrderByAggregateInput = {
  skpd_id?: Prisma.SortOrder
  sppd_id?: Prisma.SortOrder
  payroll?: Prisma.SortOrder
  real_start?: Prisma.SortOrder
  real_end?: Prisma.SortOrder
  status?: Prisma.SortOrder
  createdBy?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type skpdCreateNestedManyWithoutEmployee_skpd_createdByToemployeeInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput> | Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput[] | Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdCreateOrConnectWithoutEmployee_skpd_createdByToemployeeInput[]
  createMany?: Prisma.skpdCreateManyEmployee_skpd_createdByToemployeeInputEnvelope
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
}

export type skpdCreateNestedManyWithoutEmployee_skpd_payrollToemployeeInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput> | Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput[] | Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdCreateOrConnectWithoutEmployee_skpd_payrollToemployeeInput[]
  createMany?: Prisma.skpdCreateManyEmployee_skpd_payrollToemployeeInputEnvelope
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
}

export type skpdUncheckedCreateNestedManyWithoutEmployee_skpd_createdByToemployeeInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput> | Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput[] | Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdCreateOrConnectWithoutEmployee_skpd_createdByToemployeeInput[]
  createMany?: Prisma.skpdCreateManyEmployee_skpd_createdByToemployeeInputEnvelope
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
}

export type skpdUncheckedCreateNestedManyWithoutEmployee_skpd_payrollToemployeeInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput> | Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput[] | Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdCreateOrConnectWithoutEmployee_skpd_payrollToemployeeInput[]
  createMany?: Prisma.skpdCreateManyEmployee_skpd_payrollToemployeeInputEnvelope
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
}

export type skpdUpdateManyWithoutEmployee_skpd_createdByToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput> | Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput[] | Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdCreateOrConnectWithoutEmployee_skpd_createdByToemployeeInput[]
  upsert?: Prisma.skpdUpsertWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdUpsertWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput[]
  createMany?: Prisma.skpdCreateManyEmployee_skpd_createdByToemployeeInputEnvelope
  set?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  disconnect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  delete?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  update?: Prisma.skpdUpdateWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdUpdateWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput[]
  updateMany?: Prisma.skpdUpdateManyWithWhereWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdUpdateManyWithWhereWithoutEmployee_skpd_createdByToemployeeInput[]
  deleteMany?: Prisma.skpdScalarWhereInput | Prisma.skpdScalarWhereInput[]
}

export type skpdUpdateManyWithoutEmployee_skpd_payrollToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput> | Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput[] | Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdCreateOrConnectWithoutEmployee_skpd_payrollToemployeeInput[]
  upsert?: Prisma.skpdUpsertWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdUpsertWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput[]
  createMany?: Prisma.skpdCreateManyEmployee_skpd_payrollToemployeeInputEnvelope
  set?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  disconnect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  delete?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  update?: Prisma.skpdUpdateWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdUpdateWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput[]
  updateMany?: Prisma.skpdUpdateManyWithWhereWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdUpdateManyWithWhereWithoutEmployee_skpd_payrollToemployeeInput[]
  deleteMany?: Prisma.skpdScalarWhereInput | Prisma.skpdScalarWhereInput[]
}

export type skpdUncheckedUpdateManyWithoutEmployee_skpd_createdByToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput> | Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput[] | Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdCreateOrConnectWithoutEmployee_skpd_createdByToemployeeInput[]
  upsert?: Prisma.skpdUpsertWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdUpsertWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput[]
  createMany?: Prisma.skpdCreateManyEmployee_skpd_createdByToemployeeInputEnvelope
  set?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  disconnect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  delete?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  update?: Prisma.skpdUpdateWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdUpdateWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput[]
  updateMany?: Prisma.skpdUpdateManyWithWhereWithoutEmployee_skpd_createdByToemployeeInput | Prisma.skpdUpdateManyWithWhereWithoutEmployee_skpd_createdByToemployeeInput[]
  deleteMany?: Prisma.skpdScalarWhereInput | Prisma.skpdScalarWhereInput[]
}

export type skpdUncheckedUpdateManyWithoutEmployee_skpd_payrollToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput> | Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput[] | Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdCreateOrConnectWithoutEmployee_skpd_payrollToemployeeInput[]
  upsert?: Prisma.skpdUpsertWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdUpsertWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput[]
  createMany?: Prisma.skpdCreateManyEmployee_skpd_payrollToemployeeInputEnvelope
  set?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  disconnect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  delete?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  update?: Prisma.skpdUpdateWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdUpdateWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput[]
  updateMany?: Prisma.skpdUpdateManyWithWhereWithoutEmployee_skpd_payrollToemployeeInput | Prisma.skpdUpdateManyWithWhereWithoutEmployee_skpd_payrollToemployeeInput[]
  deleteMany?: Prisma.skpdScalarWhereInput | Prisma.skpdScalarWhereInput[]
}

export type skpdCreateNestedManyWithoutSppdInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutSppdInput, Prisma.skpdUncheckedCreateWithoutSppdInput> | Prisma.skpdCreateWithoutSppdInput[] | Prisma.skpdUncheckedCreateWithoutSppdInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutSppdInput | Prisma.skpdCreateOrConnectWithoutSppdInput[]
  createMany?: Prisma.skpdCreateManySppdInputEnvelope
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
}

export type skpdUncheckedCreateNestedManyWithoutSppdInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutSppdInput, Prisma.skpdUncheckedCreateWithoutSppdInput> | Prisma.skpdCreateWithoutSppdInput[] | Prisma.skpdUncheckedCreateWithoutSppdInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutSppdInput | Prisma.skpdCreateOrConnectWithoutSppdInput[]
  createMany?: Prisma.skpdCreateManySppdInputEnvelope
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
}

export type skpdUpdateManyWithoutSppdNestedInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutSppdInput, Prisma.skpdUncheckedCreateWithoutSppdInput> | Prisma.skpdCreateWithoutSppdInput[] | Prisma.skpdUncheckedCreateWithoutSppdInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutSppdInput | Prisma.skpdCreateOrConnectWithoutSppdInput[]
  upsert?: Prisma.skpdUpsertWithWhereUniqueWithoutSppdInput | Prisma.skpdUpsertWithWhereUniqueWithoutSppdInput[]
  createMany?: Prisma.skpdCreateManySppdInputEnvelope
  set?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  disconnect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  delete?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  update?: Prisma.skpdUpdateWithWhereUniqueWithoutSppdInput | Prisma.skpdUpdateWithWhereUniqueWithoutSppdInput[]
  updateMany?: Prisma.skpdUpdateManyWithWhereWithoutSppdInput | Prisma.skpdUpdateManyWithWhereWithoutSppdInput[]
  deleteMany?: Prisma.skpdScalarWhereInput | Prisma.skpdScalarWhereInput[]
}

export type skpdUncheckedUpdateManyWithoutSppdNestedInput = {
  create?: Prisma.XOR<Prisma.skpdCreateWithoutSppdInput, Prisma.skpdUncheckedCreateWithoutSppdInput> | Prisma.skpdCreateWithoutSppdInput[] | Prisma.skpdUncheckedCreateWithoutSppdInput[]
  connectOrCreate?: Prisma.skpdCreateOrConnectWithoutSppdInput | Prisma.skpdCreateOrConnectWithoutSppdInput[]
  upsert?: Prisma.skpdUpsertWithWhereUniqueWithoutSppdInput | Prisma.skpdUpsertWithWhereUniqueWithoutSppdInput[]
  createMany?: Prisma.skpdCreateManySppdInputEnvelope
  set?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  disconnect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  delete?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  connect?: Prisma.skpdWhereUniqueInput | Prisma.skpdWhereUniqueInput[]
  update?: Prisma.skpdUpdateWithWhereUniqueWithoutSppdInput | Prisma.skpdUpdateWithWhereUniqueWithoutSppdInput[]
  updateMany?: Prisma.skpdUpdateManyWithWhereWithoutSppdInput | Prisma.skpdUpdateManyWithWhereWithoutSppdInput[]
  deleteMany?: Prisma.skpdScalarWhereInput | Prisma.skpdScalarWhereInput[]
}

export type Enumskpd_statusFieldUpdateOperationsInput = {
  set?: $Enums.skpd_status
}

export type skpdCreateWithoutEmployee_skpd_createdByToemployeeInput = {
  skpd_id?: string
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdAt: Date | string
  employee_skpd_payrollToemployee?: Prisma.employeeCreateNestedOneWithoutSkpd_skpd_payrollToemployeeInput
  sppd?: Prisma.sppdCreateNestedOneWithoutSkpdInput
}

export type skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput = {
  skpd_id?: string
  sppd_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdAt: Date | string
}

export type skpdCreateOrConnectWithoutEmployee_skpd_createdByToemployeeInput = {
  where: Prisma.skpdWhereUniqueInput
  create: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput>
}

export type skpdCreateManyEmployee_skpd_createdByToemployeeInputEnvelope = {
  data: Prisma.skpdCreateManyEmployee_skpd_createdByToemployeeInput | Prisma.skpdCreateManyEmployee_skpd_createdByToemployeeInput[]
  skipDuplicates?: boolean
}

export type skpdCreateWithoutEmployee_skpd_payrollToemployeeInput = {
  skpd_id?: string
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdAt: Date | string
  employee_skpd_createdByToemployee?: Prisma.employeeCreateNestedOneWithoutSkpd_skpd_createdByToemployeeInput
  sppd?: Prisma.sppdCreateNestedOneWithoutSkpdInput
}

export type skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput = {
  skpd_id?: string
  sppd_id?: string | null
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdBy?: string | null
  createdAt: Date | string
}

export type skpdCreateOrConnectWithoutEmployee_skpd_payrollToemployeeInput = {
  where: Prisma.skpdWhereUniqueInput
  create: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput>
}

export type skpdCreateManyEmployee_skpd_payrollToemployeeInputEnvelope = {
  data: Prisma.skpdCreateManyEmployee_skpd_payrollToemployeeInput | Prisma.skpdCreateManyEmployee_skpd_payrollToemployeeInput[]
  skipDuplicates?: boolean
}

export type skpdUpsertWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput = {
  where: Prisma.skpdWhereUniqueInput
  update: Prisma.XOR<Prisma.skpdUpdateWithoutEmployee_skpd_createdByToemployeeInput, Prisma.skpdUncheckedUpdateWithoutEmployee_skpd_createdByToemployeeInput>
  create: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_createdByToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_createdByToemployeeInput>
}

export type skpdUpdateWithWhereUniqueWithoutEmployee_skpd_createdByToemployeeInput = {
  where: Prisma.skpdWhereUniqueInput
  data: Prisma.XOR<Prisma.skpdUpdateWithoutEmployee_skpd_createdByToemployeeInput, Prisma.skpdUncheckedUpdateWithoutEmployee_skpd_createdByToemployeeInput>
}

export type skpdUpdateManyWithWhereWithoutEmployee_skpd_createdByToemployeeInput = {
  where: Prisma.skpdScalarWhereInput
  data: Prisma.XOR<Prisma.skpdUpdateManyMutationInput, Prisma.skpdUncheckedUpdateManyWithoutEmployee_skpd_createdByToemployeeInput>
}

export type skpdScalarWhereInput = {
  AND?: Prisma.skpdScalarWhereInput | Prisma.skpdScalarWhereInput[]
  OR?: Prisma.skpdScalarWhereInput[]
  NOT?: Prisma.skpdScalarWhereInput | Prisma.skpdScalarWhereInput[]
  skpd_id?: Prisma.StringFilter<"skpd"> | string
  sppd_id?: Prisma.StringNullableFilter<"skpd"> | string | null
  payroll?: Prisma.StringNullableFilter<"skpd"> | string | null
  real_start?: Prisma.DateTimeFilter<"skpd"> | Date | string
  real_end?: Prisma.DateTimeFilter<"skpd"> | Date | string
  status?: Prisma.Enumskpd_statusFilter<"skpd"> | $Enums.skpd_status
  createdBy?: Prisma.StringNullableFilter<"skpd"> | string | null
  createdAt?: Prisma.DateTimeFilter<"skpd"> | Date | string
}

export type skpdUpsertWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput = {
  where: Prisma.skpdWhereUniqueInput
  update: Prisma.XOR<Prisma.skpdUpdateWithoutEmployee_skpd_payrollToemployeeInput, Prisma.skpdUncheckedUpdateWithoutEmployee_skpd_payrollToemployeeInput>
  create: Prisma.XOR<Prisma.skpdCreateWithoutEmployee_skpd_payrollToemployeeInput, Prisma.skpdUncheckedCreateWithoutEmployee_skpd_payrollToemployeeInput>
}

export type skpdUpdateWithWhereUniqueWithoutEmployee_skpd_payrollToemployeeInput = {
  where: Prisma.skpdWhereUniqueInput
  data: Prisma.XOR<Prisma.skpdUpdateWithoutEmployee_skpd_payrollToemployeeInput, Prisma.skpdUncheckedUpdateWithoutEmployee_skpd_payrollToemployeeInput>
}

export type skpdUpdateManyWithWhereWithoutEmployee_skpd_payrollToemployeeInput = {
  where: Prisma.skpdScalarWhereInput
  data: Prisma.XOR<Prisma.skpdUpdateManyMutationInput, Prisma.skpdUncheckedUpdateManyWithoutEmployee_skpd_payrollToemployeeInput>
}

export type skpdCreateWithoutSppdInput = {
  skpd_id?: string
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdAt: Date | string
  employee_skpd_createdByToemployee?: Prisma.employeeCreateNestedOneWithoutSkpd_skpd_createdByToemployeeInput
  employee_skpd_payrollToemployee?: Prisma.employeeCreateNestedOneWithoutSkpd_skpd_payrollToemployeeInput
}

export type skpdUncheckedCreateWithoutSppdInput = {
  skpd_id?: string
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdBy?: string | null
  createdAt: Date | string
}

export type skpdCreateOrConnectWithoutSppdInput = {
  where: Prisma.skpdWhereUniqueInput
  create: Prisma.XOR<Prisma.skpdCreateWithoutSppdInput, Prisma.skpdUncheckedCreateWithoutSppdInput>
}

export type skpdCreateManySppdInputEnvelope = {
  data: Prisma.skpdCreateManySppdInput | Prisma.skpdCreateManySppdInput[]
  skipDuplicates?: boolean
}

export type skpdUpsertWithWhereUniqueWithoutSppdInput = {
  where: Prisma.skpdWhereUniqueInput
  update: Prisma.XOR<Prisma.skpdUpdateWithoutSppdInput, Prisma.skpdUncheckedUpdateWithoutSppdInput>
  create: Prisma.XOR<Prisma.skpdCreateWithoutSppdInput, Prisma.skpdUncheckedCreateWithoutSppdInput>
}

export type skpdUpdateWithWhereUniqueWithoutSppdInput = {
  where: Prisma.skpdWhereUniqueInput
  data: Prisma.XOR<Prisma.skpdUpdateWithoutSppdInput, Prisma.skpdUncheckedUpdateWithoutSppdInput>
}

export type skpdUpdateManyWithWhereWithoutSppdInput = {
  where: Prisma.skpdScalarWhereInput
  data: Prisma.XOR<Prisma.skpdUpdateManyMutationInput, Prisma.skpdUncheckedUpdateManyWithoutSppdInput>
}

export type skpdCreateManyEmployee_skpd_createdByToemployeeInput = {
  skpd_id?: string
  sppd_id?: string | null
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdAt: Date | string
}

export type skpdCreateManyEmployee_skpd_payrollToemployeeInput = {
  skpd_id?: string
  sppd_id?: string | null
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdBy?: string | null
  createdAt: Date | string
}

export type skpdUpdateWithoutEmployee_skpd_createdByToemployeeInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_skpd_payrollToemployee?: Prisma.employeeUpdateOneWithoutSkpd_skpd_payrollToemployeeNestedInput
  sppd?: Prisma.sppdUpdateOneWithoutSkpdNestedInput
}

export type skpdUncheckedUpdateWithoutEmployee_skpd_createdByToemployeeInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  sppd_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type skpdUncheckedUpdateManyWithoutEmployee_skpd_createdByToemployeeInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  sppd_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type skpdUpdateWithoutEmployee_skpd_payrollToemployeeInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_skpd_createdByToemployee?: Prisma.employeeUpdateOneWithoutSkpd_skpd_createdByToemployeeNestedInput
  sppd?: Prisma.sppdUpdateOneWithoutSkpdNestedInput
}

export type skpdUncheckedUpdateWithoutEmployee_skpd_payrollToemployeeInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  sppd_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type skpdUncheckedUpdateManyWithoutEmployee_skpd_payrollToemployeeInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  sppd_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type skpdCreateManySppdInput = {
  skpd_id?: string
  payroll?: string | null
  real_start: Date | string
  real_end: Date | string
  status: $Enums.skpd_status
  createdBy?: string | null
  createdAt: Date | string
}

export type skpdUpdateWithoutSppdInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_skpd_createdByToemployee?: Prisma.employeeUpdateOneWithoutSkpd_skpd_createdByToemployeeNestedInput
  employee_skpd_payrollToemployee?: Prisma.employeeUpdateOneWithoutSkpd_skpd_payrollToemployeeNestedInput
}

export type skpdUncheckedUpdateWithoutSppdInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type skpdUncheckedUpdateManyWithoutSppdInput = {
  skpd_id?: Prisma.StringFieldUpdateOperationsInput | string
  payroll?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  real_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  real_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status?: Prisma.Enumskpd_statusFieldUpdateOperationsInput | $Enums.skpd_status
  createdBy?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type skpdSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  skpd_id?: boolean
  sppd_id?: boolean
  payroll?: boolean
  real_start?: boolean
  real_end?: boolean
  status?: boolean
  createdBy?: boolean
  createdAt?: boolean
  employee_skpd_createdByToemployee?: boolean | Prisma.skpd$employee_skpd_createdByToemployeeArgs<ExtArgs>
  employee_skpd_payrollToemployee?: boolean | Prisma.skpd$employee_skpd_payrollToemployeeArgs<ExtArgs>
  sppd?: boolean | Prisma.skpd$sppdArgs<ExtArgs>
}, ExtArgs["result"]["skpd"]>



export type skpdSelectScalar = {
  skpd_id?: boolean
  sppd_id?: boolean
  payroll?: boolean
  real_start?: boolean
  real_end?: boolean
  status?: boolean
  createdBy?: boolean
  createdAt?: boolean
}

export type skpdOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"skpd_id" | "sppd_id" | "payroll" | "real_start" | "real_end" | "status" | "createdBy" | "createdAt", ExtArgs["result"]["skpd"]>
export type skpdInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee_skpd_createdByToemployee?: boolean | Prisma.skpd$employee_skpd_createdByToemployeeArgs<ExtArgs>
  employee_skpd_payrollToemployee?: boolean | Prisma.skpd$employee_skpd_payrollToemployeeArgs<ExtArgs>
  sppd?: boolean | Prisma.skpd$sppdArgs<ExtArgs>
}

export type $skpdPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "skpd"
  objects: {
    employee_skpd_createdByToemployee: Prisma.$employeePayload<ExtArgs> | null
    employee_skpd_payrollToemployee: Prisma.$employeePayload<ExtArgs> | null
    sppd: Prisma.$sppdPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    skpd_id: string
    sppd_id: string | null
    payroll: string | null
    real_start: Date
    real_end: Date
    status: $Enums.skpd_status
    createdBy: string | null
    createdAt: Date
  }, ExtArgs["result"]["skpd"]>
  composites: {}
}

export type skpdGetPayload<S extends boolean | null | undefined | skpdDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$skpdPayload, S>

export type skpdCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<skpdFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SkpdCountAggregateInputType | true
  }

export interface skpdDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['skpd'], meta: { name: 'skpd' } }
  /**
   * Find zero or one Skpd that matches the filter.
   * @param {skpdFindUniqueArgs} args - Arguments to find a Skpd
   * @example
   * // Get one Skpd
   * const skpd = await prisma.skpd.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends skpdFindUniqueArgs>(args: Prisma.SelectSubset<T, skpdFindUniqueArgs<ExtArgs>>): Prisma.Prisma__skpdClient<runtime.Types.Result.GetResult<Prisma.$skpdPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Skpd that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {skpdFindUniqueOrThrowArgs} args - Arguments to find a Skpd
   * @example
   * // Get one Skpd
   * const skpd = await prisma.skpd.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends skpdFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, skpdFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__skpdClient<runtime.Types.Result.GetResult<Prisma.$skpdPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Skpd that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {skpdFindFirstArgs} args - Arguments to find a Skpd
   * @example
   * // Get one Skpd
   * const skpd = await prisma.skpd.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends skpdFindFirstArgs>(args?: Prisma.SelectSubset<T, skpdFindFirstArgs<ExtArgs>>): Prisma.Prisma__skpdClient<runtime.Types.Result.GetResult<Prisma.$skpdPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Skpd that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {skpdFindFirstOrThrowArgs} args - Arguments to find a Skpd
   * @example
   * // Get one Skpd
   * const skpd = await prisma.skpd.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends skpdFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, skpdFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__skpdClient<runtime.Types.Result.GetResult<Prisma.$skpdPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Skpds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {skpdFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Skpds
   * const skpds = await prisma.skpd.findMany()
   * 
   * // Get first 10 Skpds
   * const skpds = await prisma.skpd.findMany({ take: 10 })
   * 
   * // Only select the `skpd_id`
   * const skpdWithSkpd_idOnly = await prisma.skpd.findMany({ select: { skpd_id: true } })
   * 
   */
  findMany<T extends skpdFindManyArgs>(args?: Prisma.SelectSubset<T, skpdFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$skpdPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Skpd.
   * @param {skpdCreateArgs} args - Arguments to create a Skpd.
   * @example
   * // Create one Skpd
   * const Skpd = await prisma.skpd.create({
   *   data: {
   *     // ... data to create a Skpd
   *   }
   * })
   * 
   */
  create<T extends skpdCreateArgs>(args: Prisma.SelectSubset<T, skpdCreateArgs<ExtArgs>>): Prisma.Prisma__skpdClient<runtime.Types.Result.GetResult<Prisma.$skpdPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Skpds.
   * @param {skpdCreateManyArgs} args - Arguments to create many Skpds.
   * @example
   * // Create many Skpds
   * const skpd = await prisma.skpd.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends skpdCreateManyArgs>(args?: Prisma.SelectSubset<T, skpdCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Skpd.
   * @param {skpdDeleteArgs} args - Arguments to delete one Skpd.
   * @example
   * // Delete one Skpd
   * const Skpd = await prisma.skpd.delete({
   *   where: {
   *     // ... filter to delete one Skpd
   *   }
   * })
   * 
   */
  delete<T extends skpdDeleteArgs>(args: Prisma.SelectSubset<T, skpdDeleteArgs<ExtArgs>>): Prisma.Prisma__skpdClient<runtime.Types.Result.GetResult<Prisma.$skpdPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Skpd.
   * @param {skpdUpdateArgs} args - Arguments to update one Skpd.
   * @example
   * // Update one Skpd
   * const skpd = await prisma.skpd.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends skpdUpdateArgs>(args: Prisma.SelectSubset<T, skpdUpdateArgs<ExtArgs>>): Prisma.Prisma__skpdClient<runtime.Types.Result.GetResult<Prisma.$skpdPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Skpds.
   * @param {skpdDeleteManyArgs} args - Arguments to filter Skpds to delete.
   * @example
   * // Delete a few Skpds
   * const { count } = await prisma.skpd.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends skpdDeleteManyArgs>(args?: Prisma.SelectSubset<T, skpdDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Skpds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {skpdUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Skpds
   * const skpd = await prisma.skpd.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends skpdUpdateManyArgs>(args: Prisma.SelectSubset<T, skpdUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Skpd.
   * @param {skpdUpsertArgs} args - Arguments to update or create a Skpd.
   * @example
   * // Update or create a Skpd
   * const skpd = await prisma.skpd.upsert({
   *   create: {
   *     // ... data to create a Skpd
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Skpd we want to update
   *   }
   * })
   */
  upsert<T extends skpdUpsertArgs>(args: Prisma.SelectSubset<T, skpdUpsertArgs<ExtArgs>>): Prisma.Prisma__skpdClient<runtime.Types.Result.GetResult<Prisma.$skpdPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Skpds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {skpdCountArgs} args - Arguments to filter Skpds to count.
   * @example
   * // Count the number of Skpds
   * const count = await prisma.skpd.count({
   *   where: {
   *     // ... the filter for the Skpds we want to count
   *   }
   * })
  **/
  count<T extends skpdCountArgs>(
    args?: Prisma.Subset<T, skpdCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SkpdCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Skpd.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SkpdAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SkpdAggregateArgs>(args: Prisma.Subset<T, SkpdAggregateArgs>): Prisma.PrismaPromise<GetSkpdAggregateType<T>>

  /**
   * Group by Skpd.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {skpdGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends skpdGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: skpdGroupByArgs['orderBy'] }
      : { orderBy?: skpdGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, skpdGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkpdGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the skpd model
 */
readonly fields: skpdFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for skpd.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__skpdClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  employee_skpd_createdByToemployee<T extends Prisma.skpd$employee_skpd_createdByToemployeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.skpd$employee_skpd_createdByToemployeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  employee_skpd_payrollToemployee<T extends Prisma.skpd$employee_skpd_payrollToemployeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.skpd$employee_skpd_payrollToemployeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  sppd<T extends Prisma.skpd$sppdArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.skpd$sppdArgs<ExtArgs>>): Prisma.Prisma__sppdClient<runtime.Types.Result.GetResult<Prisma.$sppdPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the skpd model
 */
export interface skpdFieldRefs {
  readonly skpd_id: Prisma.FieldRef<"skpd", 'String'>
  readonly sppd_id: Prisma.FieldRef<"skpd", 'String'>
  readonly payroll: Prisma.FieldRef<"skpd", 'String'>
  readonly real_start: Prisma.FieldRef<"skpd", 'DateTime'>
  readonly real_end: Prisma.FieldRef<"skpd", 'DateTime'>
  readonly status: Prisma.FieldRef<"skpd", 'skpd_status'>
  readonly createdBy: Prisma.FieldRef<"skpd", 'String'>
  readonly createdAt: Prisma.FieldRef<"skpd", 'DateTime'>
}
    

// Custom InputTypes
/**
 * skpd findUnique
 */
export type skpdFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
  /**
   * Filter, which skpd to fetch.
   */
  where: Prisma.skpdWhereUniqueInput
}

/**
 * skpd findUniqueOrThrow
 */
export type skpdFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
  /**
   * Filter, which skpd to fetch.
   */
  where: Prisma.skpdWhereUniqueInput
}

/**
 * skpd findFirst
 */
export type skpdFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
  /**
   * Filter, which skpd to fetch.
   */
  where?: Prisma.skpdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of skpds to fetch.
   */
  orderBy?: Prisma.skpdOrderByWithRelationInput | Prisma.skpdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for skpds.
   */
  cursor?: Prisma.skpdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` skpds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` skpds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of skpds.
   */
  distinct?: Prisma.SkpdScalarFieldEnum | Prisma.SkpdScalarFieldEnum[]
}

/**
 * skpd findFirstOrThrow
 */
export type skpdFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
  /**
   * Filter, which skpd to fetch.
   */
  where?: Prisma.skpdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of skpds to fetch.
   */
  orderBy?: Prisma.skpdOrderByWithRelationInput | Prisma.skpdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for skpds.
   */
  cursor?: Prisma.skpdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` skpds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` skpds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of skpds.
   */
  distinct?: Prisma.SkpdScalarFieldEnum | Prisma.SkpdScalarFieldEnum[]
}

/**
 * skpd findMany
 */
export type skpdFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
  /**
   * Filter, which skpds to fetch.
   */
  where?: Prisma.skpdWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of skpds to fetch.
   */
  orderBy?: Prisma.skpdOrderByWithRelationInput | Prisma.skpdOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing skpds.
   */
  cursor?: Prisma.skpdWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` skpds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` skpds.
   */
  skip?: number
  distinct?: Prisma.SkpdScalarFieldEnum | Prisma.SkpdScalarFieldEnum[]
}

/**
 * skpd create
 */
export type skpdCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
  /**
   * The data needed to create a skpd.
   */
  data: Prisma.XOR<Prisma.skpdCreateInput, Prisma.skpdUncheckedCreateInput>
}

/**
 * skpd createMany
 */
export type skpdCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many skpds.
   */
  data: Prisma.skpdCreateManyInput | Prisma.skpdCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * skpd update
 */
export type skpdUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
  /**
   * The data needed to update a skpd.
   */
  data: Prisma.XOR<Prisma.skpdUpdateInput, Prisma.skpdUncheckedUpdateInput>
  /**
   * Choose, which skpd to update.
   */
  where: Prisma.skpdWhereUniqueInput
}

/**
 * skpd updateMany
 */
export type skpdUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update skpds.
   */
  data: Prisma.XOR<Prisma.skpdUpdateManyMutationInput, Prisma.skpdUncheckedUpdateManyInput>
  /**
   * Filter which skpds to update
   */
  where?: Prisma.skpdWhereInput
  /**
   * Limit how many skpds to update.
   */
  limit?: number
}

/**
 * skpd upsert
 */
export type skpdUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
  /**
   * The filter to search for the skpd to update in case it exists.
   */
  where: Prisma.skpdWhereUniqueInput
  /**
   * In case the skpd found by the `where` argument doesn't exist, create a new skpd with this data.
   */
  create: Prisma.XOR<Prisma.skpdCreateInput, Prisma.skpdUncheckedCreateInput>
  /**
   * In case the skpd was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.skpdUpdateInput, Prisma.skpdUncheckedUpdateInput>
}

/**
 * skpd delete
 */
export type skpdDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
  /**
   * Filter which skpd to delete.
   */
  where: Prisma.skpdWhereUniqueInput
}

/**
 * skpd deleteMany
 */
export type skpdDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which skpds to delete
   */
  where?: Prisma.skpdWhereInput
  /**
   * Limit how many skpds to delete.
   */
  limit?: number
}

/**
 * skpd.employee_skpd_createdByToemployee
 */
export type skpd$employee_skpd_createdByToemployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * skpd.employee_skpd_payrollToemployee
 */
export type skpd$employee_skpd_payrollToemployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * skpd.sppd
 */
export type skpd$sppdArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the sppd
   */
  select?: Prisma.sppdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the sppd
   */
  omit?: Prisma.sppdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.sppdInclude<ExtArgs> | null
  where?: Prisma.sppdWhereInput
}

/**
 * skpd without action
 */
export type skpdDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the skpd
   */
  select?: Prisma.skpdSelect<ExtArgs> | null
  /**
   * Omit specific fields from the skpd
   */
  omit?: Prisma.skpdOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.skpdInclude<ExtArgs> | null
}
