
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `srl_detail` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model srl_detail
 * 
 */
export type srl_detailModel = runtime.Types.Result.DefaultSelection<Prisma.$srl_detailPayload>

export type AggregateSrl_detail = {
  _count: Srl_detailCountAggregateOutputType | null
  _min: Srl_detailMinAggregateOutputType | null
  _max: Srl_detailMaxAggregateOutputType | null
}

export type Srl_detailMinAggregateOutputType = {
  srl_detail_id: string | null
  srl_id: string | null
  description: string | null
  status: string | null
}

export type Srl_detailMaxAggregateOutputType = {
  srl_detail_id: string | null
  srl_id: string | null
  description: string | null
  status: string | null
}

export type Srl_detailCountAggregateOutputType = {
  srl_detail_id: number
  srl_id: number
  description: number
  status: number
  _all: number
}


export type Srl_detailMinAggregateInputType = {
  srl_detail_id?: true
  srl_id?: true
  description?: true
  status?: true
}

export type Srl_detailMaxAggregateInputType = {
  srl_detail_id?: true
  srl_id?: true
  description?: true
  status?: true
}

export type Srl_detailCountAggregateInputType = {
  srl_detail_id?: true
  srl_id?: true
  description?: true
  status?: true
  _all?: true
}

export type Srl_detailAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which srl_detail to aggregate.
   */
  where?: Prisma.srl_detailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of srl_details to fetch.
   */
  orderBy?: Prisma.srl_detailOrderByWithRelationInput | Prisma.srl_detailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.srl_detailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` srl_details from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` srl_details.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned srl_details
  **/
  _count?: true | Srl_detailCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: Srl_detailMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: Srl_detailMaxAggregateInputType
}

export type GetSrl_detailAggregateType<T extends Srl_detailAggregateArgs> = {
      [P in keyof T & keyof AggregateSrl_detail]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSrl_detail[P]>
    : Prisma.GetScalarType<T[P], AggregateSrl_detail[P]>
}




export type srl_detailGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.srl_detailWhereInput
  orderBy?: Prisma.srl_detailOrderByWithAggregationInput | Prisma.srl_detailOrderByWithAggregationInput[]
  by: Prisma.Srl_detailScalarFieldEnum[] | Prisma.Srl_detailScalarFieldEnum
  having?: Prisma.srl_detailScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: Srl_detailCountAggregateInputType | true
  _min?: Srl_detailMinAggregateInputType
  _max?: Srl_detailMaxAggregateInputType
}

export type Srl_detailGroupByOutputType = {
  srl_detail_id: string
  srl_id: string | null
  description: string
  status: string
  _count: Srl_detailCountAggregateOutputType | null
  _min: Srl_detailMinAggregateOutputType | null
  _max: Srl_detailMaxAggregateOutputType | null
}

type GetSrl_detailGroupByPayload<T extends srl_detailGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<Srl_detailGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof Srl_detailGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], Srl_detailGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], Srl_detailGroupByOutputType[P]>
      }
    >
  > 



export type srl_detailWhereInput = {
  AND?: Prisma.srl_detailWhereInput | Prisma.srl_detailWhereInput[]
  OR?: Prisma.srl_detailWhereInput[]
  NOT?: Prisma.srl_detailWhereInput | Prisma.srl_detailWhereInput[]
  srl_detail_id?: Prisma.StringFilter<"srl_detail"> | string
  srl_id?: Prisma.StringNullableFilter<"srl_detail"> | string | null
  description?: Prisma.StringFilter<"srl_detail"> | string
  status?: Prisma.StringFilter<"srl_detail"> | string
  srl?: Prisma.XOR<Prisma.SrlNullableScalarRelationFilter, Prisma.srlWhereInput> | null
}

export type srl_detailOrderByWithRelationInput = {
  srl_detail_id?: Prisma.SortOrder
  srl_id?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  srl?: Prisma.srlOrderByWithRelationInput
  _relevance?: Prisma.srl_detailOrderByRelevanceInput
}

export type srl_detailWhereUniqueInput = Prisma.AtLeast<{
  srl_detail_id?: string
  AND?: Prisma.srl_detailWhereInput | Prisma.srl_detailWhereInput[]
  OR?: Prisma.srl_detailWhereInput[]
  NOT?: Prisma.srl_detailWhereInput | Prisma.srl_detailWhereInput[]
  srl_id?: Prisma.StringNullableFilter<"srl_detail"> | string | null
  description?: Prisma.StringFilter<"srl_detail"> | string
  status?: Prisma.StringFilter<"srl_detail"> | string
  srl?: Prisma.XOR<Prisma.SrlNullableScalarRelationFilter, Prisma.srlWhereInput> | null
}, "srl_detail_id">

export type srl_detailOrderByWithAggregationInput = {
  srl_detail_id?: Prisma.SortOrder
  srl_id?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
  _count?: Prisma.srl_detailCountOrderByAggregateInput
  _max?: Prisma.srl_detailMaxOrderByAggregateInput
  _min?: Prisma.srl_detailMinOrderByAggregateInput
}

export type srl_detailScalarWhereWithAggregatesInput = {
  AND?: Prisma.srl_detailScalarWhereWithAggregatesInput | Prisma.srl_detailScalarWhereWithAggregatesInput[]
  OR?: Prisma.srl_detailScalarWhereWithAggregatesInput[]
  NOT?: Prisma.srl_detailScalarWhereWithAggregatesInput | Prisma.srl_detailScalarWhereWithAggregatesInput[]
  srl_detail_id?: Prisma.StringWithAggregatesFilter<"srl_detail"> | string
  srl_id?: Prisma.StringNullableWithAggregatesFilter<"srl_detail"> | string | null
  description?: Prisma.StringWithAggregatesFilter<"srl_detail"> | string
  status?: Prisma.StringWithAggregatesFilter<"srl_detail"> | string
}

export type srl_detailCreateInput = {
  srl_detail_id: string
  description: string
  status: string
  srl?: Prisma.srlCreateNestedOneWithoutSrl_detailInput
}

export type srl_detailUncheckedCreateInput = {
  srl_detail_id: string
  srl_id?: string | null
  description: string
  status: string
}

export type srl_detailUpdateInput = {
  srl_detail_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
  srl?: Prisma.srlUpdateOneWithoutSrl_detailNestedInput
}

export type srl_detailUncheckedUpdateInput = {
  srl_detail_id?: Prisma.StringFieldUpdateOperationsInput | string
  srl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type srl_detailCreateManyInput = {
  srl_detail_id: string
  srl_id?: string | null
  description: string
  status: string
}

export type srl_detailUpdateManyMutationInput = {
  srl_detail_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type srl_detailUncheckedUpdateManyInput = {
  srl_detail_id?: Prisma.StringFieldUpdateOperationsInput | string
  srl_id?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type Srl_detailListRelationFilter = {
  every?: Prisma.srl_detailWhereInput
  some?: Prisma.srl_detailWhereInput
  none?: Prisma.srl_detailWhereInput
}

export type srl_detailOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type srl_detailOrderByRelevanceInput = {
  fields: Prisma.srl_detailOrderByRelevanceFieldEnum | Prisma.srl_detailOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type srl_detailCountOrderByAggregateInput = {
  srl_detail_id?: Prisma.SortOrder
  srl_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type srl_detailMaxOrderByAggregateInput = {
  srl_detail_id?: Prisma.SortOrder
  srl_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type srl_detailMinOrderByAggregateInput = {
  srl_detail_id?: Prisma.SortOrder
  srl_id?: Prisma.SortOrder
  description?: Prisma.SortOrder
  status?: Prisma.SortOrder
}

export type srl_detailCreateNestedManyWithoutSrlInput = {
  create?: Prisma.XOR<Prisma.srl_detailCreateWithoutSrlInput, Prisma.srl_detailUncheckedCreateWithoutSrlInput> | Prisma.srl_detailCreateWithoutSrlInput[] | Prisma.srl_detailUncheckedCreateWithoutSrlInput[]
  connectOrCreate?: Prisma.srl_detailCreateOrConnectWithoutSrlInput | Prisma.srl_detailCreateOrConnectWithoutSrlInput[]
  createMany?: Prisma.srl_detailCreateManySrlInputEnvelope
  connect?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
}

export type srl_detailUncheckedCreateNestedManyWithoutSrlInput = {
  create?: Prisma.XOR<Prisma.srl_detailCreateWithoutSrlInput, Prisma.srl_detailUncheckedCreateWithoutSrlInput> | Prisma.srl_detailCreateWithoutSrlInput[] | Prisma.srl_detailUncheckedCreateWithoutSrlInput[]
  connectOrCreate?: Prisma.srl_detailCreateOrConnectWithoutSrlInput | Prisma.srl_detailCreateOrConnectWithoutSrlInput[]
  createMany?: Prisma.srl_detailCreateManySrlInputEnvelope
  connect?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
}

export type srl_detailUpdateManyWithoutSrlNestedInput = {
  create?: Prisma.XOR<Prisma.srl_detailCreateWithoutSrlInput, Prisma.srl_detailUncheckedCreateWithoutSrlInput> | Prisma.srl_detailCreateWithoutSrlInput[] | Prisma.srl_detailUncheckedCreateWithoutSrlInput[]
  connectOrCreate?: Prisma.srl_detailCreateOrConnectWithoutSrlInput | Prisma.srl_detailCreateOrConnectWithoutSrlInput[]
  upsert?: Prisma.srl_detailUpsertWithWhereUniqueWithoutSrlInput | Prisma.srl_detailUpsertWithWhereUniqueWithoutSrlInput[]
  createMany?: Prisma.srl_detailCreateManySrlInputEnvelope
  set?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
  disconnect?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
  delete?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
  connect?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
  update?: Prisma.srl_detailUpdateWithWhereUniqueWithoutSrlInput | Prisma.srl_detailUpdateWithWhereUniqueWithoutSrlInput[]
  updateMany?: Prisma.srl_detailUpdateManyWithWhereWithoutSrlInput | Prisma.srl_detailUpdateManyWithWhereWithoutSrlInput[]
  deleteMany?: Prisma.srl_detailScalarWhereInput | Prisma.srl_detailScalarWhereInput[]
}

export type srl_detailUncheckedUpdateManyWithoutSrlNestedInput = {
  create?: Prisma.XOR<Prisma.srl_detailCreateWithoutSrlInput, Prisma.srl_detailUncheckedCreateWithoutSrlInput> | Prisma.srl_detailCreateWithoutSrlInput[] | Prisma.srl_detailUncheckedCreateWithoutSrlInput[]
  connectOrCreate?: Prisma.srl_detailCreateOrConnectWithoutSrlInput | Prisma.srl_detailCreateOrConnectWithoutSrlInput[]
  upsert?: Prisma.srl_detailUpsertWithWhereUniqueWithoutSrlInput | Prisma.srl_detailUpsertWithWhereUniqueWithoutSrlInput[]
  createMany?: Prisma.srl_detailCreateManySrlInputEnvelope
  set?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
  disconnect?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
  delete?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
  connect?: Prisma.srl_detailWhereUniqueInput | Prisma.srl_detailWhereUniqueInput[]
  update?: Prisma.srl_detailUpdateWithWhereUniqueWithoutSrlInput | Prisma.srl_detailUpdateWithWhereUniqueWithoutSrlInput[]
  updateMany?: Prisma.srl_detailUpdateManyWithWhereWithoutSrlInput | Prisma.srl_detailUpdateManyWithWhereWithoutSrlInput[]
  deleteMany?: Prisma.srl_detailScalarWhereInput | Prisma.srl_detailScalarWhereInput[]
}

export type srl_detailCreateWithoutSrlInput = {
  srl_detail_id: string
  description: string
  status: string
}

export type srl_detailUncheckedCreateWithoutSrlInput = {
  srl_detail_id: string
  description: string
  status: string
}

export type srl_detailCreateOrConnectWithoutSrlInput = {
  where: Prisma.srl_detailWhereUniqueInput
  create: Prisma.XOR<Prisma.srl_detailCreateWithoutSrlInput, Prisma.srl_detailUncheckedCreateWithoutSrlInput>
}

export type srl_detailCreateManySrlInputEnvelope = {
  data: Prisma.srl_detailCreateManySrlInput | Prisma.srl_detailCreateManySrlInput[]
  skipDuplicates?: boolean
}

export type srl_detailUpsertWithWhereUniqueWithoutSrlInput = {
  where: Prisma.srl_detailWhereUniqueInput
  update: Prisma.XOR<Prisma.srl_detailUpdateWithoutSrlInput, Prisma.srl_detailUncheckedUpdateWithoutSrlInput>
  create: Prisma.XOR<Prisma.srl_detailCreateWithoutSrlInput, Prisma.srl_detailUncheckedCreateWithoutSrlInput>
}

export type srl_detailUpdateWithWhereUniqueWithoutSrlInput = {
  where: Prisma.srl_detailWhereUniqueInput
  data: Prisma.XOR<Prisma.srl_detailUpdateWithoutSrlInput, Prisma.srl_detailUncheckedUpdateWithoutSrlInput>
}

export type srl_detailUpdateManyWithWhereWithoutSrlInput = {
  where: Prisma.srl_detailScalarWhereInput
  data: Prisma.XOR<Prisma.srl_detailUpdateManyMutationInput, Prisma.srl_detailUncheckedUpdateManyWithoutSrlInput>
}

export type srl_detailScalarWhereInput = {
  AND?: Prisma.srl_detailScalarWhereInput | Prisma.srl_detailScalarWhereInput[]
  OR?: Prisma.srl_detailScalarWhereInput[]
  NOT?: Prisma.srl_detailScalarWhereInput | Prisma.srl_detailScalarWhereInput[]
  srl_detail_id?: Prisma.StringFilter<"srl_detail"> | string
  srl_id?: Prisma.StringNullableFilter<"srl_detail"> | string | null
  description?: Prisma.StringFilter<"srl_detail"> | string
  status?: Prisma.StringFilter<"srl_detail"> | string
}

export type srl_detailCreateManySrlInput = {
  srl_detail_id: string
  description: string
  status: string
}

export type srl_detailUpdateWithoutSrlInput = {
  srl_detail_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type srl_detailUncheckedUpdateWithoutSrlInput = {
  srl_detail_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}

export type srl_detailUncheckedUpdateManyWithoutSrlInput = {
  srl_detail_id?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.StringFieldUpdateOperationsInput | string
}



export type srl_detailSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  srl_detail_id?: boolean
  srl_id?: boolean
  description?: boolean
  status?: boolean
  srl?: boolean | Prisma.srl_detail$srlArgs<ExtArgs>
}, ExtArgs["result"]["srl_detail"]>



export type srl_detailSelectScalar = {
  srl_detail_id?: boolean
  srl_id?: boolean
  description?: boolean
  status?: boolean
}

export type srl_detailOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"srl_detail_id" | "srl_id" | "description" | "status", ExtArgs["result"]["srl_detail"]>
export type srl_detailInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  srl?: boolean | Prisma.srl_detail$srlArgs<ExtArgs>
}

export type $srl_detailPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "srl_detail"
  objects: {
    srl: Prisma.$srlPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    srl_detail_id: string
    srl_id: string | null
    description: string
    status: string
  }, ExtArgs["result"]["srl_detail"]>
  composites: {}
}

export type srl_detailGetPayload<S extends boolean | null | undefined | srl_detailDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$srl_detailPayload, S>

export type srl_detailCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<srl_detailFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: Srl_detailCountAggregateInputType | true
  }

export interface srl_detailDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['srl_detail'], meta: { name: 'srl_detail' } }
  /**
   * Find zero or one Srl_detail that matches the filter.
   * @param {srl_detailFindUniqueArgs} args - Arguments to find a Srl_detail
   * @example
   * // Get one Srl_detail
   * const srl_detail = await prisma.srl_detail.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends srl_detailFindUniqueArgs>(args: Prisma.SelectSubset<T, srl_detailFindUniqueArgs<ExtArgs>>): Prisma.Prisma__srl_detailClient<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Srl_detail that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {srl_detailFindUniqueOrThrowArgs} args - Arguments to find a Srl_detail
   * @example
   * // Get one Srl_detail
   * const srl_detail = await prisma.srl_detail.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends srl_detailFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, srl_detailFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__srl_detailClient<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Srl_detail that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srl_detailFindFirstArgs} args - Arguments to find a Srl_detail
   * @example
   * // Get one Srl_detail
   * const srl_detail = await prisma.srl_detail.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends srl_detailFindFirstArgs>(args?: Prisma.SelectSubset<T, srl_detailFindFirstArgs<ExtArgs>>): Prisma.Prisma__srl_detailClient<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Srl_detail that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srl_detailFindFirstOrThrowArgs} args - Arguments to find a Srl_detail
   * @example
   * // Get one Srl_detail
   * const srl_detail = await prisma.srl_detail.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends srl_detailFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, srl_detailFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__srl_detailClient<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Srl_details that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srl_detailFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Srl_details
   * const srl_details = await prisma.srl_detail.findMany()
   * 
   * // Get first 10 Srl_details
   * const srl_details = await prisma.srl_detail.findMany({ take: 10 })
   * 
   * // Only select the `srl_detail_id`
   * const srl_detailWithSrl_detail_idOnly = await prisma.srl_detail.findMany({ select: { srl_detail_id: true } })
   * 
   */
  findMany<T extends srl_detailFindManyArgs>(args?: Prisma.SelectSubset<T, srl_detailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Srl_detail.
   * @param {srl_detailCreateArgs} args - Arguments to create a Srl_detail.
   * @example
   * // Create one Srl_detail
   * const Srl_detail = await prisma.srl_detail.create({
   *   data: {
   *     // ... data to create a Srl_detail
   *   }
   * })
   * 
   */
  create<T extends srl_detailCreateArgs>(args: Prisma.SelectSubset<T, srl_detailCreateArgs<ExtArgs>>): Prisma.Prisma__srl_detailClient<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Srl_details.
   * @param {srl_detailCreateManyArgs} args - Arguments to create many Srl_details.
   * @example
   * // Create many Srl_details
   * const srl_detail = await prisma.srl_detail.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends srl_detailCreateManyArgs>(args?: Prisma.SelectSubset<T, srl_detailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Srl_detail.
   * @param {srl_detailDeleteArgs} args - Arguments to delete one Srl_detail.
   * @example
   * // Delete one Srl_detail
   * const Srl_detail = await prisma.srl_detail.delete({
   *   where: {
   *     // ... filter to delete one Srl_detail
   *   }
   * })
   * 
   */
  delete<T extends srl_detailDeleteArgs>(args: Prisma.SelectSubset<T, srl_detailDeleteArgs<ExtArgs>>): Prisma.Prisma__srl_detailClient<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Srl_detail.
   * @param {srl_detailUpdateArgs} args - Arguments to update one Srl_detail.
   * @example
   * // Update one Srl_detail
   * const srl_detail = await prisma.srl_detail.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends srl_detailUpdateArgs>(args: Prisma.SelectSubset<T, srl_detailUpdateArgs<ExtArgs>>): Prisma.Prisma__srl_detailClient<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Srl_details.
   * @param {srl_detailDeleteManyArgs} args - Arguments to filter Srl_details to delete.
   * @example
   * // Delete a few Srl_details
   * const { count } = await prisma.srl_detail.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends srl_detailDeleteManyArgs>(args?: Prisma.SelectSubset<T, srl_detailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Srl_details.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srl_detailUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Srl_details
   * const srl_detail = await prisma.srl_detail.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends srl_detailUpdateManyArgs>(args: Prisma.SelectSubset<T, srl_detailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Srl_detail.
   * @param {srl_detailUpsertArgs} args - Arguments to update or create a Srl_detail.
   * @example
   * // Update or create a Srl_detail
   * const srl_detail = await prisma.srl_detail.upsert({
   *   create: {
   *     // ... data to create a Srl_detail
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Srl_detail we want to update
   *   }
   * })
   */
  upsert<T extends srl_detailUpsertArgs>(args: Prisma.SelectSubset<T, srl_detailUpsertArgs<ExtArgs>>): Prisma.Prisma__srl_detailClient<runtime.Types.Result.GetResult<Prisma.$srl_detailPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Srl_details.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srl_detailCountArgs} args - Arguments to filter Srl_details to count.
   * @example
   * // Count the number of Srl_details
   * const count = await prisma.srl_detail.count({
   *   where: {
   *     // ... the filter for the Srl_details we want to count
   *   }
   * })
  **/
  count<T extends srl_detailCountArgs>(
    args?: Prisma.Subset<T, srl_detailCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], Srl_detailCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Srl_detail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {Srl_detailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends Srl_detailAggregateArgs>(args: Prisma.Subset<T, Srl_detailAggregateArgs>): Prisma.PrismaPromise<GetSrl_detailAggregateType<T>>

  /**
   * Group by Srl_detail.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {srl_detailGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends srl_detailGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: srl_detailGroupByArgs['orderBy'] }
      : { orderBy?: srl_detailGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, srl_detailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSrl_detailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the srl_detail model
 */
readonly fields: srl_detailFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for srl_detail.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__srl_detailClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  srl<T extends Prisma.srl_detail$srlArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.srl_detail$srlArgs<ExtArgs>>): Prisma.Prisma__srlClient<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the srl_detail model
 */
export interface srl_detailFieldRefs {
  readonly srl_detail_id: Prisma.FieldRef<"srl_detail", 'String'>
  readonly srl_id: Prisma.FieldRef<"srl_detail", 'String'>
  readonly description: Prisma.FieldRef<"srl_detail", 'String'>
  readonly status: Prisma.FieldRef<"srl_detail", 'String'>
}
    

// Custom InputTypes
/**
 * srl_detail findUnique
 */
export type srl_detailFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  /**
   * Filter, which srl_detail to fetch.
   */
  where: Prisma.srl_detailWhereUniqueInput
}

/**
 * srl_detail findUniqueOrThrow
 */
export type srl_detailFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  /**
   * Filter, which srl_detail to fetch.
   */
  where: Prisma.srl_detailWhereUniqueInput
}

/**
 * srl_detail findFirst
 */
export type srl_detailFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  /**
   * Filter, which srl_detail to fetch.
   */
  where?: Prisma.srl_detailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of srl_details to fetch.
   */
  orderBy?: Prisma.srl_detailOrderByWithRelationInput | Prisma.srl_detailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for srl_details.
   */
  cursor?: Prisma.srl_detailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` srl_details from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` srl_details.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of srl_details.
   */
  distinct?: Prisma.Srl_detailScalarFieldEnum | Prisma.Srl_detailScalarFieldEnum[]
}

/**
 * srl_detail findFirstOrThrow
 */
export type srl_detailFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  /**
   * Filter, which srl_detail to fetch.
   */
  where?: Prisma.srl_detailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of srl_details to fetch.
   */
  orderBy?: Prisma.srl_detailOrderByWithRelationInput | Prisma.srl_detailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for srl_details.
   */
  cursor?: Prisma.srl_detailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` srl_details from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` srl_details.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of srl_details.
   */
  distinct?: Prisma.Srl_detailScalarFieldEnum | Prisma.Srl_detailScalarFieldEnum[]
}

/**
 * srl_detail findMany
 */
export type srl_detailFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  /**
   * Filter, which srl_details to fetch.
   */
  where?: Prisma.srl_detailWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of srl_details to fetch.
   */
  orderBy?: Prisma.srl_detailOrderByWithRelationInput | Prisma.srl_detailOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing srl_details.
   */
  cursor?: Prisma.srl_detailWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` srl_details from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` srl_details.
   */
  skip?: number
  distinct?: Prisma.Srl_detailScalarFieldEnum | Prisma.Srl_detailScalarFieldEnum[]
}

/**
 * srl_detail create
 */
export type srl_detailCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  /**
   * The data needed to create a srl_detail.
   */
  data: Prisma.XOR<Prisma.srl_detailCreateInput, Prisma.srl_detailUncheckedCreateInput>
}

/**
 * srl_detail createMany
 */
export type srl_detailCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many srl_details.
   */
  data: Prisma.srl_detailCreateManyInput | Prisma.srl_detailCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * srl_detail update
 */
export type srl_detailUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  /**
   * The data needed to update a srl_detail.
   */
  data: Prisma.XOR<Prisma.srl_detailUpdateInput, Prisma.srl_detailUncheckedUpdateInput>
  /**
   * Choose, which srl_detail to update.
   */
  where: Prisma.srl_detailWhereUniqueInput
}

/**
 * srl_detail updateMany
 */
export type srl_detailUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update srl_details.
   */
  data: Prisma.XOR<Prisma.srl_detailUpdateManyMutationInput, Prisma.srl_detailUncheckedUpdateManyInput>
  /**
   * Filter which srl_details to update
   */
  where?: Prisma.srl_detailWhereInput
  /**
   * Limit how many srl_details to update.
   */
  limit?: number
}

/**
 * srl_detail upsert
 */
export type srl_detailUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  /**
   * The filter to search for the srl_detail to update in case it exists.
   */
  where: Prisma.srl_detailWhereUniqueInput
  /**
   * In case the srl_detail found by the `where` argument doesn't exist, create a new srl_detail with this data.
   */
  create: Prisma.XOR<Prisma.srl_detailCreateInput, Prisma.srl_detailUncheckedCreateInput>
  /**
   * In case the srl_detail was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.srl_detailUpdateInput, Prisma.srl_detailUncheckedUpdateInput>
}

/**
 * srl_detail delete
 */
export type srl_detailDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
  /**
   * Filter which srl_detail to delete.
   */
  where: Prisma.srl_detailWhereUniqueInput
}

/**
 * srl_detail deleteMany
 */
export type srl_detailDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which srl_details to delete
   */
  where?: Prisma.srl_detailWhereInput
  /**
   * Limit how many srl_details to delete.
   */
  limit?: number
}

/**
 * srl_detail.srl
 */
export type srl_detail$srlArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  where?: Prisma.srlWhereInput
}

/**
 * srl_detail without action
 */
export type srl_detailDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl_detail
   */
  select?: Prisma.srl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl_detail
   */
  omit?: Prisma.srl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srl_detailInclude<ExtArgs> | null
}
