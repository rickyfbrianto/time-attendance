
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `spl` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model spl
 * 
 */
export type splModel = runtime.Types.Result.DefaultSelection<Prisma.$splPayload>

export type AggregateSpl = {
  _count: SplCountAggregateOutputType | null
  _min: SplMinAggregateOutputType | null
  _max: SplMaxAggregateOutputType | null
}

export type SplMinAggregateOutputType = {
  spl_id: string | null
  purpose: string | null
  dept: string | null
  est_start: Date | null
  est_end: Date | null
  status1: $Enums.spl_status1 | null
  approval1: string | null
  status2: $Enums.spl_status2 | null
  approval2: string | null
  createdAt: Date | null
}

export type SplMaxAggregateOutputType = {
  spl_id: string | null
  purpose: string | null
  dept: string | null
  est_start: Date | null
  est_end: Date | null
  status1: $Enums.spl_status1 | null
  approval1: string | null
  status2: $Enums.spl_status2 | null
  approval2: string | null
  createdAt: Date | null
}

export type SplCountAggregateOutputType = {
  spl_id: number
  purpose: number
  dept: number
  est_start: number
  est_end: number
  status1: number
  approval1: number
  status2: number
  approval2: number
  createdAt: number
  _all: number
}


export type SplMinAggregateInputType = {
  spl_id?: true
  purpose?: true
  dept?: true
  est_start?: true
  est_end?: true
  status1?: true
  approval1?: true
  status2?: true
  approval2?: true
  createdAt?: true
}

export type SplMaxAggregateInputType = {
  spl_id?: true
  purpose?: true
  dept?: true
  est_start?: true
  est_end?: true
  status1?: true
  approval1?: true
  status2?: true
  approval2?: true
  createdAt?: true
}

export type SplCountAggregateInputType = {
  spl_id?: true
  purpose?: true
  dept?: true
  est_start?: true
  est_end?: true
  status1?: true
  approval1?: true
  status2?: true
  approval2?: true
  createdAt?: true
  _all?: true
}

export type SplAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which spl to aggregate.
   */
  where?: Prisma.splWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of spls to fetch.
   */
  orderBy?: Prisma.splOrderByWithRelationInput | Prisma.splOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.splWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` spls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` spls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned spls
  **/
  _count?: true | SplCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SplMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SplMaxAggregateInputType
}

export type GetSplAggregateType<T extends SplAggregateArgs> = {
      [P in keyof T & keyof AggregateSpl]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSpl[P]>
    : Prisma.GetScalarType<T[P], AggregateSpl[P]>
}




export type splGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.splWhereInput
  orderBy?: Prisma.splOrderByWithAggregationInput | Prisma.splOrderByWithAggregationInput[]
  by: Prisma.SplScalarFieldEnum[] | Prisma.SplScalarFieldEnum
  having?: Prisma.splScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SplCountAggregateInputType | true
  _min?: SplMinAggregateInputType
  _max?: SplMaxAggregateInputType
}

export type SplGroupByOutputType = {
  spl_id: string
  purpose: string
  dept: string | null
  est_start: Date
  est_end: Date
  status1: $Enums.spl_status1
  approval1: string | null
  status2: $Enums.spl_status2
  approval2: string | null
  createdAt: Date
  _count: SplCountAggregateOutputType | null
  _min: SplMinAggregateOutputType | null
  _max: SplMaxAggregateOutputType | null
}

type GetSplGroupByPayload<T extends splGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SplGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SplGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SplGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SplGroupByOutputType[P]>
      }
    >
  > 



export type splWhereInput = {
  AND?: Prisma.splWhereInput | Prisma.splWhereInput[]
  OR?: Prisma.splWhereInput[]
  NOT?: Prisma.splWhereInput | Prisma.splWhereInput[]
  spl_id?: Prisma.StringFilter<"spl"> | string
  purpose?: Prisma.StringFilter<"spl"> | string
  dept?: Prisma.StringNullableFilter<"spl"> | string | null
  est_start?: Prisma.DateTimeFilter<"spl"> | Date | string
  est_end?: Prisma.DateTimeFilter<"spl"> | Date | string
  status1?: Prisma.Enumspl_status1Filter<"spl"> | $Enums.spl_status1
  approval1?: Prisma.StringNullableFilter<"spl"> | string | null
  status2?: Prisma.Enumspl_status2Filter<"spl"> | $Enums.spl_status2
  approval2?: Prisma.StringNullableFilter<"spl"> | string | null
  createdAt?: Prisma.DateTimeFilter<"spl"> | Date | string
  employee_spl_approval1Toemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee_spl_approval2Toemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  dept_spl_deptTodept?: Prisma.XOR<Prisma.DeptNullableScalarRelationFilter, Prisma.deptWhereInput> | null
  spl_detail?: Prisma.Spl_detailListRelationFilter
  srl?: Prisma.SrlListRelationFilter
}

export type splOrderByWithRelationInput = {
  spl_id?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  dept?: Prisma.SortOrderInput | Prisma.SortOrder
  est_start?: Prisma.SortOrder
  est_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrderInput | Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  employee_spl_approval1Toemployee?: Prisma.employeeOrderByWithRelationInput
  employee_spl_approval2Toemployee?: Prisma.employeeOrderByWithRelationInput
  dept_spl_deptTodept?: Prisma.deptOrderByWithRelationInput
  spl_detail?: Prisma.spl_detailOrderByRelationAggregateInput
  srl?: Prisma.srlOrderByRelationAggregateInput
  _relevance?: Prisma.splOrderByRelevanceInput
}

export type splWhereUniqueInput = Prisma.AtLeast<{
  spl_id?: string
  AND?: Prisma.splWhereInput | Prisma.splWhereInput[]
  OR?: Prisma.splWhereInput[]
  NOT?: Prisma.splWhereInput | Prisma.splWhereInput[]
  purpose?: Prisma.StringFilter<"spl"> | string
  dept?: Prisma.StringNullableFilter<"spl"> | string | null
  est_start?: Prisma.DateTimeFilter<"spl"> | Date | string
  est_end?: Prisma.DateTimeFilter<"spl"> | Date | string
  status1?: Prisma.Enumspl_status1Filter<"spl"> | $Enums.spl_status1
  approval1?: Prisma.StringNullableFilter<"spl"> | string | null
  status2?: Prisma.Enumspl_status2Filter<"spl"> | $Enums.spl_status2
  approval2?: Prisma.StringNullableFilter<"spl"> | string | null
  createdAt?: Prisma.DateTimeFilter<"spl"> | Date | string
  employee_spl_approval1Toemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  employee_spl_approval2Toemployee?: Prisma.XOR<Prisma.EmployeeNullableScalarRelationFilter, Prisma.employeeWhereInput> | null
  dept_spl_deptTodept?: Prisma.XOR<Prisma.DeptNullableScalarRelationFilter, Prisma.deptWhereInput> | null
  spl_detail?: Prisma.Spl_detailListRelationFilter
  srl?: Prisma.SrlListRelationFilter
}, "spl_id">

export type splOrderByWithAggregationInput = {
  spl_id?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  dept?: Prisma.SortOrderInput | Prisma.SortOrder
  est_start?: Prisma.SortOrder
  est_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrderInput | Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.splCountOrderByAggregateInput
  _max?: Prisma.splMaxOrderByAggregateInput
  _min?: Prisma.splMinOrderByAggregateInput
}

export type splScalarWhereWithAggregatesInput = {
  AND?: Prisma.splScalarWhereWithAggregatesInput | Prisma.splScalarWhereWithAggregatesInput[]
  OR?: Prisma.splScalarWhereWithAggregatesInput[]
  NOT?: Prisma.splScalarWhereWithAggregatesInput | Prisma.splScalarWhereWithAggregatesInput[]
  spl_id?: Prisma.StringWithAggregatesFilter<"spl"> | string
  purpose?: Prisma.StringWithAggregatesFilter<"spl"> | string
  dept?: Prisma.StringNullableWithAggregatesFilter<"spl"> | string | null
  est_start?: Prisma.DateTimeWithAggregatesFilter<"spl"> | Date | string
  est_end?: Prisma.DateTimeWithAggregatesFilter<"spl"> | Date | string
  status1?: Prisma.Enumspl_status1WithAggregatesFilter<"spl"> | $Enums.spl_status1
  approval1?: Prisma.StringNullableWithAggregatesFilter<"spl"> | string | null
  status2?: Prisma.Enumspl_status2WithAggregatesFilter<"spl"> | $Enums.spl_status2
  approval2?: Prisma.StringNullableWithAggregatesFilter<"spl"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"spl"> | Date | string
}

export type splCreateInput = {
  spl_id: string
  purpose: string
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  status2?: $Enums.spl_status2
  createdAt?: Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval1ToemployeeInput
  employee_spl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval2ToemployeeInput
  dept_spl_deptTodept?: Prisma.deptCreateNestedOneWithoutSpl_spl_deptTodeptInput
  spl_detail?: Prisma.spl_detailCreateNestedManyWithoutSplInput
  srl?: Prisma.srlCreateNestedManyWithoutSplInput
}

export type splUncheckedCreateInput = {
  spl_id: string
  purpose: string
  dept?: string | null
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  approval1?: string | null
  status2?: $Enums.spl_status2
  approval2?: string | null
  createdAt?: Date | string
  spl_detail?: Prisma.spl_detailUncheckedCreateNestedManyWithoutSplInput
  srl?: Prisma.srlUncheckedCreateNestedManyWithoutSplInput
}

export type splUpdateInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval1ToemployeeNestedInput
  employee_spl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval2ToemployeeNestedInput
  dept_spl_deptTodept?: Prisma.deptUpdateOneWithoutSpl_spl_deptTodeptNestedInput
  spl_detail?: Prisma.spl_detailUpdateManyWithoutSplNestedInput
  srl?: Prisma.srlUpdateManyWithoutSplNestedInput
}

export type splUncheckedUpdateInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  dept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  spl_detail?: Prisma.spl_detailUncheckedUpdateManyWithoutSplNestedInput
  srl?: Prisma.srlUncheckedUpdateManyWithoutSplNestedInput
}

export type splCreateManyInput = {
  spl_id: string
  purpose: string
  dept?: string | null
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  approval1?: string | null
  status2?: $Enums.spl_status2
  approval2?: string | null
  createdAt?: Date | string
}

export type splUpdateManyMutationInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type splUncheckedUpdateManyInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  dept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SplListRelationFilter = {
  every?: Prisma.splWhereInput
  some?: Prisma.splWhereInput
  none?: Prisma.splWhereInput
}

export type splOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type splOrderByRelevanceInput = {
  fields: Prisma.splOrderByRelevanceFieldEnum | Prisma.splOrderByRelevanceFieldEnum[]
  sort: Prisma.SortOrder
  search: string
}

export type splCountOrderByAggregateInput = {
  spl_id?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  dept?: Prisma.SortOrder
  est_start?: Prisma.SortOrder
  est_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type splMaxOrderByAggregateInput = {
  spl_id?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  dept?: Prisma.SortOrder
  est_start?: Prisma.SortOrder
  est_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type splMinOrderByAggregateInput = {
  spl_id?: Prisma.SortOrder
  purpose?: Prisma.SortOrder
  dept?: Prisma.SortOrder
  est_start?: Prisma.SortOrder
  est_end?: Prisma.SortOrder
  status1?: Prisma.SortOrder
  approval1?: Prisma.SortOrder
  status2?: Prisma.SortOrder
  approval2?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type SplScalarRelationFilter = {
  is?: Prisma.splWhereInput
  isNot?: Prisma.splWhereInput
}

export type SplNullableScalarRelationFilter = {
  is?: Prisma.splWhereInput | null
  isNot?: Prisma.splWhereInput | null
}

export type splCreateNestedManyWithoutEmployee_spl_approval1ToemployeeInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput> | Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput[] | Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splCreateOrConnectWithoutEmployee_spl_approval1ToemployeeInput[]
  createMany?: Prisma.splCreateManyEmployee_spl_approval1ToemployeeInputEnvelope
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
}

export type splCreateNestedManyWithoutEmployee_spl_approval2ToemployeeInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput> | Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput[] | Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splCreateOrConnectWithoutEmployee_spl_approval2ToemployeeInput[]
  createMany?: Prisma.splCreateManyEmployee_spl_approval2ToemployeeInputEnvelope
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
}

export type splUncheckedCreateNestedManyWithoutEmployee_spl_approval1ToemployeeInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput> | Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput[] | Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splCreateOrConnectWithoutEmployee_spl_approval1ToemployeeInput[]
  createMany?: Prisma.splCreateManyEmployee_spl_approval1ToemployeeInputEnvelope
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
}

export type splUncheckedCreateNestedManyWithoutEmployee_spl_approval2ToemployeeInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput> | Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput[] | Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splCreateOrConnectWithoutEmployee_spl_approval2ToemployeeInput[]
  createMany?: Prisma.splCreateManyEmployee_spl_approval2ToemployeeInputEnvelope
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
}

export type splUpdateManyWithoutEmployee_spl_approval1ToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput> | Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput[] | Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splCreateOrConnectWithoutEmployee_spl_approval1ToemployeeInput[]
  upsert?: Prisma.splUpsertWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splUpsertWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput[]
  createMany?: Prisma.splCreateManyEmployee_spl_approval1ToemployeeInputEnvelope
  set?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  disconnect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  delete?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  update?: Prisma.splUpdateWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splUpdateWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput[]
  updateMany?: Prisma.splUpdateManyWithWhereWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splUpdateManyWithWhereWithoutEmployee_spl_approval1ToemployeeInput[]
  deleteMany?: Prisma.splScalarWhereInput | Prisma.splScalarWhereInput[]
}

export type splUpdateManyWithoutEmployee_spl_approval2ToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput> | Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput[] | Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splCreateOrConnectWithoutEmployee_spl_approval2ToemployeeInput[]
  upsert?: Prisma.splUpsertWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splUpsertWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput[]
  createMany?: Prisma.splCreateManyEmployee_spl_approval2ToemployeeInputEnvelope
  set?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  disconnect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  delete?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  update?: Prisma.splUpdateWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splUpdateWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput[]
  updateMany?: Prisma.splUpdateManyWithWhereWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splUpdateManyWithWhereWithoutEmployee_spl_approval2ToemployeeInput[]
  deleteMany?: Prisma.splScalarWhereInput | Prisma.splScalarWhereInput[]
}

export type splUncheckedUpdateManyWithoutEmployee_spl_approval1ToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput> | Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput[] | Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splCreateOrConnectWithoutEmployee_spl_approval1ToemployeeInput[]
  upsert?: Prisma.splUpsertWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splUpsertWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput[]
  createMany?: Prisma.splCreateManyEmployee_spl_approval1ToemployeeInputEnvelope
  set?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  disconnect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  delete?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  update?: Prisma.splUpdateWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splUpdateWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput[]
  updateMany?: Prisma.splUpdateManyWithWhereWithoutEmployee_spl_approval1ToemployeeInput | Prisma.splUpdateManyWithWhereWithoutEmployee_spl_approval1ToemployeeInput[]
  deleteMany?: Prisma.splScalarWhereInput | Prisma.splScalarWhereInput[]
}

export type splUncheckedUpdateManyWithoutEmployee_spl_approval2ToemployeeNestedInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput> | Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput[] | Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splCreateOrConnectWithoutEmployee_spl_approval2ToemployeeInput[]
  upsert?: Prisma.splUpsertWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splUpsertWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput[]
  createMany?: Prisma.splCreateManyEmployee_spl_approval2ToemployeeInputEnvelope
  set?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  disconnect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  delete?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  update?: Prisma.splUpdateWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splUpdateWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput[]
  updateMany?: Prisma.splUpdateManyWithWhereWithoutEmployee_spl_approval2ToemployeeInput | Prisma.splUpdateManyWithWhereWithoutEmployee_spl_approval2ToemployeeInput[]
  deleteMany?: Prisma.splScalarWhereInput | Prisma.splScalarWhereInput[]
}

export type Enumspl_status1FieldUpdateOperationsInput = {
  set?: $Enums.spl_status1
}

export type Enumspl_status2FieldUpdateOperationsInput = {
  set?: $Enums.spl_status2
}

export type splCreateNestedOneWithoutSpl_detailInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutSpl_detailInput, Prisma.splUncheckedCreateWithoutSpl_detailInput>
  connectOrCreate?: Prisma.splCreateOrConnectWithoutSpl_detailInput
  connect?: Prisma.splWhereUniqueInput
}

export type splUpdateOneRequiredWithoutSpl_detailNestedInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutSpl_detailInput, Prisma.splUncheckedCreateWithoutSpl_detailInput>
  connectOrCreate?: Prisma.splCreateOrConnectWithoutSpl_detailInput
  upsert?: Prisma.splUpsertWithoutSpl_detailInput
  connect?: Prisma.splWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.splUpdateToOneWithWhereWithoutSpl_detailInput, Prisma.splUpdateWithoutSpl_detailInput>, Prisma.splUncheckedUpdateWithoutSpl_detailInput>
}

export type splCreateNestedManyWithoutDept_spl_deptTodeptInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutDept_spl_deptTodeptInput, Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput> | Prisma.splCreateWithoutDept_spl_deptTodeptInput[] | Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutDept_spl_deptTodeptInput | Prisma.splCreateOrConnectWithoutDept_spl_deptTodeptInput[]
  createMany?: Prisma.splCreateManyDept_spl_deptTodeptInputEnvelope
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
}

export type splUncheckedCreateNestedManyWithoutDept_spl_deptTodeptInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutDept_spl_deptTodeptInput, Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput> | Prisma.splCreateWithoutDept_spl_deptTodeptInput[] | Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutDept_spl_deptTodeptInput | Prisma.splCreateOrConnectWithoutDept_spl_deptTodeptInput[]
  createMany?: Prisma.splCreateManyDept_spl_deptTodeptInputEnvelope
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
}

export type splUpdateManyWithoutDept_spl_deptTodeptNestedInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutDept_spl_deptTodeptInput, Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput> | Prisma.splCreateWithoutDept_spl_deptTodeptInput[] | Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutDept_spl_deptTodeptInput | Prisma.splCreateOrConnectWithoutDept_spl_deptTodeptInput[]
  upsert?: Prisma.splUpsertWithWhereUniqueWithoutDept_spl_deptTodeptInput | Prisma.splUpsertWithWhereUniqueWithoutDept_spl_deptTodeptInput[]
  createMany?: Prisma.splCreateManyDept_spl_deptTodeptInputEnvelope
  set?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  disconnect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  delete?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  update?: Prisma.splUpdateWithWhereUniqueWithoutDept_spl_deptTodeptInput | Prisma.splUpdateWithWhereUniqueWithoutDept_spl_deptTodeptInput[]
  updateMany?: Prisma.splUpdateManyWithWhereWithoutDept_spl_deptTodeptInput | Prisma.splUpdateManyWithWhereWithoutDept_spl_deptTodeptInput[]
  deleteMany?: Prisma.splScalarWhereInput | Prisma.splScalarWhereInput[]
}

export type splUncheckedUpdateManyWithoutDept_spl_deptTodeptNestedInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutDept_spl_deptTodeptInput, Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput> | Prisma.splCreateWithoutDept_spl_deptTodeptInput[] | Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput[]
  connectOrCreate?: Prisma.splCreateOrConnectWithoutDept_spl_deptTodeptInput | Prisma.splCreateOrConnectWithoutDept_spl_deptTodeptInput[]
  upsert?: Prisma.splUpsertWithWhereUniqueWithoutDept_spl_deptTodeptInput | Prisma.splUpsertWithWhereUniqueWithoutDept_spl_deptTodeptInput[]
  createMany?: Prisma.splCreateManyDept_spl_deptTodeptInputEnvelope
  set?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  disconnect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  delete?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  connect?: Prisma.splWhereUniqueInput | Prisma.splWhereUniqueInput[]
  update?: Prisma.splUpdateWithWhereUniqueWithoutDept_spl_deptTodeptInput | Prisma.splUpdateWithWhereUniqueWithoutDept_spl_deptTodeptInput[]
  updateMany?: Prisma.splUpdateManyWithWhereWithoutDept_spl_deptTodeptInput | Prisma.splUpdateManyWithWhereWithoutDept_spl_deptTodeptInput[]
  deleteMany?: Prisma.splScalarWhereInput | Prisma.splScalarWhereInput[]
}

export type splCreateNestedOneWithoutSrlInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutSrlInput, Prisma.splUncheckedCreateWithoutSrlInput>
  connectOrCreate?: Prisma.splCreateOrConnectWithoutSrlInput
  connect?: Prisma.splWhereUniqueInput
}

export type splUpdateOneWithoutSrlNestedInput = {
  create?: Prisma.XOR<Prisma.splCreateWithoutSrlInput, Prisma.splUncheckedCreateWithoutSrlInput>
  connectOrCreate?: Prisma.splCreateOrConnectWithoutSrlInput
  upsert?: Prisma.splUpsertWithoutSrlInput
  disconnect?: Prisma.splWhereInput | boolean
  delete?: Prisma.splWhereInput | boolean
  connect?: Prisma.splWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.splUpdateToOneWithWhereWithoutSrlInput, Prisma.splUpdateWithoutSrlInput>, Prisma.splUncheckedUpdateWithoutSrlInput>
}

export type splCreateWithoutEmployee_spl_approval1ToemployeeInput = {
  spl_id: string
  purpose: string
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  status2?: $Enums.spl_status2
  createdAt?: Date | string
  employee_spl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval2ToemployeeInput
  dept_spl_deptTodept?: Prisma.deptCreateNestedOneWithoutSpl_spl_deptTodeptInput
  spl_detail?: Prisma.spl_detailCreateNestedManyWithoutSplInput
  srl?: Prisma.srlCreateNestedManyWithoutSplInput
}

export type splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput = {
  spl_id: string
  purpose: string
  dept?: string | null
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  status2?: $Enums.spl_status2
  approval2?: string | null
  createdAt?: Date | string
  spl_detail?: Prisma.spl_detailUncheckedCreateNestedManyWithoutSplInput
  srl?: Prisma.srlUncheckedCreateNestedManyWithoutSplInput
}

export type splCreateOrConnectWithoutEmployee_spl_approval1ToemployeeInput = {
  where: Prisma.splWhereUniqueInput
  create: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput>
}

export type splCreateManyEmployee_spl_approval1ToemployeeInputEnvelope = {
  data: Prisma.splCreateManyEmployee_spl_approval1ToemployeeInput | Prisma.splCreateManyEmployee_spl_approval1ToemployeeInput[]
  skipDuplicates?: boolean
}

export type splCreateWithoutEmployee_spl_approval2ToemployeeInput = {
  spl_id: string
  purpose: string
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  status2?: $Enums.spl_status2
  createdAt?: Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval1ToemployeeInput
  dept_spl_deptTodept?: Prisma.deptCreateNestedOneWithoutSpl_spl_deptTodeptInput
  spl_detail?: Prisma.spl_detailCreateNestedManyWithoutSplInput
  srl?: Prisma.srlCreateNestedManyWithoutSplInput
}

export type splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput = {
  spl_id: string
  purpose: string
  dept?: string | null
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  approval1?: string | null
  status2?: $Enums.spl_status2
  createdAt?: Date | string
  spl_detail?: Prisma.spl_detailUncheckedCreateNestedManyWithoutSplInput
  srl?: Prisma.srlUncheckedCreateNestedManyWithoutSplInput
}

export type splCreateOrConnectWithoutEmployee_spl_approval2ToemployeeInput = {
  where: Prisma.splWhereUniqueInput
  create: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput>
}

export type splCreateManyEmployee_spl_approval2ToemployeeInputEnvelope = {
  data: Prisma.splCreateManyEmployee_spl_approval2ToemployeeInput | Prisma.splCreateManyEmployee_spl_approval2ToemployeeInput[]
  skipDuplicates?: boolean
}

export type splUpsertWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput = {
  where: Prisma.splWhereUniqueInput
  update: Prisma.XOR<Prisma.splUpdateWithoutEmployee_spl_approval1ToemployeeInput, Prisma.splUncheckedUpdateWithoutEmployee_spl_approval1ToemployeeInput>
  create: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval1ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval1ToemployeeInput>
}

export type splUpdateWithWhereUniqueWithoutEmployee_spl_approval1ToemployeeInput = {
  where: Prisma.splWhereUniqueInput
  data: Prisma.XOR<Prisma.splUpdateWithoutEmployee_spl_approval1ToemployeeInput, Prisma.splUncheckedUpdateWithoutEmployee_spl_approval1ToemployeeInput>
}

export type splUpdateManyWithWhereWithoutEmployee_spl_approval1ToemployeeInput = {
  where: Prisma.splScalarWhereInput
  data: Prisma.XOR<Prisma.splUpdateManyMutationInput, Prisma.splUncheckedUpdateManyWithoutEmployee_spl_approval1ToemployeeInput>
}

export type splScalarWhereInput = {
  AND?: Prisma.splScalarWhereInput | Prisma.splScalarWhereInput[]
  OR?: Prisma.splScalarWhereInput[]
  NOT?: Prisma.splScalarWhereInput | Prisma.splScalarWhereInput[]
  spl_id?: Prisma.StringFilter<"spl"> | string
  purpose?: Prisma.StringFilter<"spl"> | string
  dept?: Prisma.StringNullableFilter<"spl"> | string | null
  est_start?: Prisma.DateTimeFilter<"spl"> | Date | string
  est_end?: Prisma.DateTimeFilter<"spl"> | Date | string
  status1?: Prisma.Enumspl_status1Filter<"spl"> | $Enums.spl_status1
  approval1?: Prisma.StringNullableFilter<"spl"> | string | null
  status2?: Prisma.Enumspl_status2Filter<"spl"> | $Enums.spl_status2
  approval2?: Prisma.StringNullableFilter<"spl"> | string | null
  createdAt?: Prisma.DateTimeFilter<"spl"> | Date | string
}

export type splUpsertWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput = {
  where: Prisma.splWhereUniqueInput
  update: Prisma.XOR<Prisma.splUpdateWithoutEmployee_spl_approval2ToemployeeInput, Prisma.splUncheckedUpdateWithoutEmployee_spl_approval2ToemployeeInput>
  create: Prisma.XOR<Prisma.splCreateWithoutEmployee_spl_approval2ToemployeeInput, Prisma.splUncheckedCreateWithoutEmployee_spl_approval2ToemployeeInput>
}

export type splUpdateWithWhereUniqueWithoutEmployee_spl_approval2ToemployeeInput = {
  where: Prisma.splWhereUniqueInput
  data: Prisma.XOR<Prisma.splUpdateWithoutEmployee_spl_approval2ToemployeeInput, Prisma.splUncheckedUpdateWithoutEmployee_spl_approval2ToemployeeInput>
}

export type splUpdateManyWithWhereWithoutEmployee_spl_approval2ToemployeeInput = {
  where: Prisma.splScalarWhereInput
  data: Prisma.XOR<Prisma.splUpdateManyMutationInput, Prisma.splUncheckedUpdateManyWithoutEmployee_spl_approval2ToemployeeInput>
}

export type splCreateWithoutSpl_detailInput = {
  spl_id: string
  purpose: string
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  status2?: $Enums.spl_status2
  createdAt?: Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval1ToemployeeInput
  employee_spl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval2ToemployeeInput
  dept_spl_deptTodept?: Prisma.deptCreateNestedOneWithoutSpl_spl_deptTodeptInput
  srl?: Prisma.srlCreateNestedManyWithoutSplInput
}

export type splUncheckedCreateWithoutSpl_detailInput = {
  spl_id: string
  purpose: string
  dept?: string | null
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  approval1?: string | null
  status2?: $Enums.spl_status2
  approval2?: string | null
  createdAt?: Date | string
  srl?: Prisma.srlUncheckedCreateNestedManyWithoutSplInput
}

export type splCreateOrConnectWithoutSpl_detailInput = {
  where: Prisma.splWhereUniqueInput
  create: Prisma.XOR<Prisma.splCreateWithoutSpl_detailInput, Prisma.splUncheckedCreateWithoutSpl_detailInput>
}

export type splUpsertWithoutSpl_detailInput = {
  update: Prisma.XOR<Prisma.splUpdateWithoutSpl_detailInput, Prisma.splUncheckedUpdateWithoutSpl_detailInput>
  create: Prisma.XOR<Prisma.splCreateWithoutSpl_detailInput, Prisma.splUncheckedCreateWithoutSpl_detailInput>
  where?: Prisma.splWhereInput
}

export type splUpdateToOneWithWhereWithoutSpl_detailInput = {
  where?: Prisma.splWhereInput
  data: Prisma.XOR<Prisma.splUpdateWithoutSpl_detailInput, Prisma.splUncheckedUpdateWithoutSpl_detailInput>
}

export type splUpdateWithoutSpl_detailInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval1ToemployeeNestedInput
  employee_spl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval2ToemployeeNestedInput
  dept_spl_deptTodept?: Prisma.deptUpdateOneWithoutSpl_spl_deptTodeptNestedInput
  srl?: Prisma.srlUpdateManyWithoutSplNestedInput
}

export type splUncheckedUpdateWithoutSpl_detailInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  dept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  srl?: Prisma.srlUncheckedUpdateManyWithoutSplNestedInput
}

export type splCreateWithoutDept_spl_deptTodeptInput = {
  spl_id: string
  purpose: string
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  status2?: $Enums.spl_status2
  createdAt?: Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval1ToemployeeInput
  employee_spl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval2ToemployeeInput
  spl_detail?: Prisma.spl_detailCreateNestedManyWithoutSplInput
  srl?: Prisma.srlCreateNestedManyWithoutSplInput
}

export type splUncheckedCreateWithoutDept_spl_deptTodeptInput = {
  spl_id: string
  purpose: string
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  approval1?: string | null
  status2?: $Enums.spl_status2
  approval2?: string | null
  createdAt?: Date | string
  spl_detail?: Prisma.spl_detailUncheckedCreateNestedManyWithoutSplInput
  srl?: Prisma.srlUncheckedCreateNestedManyWithoutSplInput
}

export type splCreateOrConnectWithoutDept_spl_deptTodeptInput = {
  where: Prisma.splWhereUniqueInput
  create: Prisma.XOR<Prisma.splCreateWithoutDept_spl_deptTodeptInput, Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput>
}

export type splCreateManyDept_spl_deptTodeptInputEnvelope = {
  data: Prisma.splCreateManyDept_spl_deptTodeptInput | Prisma.splCreateManyDept_spl_deptTodeptInput[]
  skipDuplicates?: boolean
}

export type splUpsertWithWhereUniqueWithoutDept_spl_deptTodeptInput = {
  where: Prisma.splWhereUniqueInput
  update: Prisma.XOR<Prisma.splUpdateWithoutDept_spl_deptTodeptInput, Prisma.splUncheckedUpdateWithoutDept_spl_deptTodeptInput>
  create: Prisma.XOR<Prisma.splCreateWithoutDept_spl_deptTodeptInput, Prisma.splUncheckedCreateWithoutDept_spl_deptTodeptInput>
}

export type splUpdateWithWhereUniqueWithoutDept_spl_deptTodeptInput = {
  where: Prisma.splWhereUniqueInput
  data: Prisma.XOR<Prisma.splUpdateWithoutDept_spl_deptTodeptInput, Prisma.splUncheckedUpdateWithoutDept_spl_deptTodeptInput>
}

export type splUpdateManyWithWhereWithoutDept_spl_deptTodeptInput = {
  where: Prisma.splScalarWhereInput
  data: Prisma.XOR<Prisma.splUpdateManyMutationInput, Prisma.splUncheckedUpdateManyWithoutDept_spl_deptTodeptInput>
}

export type splCreateWithoutSrlInput = {
  spl_id: string
  purpose: string
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  status2?: $Enums.spl_status2
  createdAt?: Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval1ToemployeeInput
  employee_spl_approval2Toemployee?: Prisma.employeeCreateNestedOneWithoutSpl_spl_approval2ToemployeeInput
  dept_spl_deptTodept?: Prisma.deptCreateNestedOneWithoutSpl_spl_deptTodeptInput
  spl_detail?: Prisma.spl_detailCreateNestedManyWithoutSplInput
}

export type splUncheckedCreateWithoutSrlInput = {
  spl_id: string
  purpose: string
  dept?: string | null
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  approval1?: string | null
  status2?: $Enums.spl_status2
  approval2?: string | null
  createdAt?: Date | string
  spl_detail?: Prisma.spl_detailUncheckedCreateNestedManyWithoutSplInput
}

export type splCreateOrConnectWithoutSrlInput = {
  where: Prisma.splWhereUniqueInput
  create: Prisma.XOR<Prisma.splCreateWithoutSrlInput, Prisma.splUncheckedCreateWithoutSrlInput>
}

export type splUpsertWithoutSrlInput = {
  update: Prisma.XOR<Prisma.splUpdateWithoutSrlInput, Prisma.splUncheckedUpdateWithoutSrlInput>
  create: Prisma.XOR<Prisma.splCreateWithoutSrlInput, Prisma.splUncheckedCreateWithoutSrlInput>
  where?: Prisma.splWhereInput
}

export type splUpdateToOneWithWhereWithoutSrlInput = {
  where?: Prisma.splWhereInput
  data: Prisma.XOR<Prisma.splUpdateWithoutSrlInput, Prisma.splUncheckedUpdateWithoutSrlInput>
}

export type splUpdateWithoutSrlInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval1ToemployeeNestedInput
  employee_spl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval2ToemployeeNestedInput
  dept_spl_deptTodept?: Prisma.deptUpdateOneWithoutSpl_spl_deptTodeptNestedInput
  spl_detail?: Prisma.spl_detailUpdateManyWithoutSplNestedInput
}

export type splUncheckedUpdateWithoutSrlInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  dept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  spl_detail?: Prisma.spl_detailUncheckedUpdateManyWithoutSplNestedInput
}

export type splCreateManyEmployee_spl_approval1ToemployeeInput = {
  spl_id: string
  purpose: string
  dept?: string | null
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  status2?: $Enums.spl_status2
  approval2?: string | null
  createdAt?: Date | string
}

export type splCreateManyEmployee_spl_approval2ToemployeeInput = {
  spl_id: string
  purpose: string
  dept?: string | null
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  approval1?: string | null
  status2?: $Enums.spl_status2
  createdAt?: Date | string
}

export type splUpdateWithoutEmployee_spl_approval1ToemployeeInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_spl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval2ToemployeeNestedInput
  dept_spl_deptTodept?: Prisma.deptUpdateOneWithoutSpl_spl_deptTodeptNestedInput
  spl_detail?: Prisma.spl_detailUpdateManyWithoutSplNestedInput
  srl?: Prisma.srlUpdateManyWithoutSplNestedInput
}

export type splUncheckedUpdateWithoutEmployee_spl_approval1ToemployeeInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  dept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  spl_detail?: Prisma.spl_detailUncheckedUpdateManyWithoutSplNestedInput
  srl?: Prisma.srlUncheckedUpdateManyWithoutSplNestedInput
}

export type splUncheckedUpdateManyWithoutEmployee_spl_approval1ToemployeeInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  dept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type splUpdateWithoutEmployee_spl_approval2ToemployeeInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval1ToemployeeNestedInput
  dept_spl_deptTodept?: Prisma.deptUpdateOneWithoutSpl_spl_deptTodeptNestedInput
  spl_detail?: Prisma.spl_detailUpdateManyWithoutSplNestedInput
  srl?: Prisma.srlUpdateManyWithoutSplNestedInput
}

export type splUncheckedUpdateWithoutEmployee_spl_approval2ToemployeeInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  dept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  spl_detail?: Prisma.spl_detailUncheckedUpdateManyWithoutSplNestedInput
  srl?: Prisma.srlUncheckedUpdateManyWithoutSplNestedInput
}

export type splUncheckedUpdateManyWithoutEmployee_spl_approval2ToemployeeInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  dept?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type splCreateManyDept_spl_deptTodeptInput = {
  spl_id: string
  purpose: string
  est_start: Date | string
  est_end: Date | string
  status1?: $Enums.spl_status1
  approval1?: string | null
  status2?: $Enums.spl_status2
  approval2?: string | null
  createdAt?: Date | string
}

export type splUpdateWithoutDept_spl_deptTodeptInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  employee_spl_approval1Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval1ToemployeeNestedInput
  employee_spl_approval2Toemployee?: Prisma.employeeUpdateOneWithoutSpl_spl_approval2ToemployeeNestedInput
  spl_detail?: Prisma.spl_detailUpdateManyWithoutSplNestedInput
  srl?: Prisma.srlUpdateManyWithoutSplNestedInput
}

export type splUncheckedUpdateWithoutDept_spl_deptTodeptInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  spl_detail?: Prisma.spl_detailUncheckedUpdateManyWithoutSplNestedInput
  srl?: Prisma.srlUncheckedUpdateManyWithoutSplNestedInput
}

export type splUncheckedUpdateManyWithoutDept_spl_deptTodeptInput = {
  spl_id?: Prisma.StringFieldUpdateOperationsInput | string
  purpose?: Prisma.StringFieldUpdateOperationsInput | string
  est_start?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  est_end?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  status1?: Prisma.Enumspl_status1FieldUpdateOperationsInput | $Enums.spl_status1
  approval1?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status2?: Prisma.Enumspl_status2FieldUpdateOperationsInput | $Enums.spl_status2
  approval2?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type SplCountOutputType
 */

export type SplCountOutputType = {
  spl_detail: number
  srl: number
}

export type SplCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  spl_detail?: boolean | SplCountOutputTypeCountSpl_detailArgs
  srl?: boolean | SplCountOutputTypeCountSrlArgs
}

/**
 * SplCountOutputType without action
 */
export type SplCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SplCountOutputType
   */
  select?: Prisma.SplCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SplCountOutputType without action
 */
export type SplCountOutputTypeCountSpl_detailArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.spl_detailWhereInput
}

/**
 * SplCountOutputType without action
 */
export type SplCountOutputTypeCountSrlArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.srlWhereInput
}


export type splSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  spl_id?: boolean
  purpose?: boolean
  dept?: boolean
  est_start?: boolean
  est_end?: boolean
  status1?: boolean
  approval1?: boolean
  status2?: boolean
  approval2?: boolean
  createdAt?: boolean
  employee_spl_approval1Toemployee?: boolean | Prisma.spl$employee_spl_approval1ToemployeeArgs<ExtArgs>
  employee_spl_approval2Toemployee?: boolean | Prisma.spl$employee_spl_approval2ToemployeeArgs<ExtArgs>
  dept_spl_deptTodept?: boolean | Prisma.spl$dept_spl_deptTodeptArgs<ExtArgs>
  spl_detail?: boolean | Prisma.spl$spl_detailArgs<ExtArgs>
  srl?: boolean | Prisma.spl$srlArgs<ExtArgs>
  _count?: boolean | Prisma.SplCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["spl"]>



export type splSelectScalar = {
  spl_id?: boolean
  purpose?: boolean
  dept?: boolean
  est_start?: boolean
  est_end?: boolean
  status1?: boolean
  approval1?: boolean
  status2?: boolean
  approval2?: boolean
  createdAt?: boolean
}

export type splOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"spl_id" | "purpose" | "dept" | "est_start" | "est_end" | "status1" | "approval1" | "status2" | "approval2" | "createdAt", ExtArgs["result"]["spl"]>
export type splInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  employee_spl_approval1Toemployee?: boolean | Prisma.spl$employee_spl_approval1ToemployeeArgs<ExtArgs>
  employee_spl_approval2Toemployee?: boolean | Prisma.spl$employee_spl_approval2ToemployeeArgs<ExtArgs>
  dept_spl_deptTodept?: boolean | Prisma.spl$dept_spl_deptTodeptArgs<ExtArgs>
  spl_detail?: boolean | Prisma.spl$spl_detailArgs<ExtArgs>
  srl?: boolean | Prisma.spl$srlArgs<ExtArgs>
  _count?: boolean | Prisma.SplCountOutputTypeDefaultArgs<ExtArgs>
}

export type $splPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "spl"
  objects: {
    employee_spl_approval1Toemployee: Prisma.$employeePayload<ExtArgs> | null
    employee_spl_approval2Toemployee: Prisma.$employeePayload<ExtArgs> | null
    dept_spl_deptTodept: Prisma.$deptPayload<ExtArgs> | null
    spl_detail: Prisma.$spl_detailPayload<ExtArgs>[]
    srl: Prisma.$srlPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    spl_id: string
    purpose: string
    dept: string | null
    est_start: Date
    est_end: Date
    status1: $Enums.spl_status1
    approval1: string | null
    status2: $Enums.spl_status2
    approval2: string | null
    createdAt: Date
  }, ExtArgs["result"]["spl"]>
  composites: {}
}

export type splGetPayload<S extends boolean | null | undefined | splDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$splPayload, S>

export type splCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<splFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SplCountAggregateInputType | true
  }

export interface splDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['spl'], meta: { name: 'spl' } }
  /**
   * Find zero or one Spl that matches the filter.
   * @param {splFindUniqueArgs} args - Arguments to find a Spl
   * @example
   * // Get one Spl
   * const spl = await prisma.spl.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends splFindUniqueArgs>(args: Prisma.SelectSubset<T, splFindUniqueArgs<ExtArgs>>): Prisma.Prisma__splClient<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Spl that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {splFindUniqueOrThrowArgs} args - Arguments to find a Spl
   * @example
   * // Get one Spl
   * const spl = await prisma.spl.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends splFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, splFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__splClient<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Spl that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {splFindFirstArgs} args - Arguments to find a Spl
   * @example
   * // Get one Spl
   * const spl = await prisma.spl.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends splFindFirstArgs>(args?: Prisma.SelectSubset<T, splFindFirstArgs<ExtArgs>>): Prisma.Prisma__splClient<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Spl that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {splFindFirstOrThrowArgs} args - Arguments to find a Spl
   * @example
   * // Get one Spl
   * const spl = await prisma.spl.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends splFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, splFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__splClient<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Spls that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {splFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Spls
   * const spls = await prisma.spl.findMany()
   * 
   * // Get first 10 Spls
   * const spls = await prisma.spl.findMany({ take: 10 })
   * 
   * // Only select the `spl_id`
   * const splWithSpl_idOnly = await prisma.spl.findMany({ select: { spl_id: true } })
   * 
   */
  findMany<T extends splFindManyArgs>(args?: Prisma.SelectSubset<T, splFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Spl.
   * @param {splCreateArgs} args - Arguments to create a Spl.
   * @example
   * // Create one Spl
   * const Spl = await prisma.spl.create({
   *   data: {
   *     // ... data to create a Spl
   *   }
   * })
   * 
   */
  create<T extends splCreateArgs>(args: Prisma.SelectSubset<T, splCreateArgs<ExtArgs>>): Prisma.Prisma__splClient<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Spls.
   * @param {splCreateManyArgs} args - Arguments to create many Spls.
   * @example
   * // Create many Spls
   * const spl = await prisma.spl.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends splCreateManyArgs>(args?: Prisma.SelectSubset<T, splCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Delete a Spl.
   * @param {splDeleteArgs} args - Arguments to delete one Spl.
   * @example
   * // Delete one Spl
   * const Spl = await prisma.spl.delete({
   *   where: {
   *     // ... filter to delete one Spl
   *   }
   * })
   * 
   */
  delete<T extends splDeleteArgs>(args: Prisma.SelectSubset<T, splDeleteArgs<ExtArgs>>): Prisma.Prisma__splClient<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Spl.
   * @param {splUpdateArgs} args - Arguments to update one Spl.
   * @example
   * // Update one Spl
   * const spl = await prisma.spl.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends splUpdateArgs>(args: Prisma.SelectSubset<T, splUpdateArgs<ExtArgs>>): Prisma.Prisma__splClient<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Spls.
   * @param {splDeleteManyArgs} args - Arguments to filter Spls to delete.
   * @example
   * // Delete a few Spls
   * const { count } = await prisma.spl.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends splDeleteManyArgs>(args?: Prisma.SelectSubset<T, splDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Spls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {splUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Spls
   * const spl = await prisma.spl.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends splUpdateManyArgs>(args: Prisma.SelectSubset<T, splUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create or update one Spl.
   * @param {splUpsertArgs} args - Arguments to update or create a Spl.
   * @example
   * // Update or create a Spl
   * const spl = await prisma.spl.upsert({
   *   create: {
   *     // ... data to create a Spl
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Spl we want to update
   *   }
   * })
   */
  upsert<T extends splUpsertArgs>(args: Prisma.SelectSubset<T, splUpsertArgs<ExtArgs>>): Prisma.Prisma__splClient<runtime.Types.Result.GetResult<Prisma.$splPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Spls.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {splCountArgs} args - Arguments to filter Spls to count.
   * @example
   * // Count the number of Spls
   * const count = await prisma.spl.count({
   *   where: {
   *     // ... the filter for the Spls we want to count
   *   }
   * })
  **/
  count<T extends splCountArgs>(
    args?: Prisma.Subset<T, splCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SplCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Spl.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SplAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SplAggregateArgs>(args: Prisma.Subset<T, SplAggregateArgs>): Prisma.PrismaPromise<GetSplAggregateType<T>>

  /**
   * Group by Spl.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {splGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends splGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: splGroupByArgs['orderBy'] }
      : { orderBy?: splGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, splGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSplGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the spl model
 */
readonly fields: splFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for spl.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__splClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  employee_spl_approval1Toemployee<T extends Prisma.spl$employee_spl_approval1ToemployeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.spl$employee_spl_approval1ToemployeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  employee_spl_approval2Toemployee<T extends Prisma.spl$employee_spl_approval2ToemployeeArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.spl$employee_spl_approval2ToemployeeArgs<ExtArgs>>): Prisma.Prisma__employeeClient<runtime.Types.Result.GetResult<Prisma.$employeePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  dept_spl_deptTodept<T extends Prisma.spl$dept_spl_deptTodeptArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.spl$dept_spl_deptTodeptArgs<ExtArgs>>): Prisma.Prisma__deptClient<runtime.Types.Result.GetResult<Prisma.$deptPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  spl_detail<T extends Prisma.spl$spl_detailArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.spl$spl_detailArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$spl_detailPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  srl<T extends Prisma.spl$srlArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.spl$srlArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$srlPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the spl model
 */
export interface splFieldRefs {
  readonly spl_id: Prisma.FieldRef<"spl", 'String'>
  readonly purpose: Prisma.FieldRef<"spl", 'String'>
  readonly dept: Prisma.FieldRef<"spl", 'String'>
  readonly est_start: Prisma.FieldRef<"spl", 'DateTime'>
  readonly est_end: Prisma.FieldRef<"spl", 'DateTime'>
  readonly status1: Prisma.FieldRef<"spl", 'spl_status1'>
  readonly approval1: Prisma.FieldRef<"spl", 'String'>
  readonly status2: Prisma.FieldRef<"spl", 'spl_status2'>
  readonly approval2: Prisma.FieldRef<"spl", 'String'>
  readonly createdAt: Prisma.FieldRef<"spl", 'DateTime'>
}
    

// Custom InputTypes
/**
 * spl findUnique
 */
export type splFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  /**
   * Filter, which spl to fetch.
   */
  where: Prisma.splWhereUniqueInput
}

/**
 * spl findUniqueOrThrow
 */
export type splFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  /**
   * Filter, which spl to fetch.
   */
  where: Prisma.splWhereUniqueInput
}

/**
 * spl findFirst
 */
export type splFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  /**
   * Filter, which spl to fetch.
   */
  where?: Prisma.splWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of spls to fetch.
   */
  orderBy?: Prisma.splOrderByWithRelationInput | Prisma.splOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for spls.
   */
  cursor?: Prisma.splWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` spls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` spls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of spls.
   */
  distinct?: Prisma.SplScalarFieldEnum | Prisma.SplScalarFieldEnum[]
}

/**
 * spl findFirstOrThrow
 */
export type splFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  /**
   * Filter, which spl to fetch.
   */
  where?: Prisma.splWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of spls to fetch.
   */
  orderBy?: Prisma.splOrderByWithRelationInput | Prisma.splOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for spls.
   */
  cursor?: Prisma.splWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` spls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` spls.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of spls.
   */
  distinct?: Prisma.SplScalarFieldEnum | Prisma.SplScalarFieldEnum[]
}

/**
 * spl findMany
 */
export type splFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  /**
   * Filter, which spls to fetch.
   */
  where?: Prisma.splWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of spls to fetch.
   */
  orderBy?: Prisma.splOrderByWithRelationInput | Prisma.splOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing spls.
   */
  cursor?: Prisma.splWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` spls from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` spls.
   */
  skip?: number
  distinct?: Prisma.SplScalarFieldEnum | Prisma.SplScalarFieldEnum[]
}

/**
 * spl create
 */
export type splCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  /**
   * The data needed to create a spl.
   */
  data: Prisma.XOR<Prisma.splCreateInput, Prisma.splUncheckedCreateInput>
}

/**
 * spl createMany
 */
export type splCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many spls.
   */
  data: Prisma.splCreateManyInput | Prisma.splCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * spl update
 */
export type splUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  /**
   * The data needed to update a spl.
   */
  data: Prisma.XOR<Prisma.splUpdateInput, Prisma.splUncheckedUpdateInput>
  /**
   * Choose, which spl to update.
   */
  where: Prisma.splWhereUniqueInput
}

/**
 * spl updateMany
 */
export type splUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update spls.
   */
  data: Prisma.XOR<Prisma.splUpdateManyMutationInput, Prisma.splUncheckedUpdateManyInput>
  /**
   * Filter which spls to update
   */
  where?: Prisma.splWhereInput
  /**
   * Limit how many spls to update.
   */
  limit?: number
}

/**
 * spl upsert
 */
export type splUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  /**
   * The filter to search for the spl to update in case it exists.
   */
  where: Prisma.splWhereUniqueInput
  /**
   * In case the spl found by the `where` argument doesn't exist, create a new spl with this data.
   */
  create: Prisma.XOR<Prisma.splCreateInput, Prisma.splUncheckedCreateInput>
  /**
   * In case the spl was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.splUpdateInput, Prisma.splUncheckedUpdateInput>
}

/**
 * spl delete
 */
export type splDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
  /**
   * Filter which spl to delete.
   */
  where: Prisma.splWhereUniqueInput
}

/**
 * spl deleteMany
 */
export type splDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which spls to delete
   */
  where?: Prisma.splWhereInput
  /**
   * Limit how many spls to delete.
   */
  limit?: number
}

/**
 * spl.employee_spl_approval1Toemployee
 */
export type spl$employee_spl_approval1ToemployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * spl.employee_spl_approval2Toemployee
 */
export type spl$employee_spl_approval2ToemployeeArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the employee
   */
  select?: Prisma.employeeSelect<ExtArgs> | null
  /**
   * Omit specific fields from the employee
   */
  omit?: Prisma.employeeOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.employeeInclude<ExtArgs> | null
  where?: Prisma.employeeWhereInput
}

/**
 * spl.dept_spl_deptTodept
 */
export type spl$dept_spl_deptTodeptArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the dept
   */
  select?: Prisma.deptSelect<ExtArgs> | null
  /**
   * Omit specific fields from the dept
   */
  omit?: Prisma.deptOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.deptInclude<ExtArgs> | null
  where?: Prisma.deptWhereInput
}

/**
 * spl.spl_detail
 */
export type spl$spl_detailArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl_detail
   */
  select?: Prisma.spl_detailSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl_detail
   */
  omit?: Prisma.spl_detailOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.spl_detailInclude<ExtArgs> | null
  where?: Prisma.spl_detailWhereInput
  orderBy?: Prisma.spl_detailOrderByWithRelationInput | Prisma.spl_detailOrderByWithRelationInput[]
  cursor?: Prisma.spl_detailWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.Spl_detailScalarFieldEnum | Prisma.Spl_detailScalarFieldEnum[]
}

/**
 * spl.srl
 */
export type spl$srlArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the srl
   */
  select?: Prisma.srlSelect<ExtArgs> | null
  /**
   * Omit specific fields from the srl
   */
  omit?: Prisma.srlOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.srlInclude<ExtArgs> | null
  where?: Prisma.srlWhereInput
  orderBy?: Prisma.srlOrderByWithRelationInput | Prisma.srlOrderByWithRelationInput[]
  cursor?: Prisma.srlWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.SrlScalarFieldEnum | Prisma.SrlScalarFieldEnum[]
}

/**
 * spl without action
 */
export type splDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the spl
   */
  select?: Prisma.splSelect<ExtArgs> | null
  /**
   * Omit specific fields from the spl
   */
  omit?: Prisma.splOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.splInclude<ExtArgs> | null
}
