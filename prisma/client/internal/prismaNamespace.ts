
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 * 
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 * 
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 * 
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective 
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/library"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
export const prismaVersion: PrismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  employee: 'employee',
  profile: 'profile',
  check_io: 'check_io',
  attendance: 'attendance',
  temp_check_io: 'temp_check_io',
  calendar: 'calendar',
  setting: 'setting',
  spl: 'spl',
  spl_detail: 'spl_detail',
  dept: 'dept',
  srl: 'srl',
  srl_detail: 'srl_detail',
  cuti: 'cuti',
  sppd: 'sppd',
  sppd_detail: 'sppd_detail',
  skpd: 'skpd',
  ijin: 'ijin'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<ClientOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "employee" | "profile" | "check_io" | "attendance" | "temp_check_io" | "calendar" | "setting" | "spl" | "spl_detail" | "dept" | "srl" | "srl_detail" | "cuti" | "sppd" | "sppd_detail" | "skpd" | "ijin"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    employee: {
      payload: Prisma.$employeePayload<ExtArgs>
      fields: Prisma.employeeFieldRefs
      operations: {
        findUnique: {
          args: Prisma.employeeFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.employeeFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        findFirst: {
          args: Prisma.employeeFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.employeeFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        findMany: {
          args: Prisma.employeeFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>[]
        }
        create: {
          args: Prisma.employeeCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        createMany: {
          args: Prisma.employeeCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.employeeDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        update: {
          args: Prisma.employeeUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        deleteMany: {
          args: Prisma.employeeDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.employeeUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.employeeUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$employeePayload>
        }
        aggregate: {
          args: Prisma.EmployeeAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateEmployee>
        }
        groupBy: {
          args: Prisma.employeeGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmployeeGroupByOutputType>[]
        }
        count: {
          args: Prisma.employeeCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.EmployeeCountAggregateOutputType> | number
        }
      }
    }
    profile: {
      payload: Prisma.$profilePayload<ExtArgs>
      fields: Prisma.profileFieldRefs
      operations: {
        findUnique: {
          args: Prisma.profileFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$profilePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.profileFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$profilePayload>
        }
        findFirst: {
          args: Prisma.profileFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$profilePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.profileFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$profilePayload>
        }
        findMany: {
          args: Prisma.profileFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$profilePayload>[]
        }
        create: {
          args: Prisma.profileCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$profilePayload>
        }
        createMany: {
          args: Prisma.profileCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.profileDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$profilePayload>
        }
        update: {
          args: Prisma.profileUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$profilePayload>
        }
        deleteMany: {
          args: Prisma.profileDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.profileUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.profileUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$profilePayload>
        }
        aggregate: {
          args: Prisma.ProfileAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateProfile>
        }
        groupBy: {
          args: Prisma.profileGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileGroupByOutputType>[]
        }
        count: {
          args: Prisma.profileCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ProfileCountAggregateOutputType> | number
        }
      }
    }
    check_io: {
      payload: Prisma.$check_ioPayload<ExtArgs>
      fields: Prisma.check_ioFieldRefs
      operations: {
        findUnique: {
          args: Prisma.check_ioFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$check_ioPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.check_ioFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$check_ioPayload>
        }
        findFirst: {
          args: Prisma.check_ioFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$check_ioPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.check_ioFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$check_ioPayload>
        }
        findMany: {
          args: Prisma.check_ioFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$check_ioPayload>[]
        }
        create: {
          args: Prisma.check_ioCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$check_ioPayload>
        }
        createMany: {
          args: Prisma.check_ioCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.check_ioDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$check_ioPayload>
        }
        update: {
          args: Prisma.check_ioUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$check_ioPayload>
        }
        deleteMany: {
          args: Prisma.check_ioDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.check_ioUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.check_ioUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$check_ioPayload>
        }
        aggregate: {
          args: Prisma.Check_ioAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCheck_io>
        }
        groupBy: {
          args: Prisma.check_ioGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Check_ioGroupByOutputType>[]
        }
        count: {
          args: Prisma.check_ioCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Check_ioCountAggregateOutputType> | number
        }
      }
    }
    attendance: {
      payload: Prisma.$attendancePayload<ExtArgs>
      fields: Prisma.attendanceFieldRefs
      operations: {
        findUnique: {
          args: Prisma.attendanceFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$attendancePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.attendanceFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$attendancePayload>
        }
        findFirst: {
          args: Prisma.attendanceFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$attendancePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.attendanceFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$attendancePayload>
        }
        findMany: {
          args: Prisma.attendanceFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$attendancePayload>[]
        }
        create: {
          args: Prisma.attendanceCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$attendancePayload>
        }
        createMany: {
          args: Prisma.attendanceCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.attendanceDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$attendancePayload>
        }
        update: {
          args: Prisma.attendanceUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$attendancePayload>
        }
        deleteMany: {
          args: Prisma.attendanceDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.attendanceUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.attendanceUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$attendancePayload>
        }
        aggregate: {
          args: Prisma.AttendanceAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateAttendance>
        }
        groupBy: {
          args: Prisma.attendanceGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AttendanceGroupByOutputType>[]
        }
        count: {
          args: Prisma.attendanceCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AttendanceCountAggregateOutputType> | number
        }
      }
    }
    temp_check_io: {
      payload: Prisma.$temp_check_ioPayload<ExtArgs>
      fields: Prisma.temp_check_ioFieldRefs
      operations: {
        findUnique: {
          args: Prisma.temp_check_ioFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$temp_check_ioPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.temp_check_ioFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$temp_check_ioPayload>
        }
        findFirst: {
          args: Prisma.temp_check_ioFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$temp_check_ioPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.temp_check_ioFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$temp_check_ioPayload>
        }
        findMany: {
          args: Prisma.temp_check_ioFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$temp_check_ioPayload>[]
        }
        create: {
          args: Prisma.temp_check_ioCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$temp_check_ioPayload>
        }
        createMany: {
          args: Prisma.temp_check_ioCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.temp_check_ioDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$temp_check_ioPayload>
        }
        update: {
          args: Prisma.temp_check_ioUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$temp_check_ioPayload>
        }
        deleteMany: {
          args: Prisma.temp_check_ioDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.temp_check_ioUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.temp_check_ioUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$temp_check_ioPayload>
        }
        aggregate: {
          args: Prisma.Temp_check_ioAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateTemp_check_io>
        }
        groupBy: {
          args: Prisma.temp_check_ioGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Temp_check_ioGroupByOutputType>[]
        }
        count: {
          args: Prisma.temp_check_ioCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Temp_check_ioCountAggregateOutputType> | number
        }
      }
    }
    calendar: {
      payload: Prisma.$calendarPayload<ExtArgs>
      fields: Prisma.calendarFieldRefs
      operations: {
        findUnique: {
          args: Prisma.calendarFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$calendarPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.calendarFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$calendarPayload>
        }
        findFirst: {
          args: Prisma.calendarFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$calendarPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.calendarFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$calendarPayload>
        }
        findMany: {
          args: Prisma.calendarFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$calendarPayload>[]
        }
        create: {
          args: Prisma.calendarCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$calendarPayload>
        }
        createMany: {
          args: Prisma.calendarCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.calendarDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$calendarPayload>
        }
        update: {
          args: Prisma.calendarUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$calendarPayload>
        }
        deleteMany: {
          args: Prisma.calendarDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.calendarUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.calendarUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$calendarPayload>
        }
        aggregate: {
          args: Prisma.CalendarAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCalendar>
        }
        groupBy: {
          args: Prisma.calendarGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CalendarGroupByOutputType>[]
        }
        count: {
          args: Prisma.calendarCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CalendarCountAggregateOutputType> | number
        }
      }
    }
    setting: {
      payload: Prisma.$settingPayload<ExtArgs>
      fields: Prisma.settingFieldRefs
      operations: {
        findUnique: {
          args: Prisma.settingFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settingPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.settingFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settingPayload>
        }
        findFirst: {
          args: Prisma.settingFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settingPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.settingFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settingPayload>
        }
        findMany: {
          args: Prisma.settingFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settingPayload>[]
        }
        create: {
          args: Prisma.settingCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settingPayload>
        }
        createMany: {
          args: Prisma.settingCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.settingDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settingPayload>
        }
        update: {
          args: Prisma.settingUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settingPayload>
        }
        deleteMany: {
          args: Prisma.settingDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.settingUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.settingUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$settingPayload>
        }
        aggregate: {
          args: Prisma.SettingAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSetting>
        }
        groupBy: {
          args: Prisma.settingGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SettingGroupByOutputType>[]
        }
        count: {
          args: Prisma.settingCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SettingCountAggregateOutputType> | number
        }
      }
    }
    spl: {
      payload: Prisma.$splPayload<ExtArgs>
      fields: Prisma.splFieldRefs
      operations: {
        findUnique: {
          args: Prisma.splFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$splPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.splFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$splPayload>
        }
        findFirst: {
          args: Prisma.splFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$splPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.splFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$splPayload>
        }
        findMany: {
          args: Prisma.splFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$splPayload>[]
        }
        create: {
          args: Prisma.splCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$splPayload>
        }
        createMany: {
          args: Prisma.splCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.splDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$splPayload>
        }
        update: {
          args: Prisma.splUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$splPayload>
        }
        deleteMany: {
          args: Prisma.splDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.splUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.splUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$splPayload>
        }
        aggregate: {
          args: Prisma.SplAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSpl>
        }
        groupBy: {
          args: Prisma.splGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SplGroupByOutputType>[]
        }
        count: {
          args: Prisma.splCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SplCountAggregateOutputType> | number
        }
      }
    }
    spl_detail: {
      payload: Prisma.$spl_detailPayload<ExtArgs>
      fields: Prisma.spl_detailFieldRefs
      operations: {
        findUnique: {
          args: Prisma.spl_detailFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$spl_detailPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.spl_detailFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$spl_detailPayload>
        }
        findFirst: {
          args: Prisma.spl_detailFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$spl_detailPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.spl_detailFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$spl_detailPayload>
        }
        findMany: {
          args: Prisma.spl_detailFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$spl_detailPayload>[]
        }
        create: {
          args: Prisma.spl_detailCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$spl_detailPayload>
        }
        createMany: {
          args: Prisma.spl_detailCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.spl_detailDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$spl_detailPayload>
        }
        update: {
          args: Prisma.spl_detailUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$spl_detailPayload>
        }
        deleteMany: {
          args: Prisma.spl_detailDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.spl_detailUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.spl_detailUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$spl_detailPayload>
        }
        aggregate: {
          args: Prisma.Spl_detailAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSpl_detail>
        }
        groupBy: {
          args: Prisma.spl_detailGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Spl_detailGroupByOutputType>[]
        }
        count: {
          args: Prisma.spl_detailCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Spl_detailCountAggregateOutputType> | number
        }
      }
    }
    dept: {
      payload: Prisma.$deptPayload<ExtArgs>
      fields: Prisma.deptFieldRefs
      operations: {
        findUnique: {
          args: Prisma.deptFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$deptPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.deptFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$deptPayload>
        }
        findFirst: {
          args: Prisma.deptFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$deptPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.deptFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$deptPayload>
        }
        findMany: {
          args: Prisma.deptFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$deptPayload>[]
        }
        create: {
          args: Prisma.deptCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$deptPayload>
        }
        createMany: {
          args: Prisma.deptCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.deptDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$deptPayload>
        }
        update: {
          args: Prisma.deptUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$deptPayload>
        }
        deleteMany: {
          args: Prisma.deptDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.deptUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.deptUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$deptPayload>
        }
        aggregate: {
          args: Prisma.DeptAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateDept>
        }
        groupBy: {
          args: Prisma.deptGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DeptGroupByOutputType>[]
        }
        count: {
          args: Prisma.deptCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.DeptCountAggregateOutputType> | number
        }
      }
    }
    srl: {
      payload: Prisma.$srlPayload<ExtArgs>
      fields: Prisma.srlFieldRefs
      operations: {
        findUnique: {
          args: Prisma.srlFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srlPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.srlFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srlPayload>
        }
        findFirst: {
          args: Prisma.srlFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srlPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.srlFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srlPayload>
        }
        findMany: {
          args: Prisma.srlFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srlPayload>[]
        }
        create: {
          args: Prisma.srlCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srlPayload>
        }
        createMany: {
          args: Prisma.srlCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.srlDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srlPayload>
        }
        update: {
          args: Prisma.srlUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srlPayload>
        }
        deleteMany: {
          args: Prisma.srlDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.srlUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.srlUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srlPayload>
        }
        aggregate: {
          args: Prisma.SrlAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSrl>
        }
        groupBy: {
          args: Prisma.srlGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SrlGroupByOutputType>[]
        }
        count: {
          args: Prisma.srlCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SrlCountAggregateOutputType> | number
        }
      }
    }
    srl_detail: {
      payload: Prisma.$srl_detailPayload<ExtArgs>
      fields: Prisma.srl_detailFieldRefs
      operations: {
        findUnique: {
          args: Prisma.srl_detailFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srl_detailPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.srl_detailFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srl_detailPayload>
        }
        findFirst: {
          args: Prisma.srl_detailFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srl_detailPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.srl_detailFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srl_detailPayload>
        }
        findMany: {
          args: Prisma.srl_detailFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srl_detailPayload>[]
        }
        create: {
          args: Prisma.srl_detailCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srl_detailPayload>
        }
        createMany: {
          args: Prisma.srl_detailCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.srl_detailDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srl_detailPayload>
        }
        update: {
          args: Prisma.srl_detailUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srl_detailPayload>
        }
        deleteMany: {
          args: Prisma.srl_detailDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.srl_detailUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.srl_detailUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$srl_detailPayload>
        }
        aggregate: {
          args: Prisma.Srl_detailAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSrl_detail>
        }
        groupBy: {
          args: Prisma.srl_detailGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Srl_detailGroupByOutputType>[]
        }
        count: {
          args: Prisma.srl_detailCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Srl_detailCountAggregateOutputType> | number
        }
      }
    }
    cuti: {
      payload: Prisma.$cutiPayload<ExtArgs>
      fields: Prisma.cutiFieldRefs
      operations: {
        findUnique: {
          args: Prisma.cutiFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cutiPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.cutiFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cutiPayload>
        }
        findFirst: {
          args: Prisma.cutiFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cutiPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.cutiFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cutiPayload>
        }
        findMany: {
          args: Prisma.cutiFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cutiPayload>[]
        }
        create: {
          args: Prisma.cutiCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cutiPayload>
        }
        createMany: {
          args: Prisma.cutiCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.cutiDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cutiPayload>
        }
        update: {
          args: Prisma.cutiUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cutiPayload>
        }
        deleteMany: {
          args: Prisma.cutiDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.cutiUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.cutiUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$cutiPayload>
        }
        aggregate: {
          args: Prisma.CutiAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateCuti>
        }
        groupBy: {
          args: Prisma.cutiGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CutiGroupByOutputType>[]
        }
        count: {
          args: Prisma.cutiCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.CutiCountAggregateOutputType> | number
        }
      }
    }
    sppd: {
      payload: Prisma.$sppdPayload<ExtArgs>
      fields: Prisma.sppdFieldRefs
      operations: {
        findUnique: {
          args: Prisma.sppdFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppdPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.sppdFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppdPayload>
        }
        findFirst: {
          args: Prisma.sppdFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppdPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.sppdFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppdPayload>
        }
        findMany: {
          args: Prisma.sppdFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppdPayload>[]
        }
        create: {
          args: Prisma.sppdCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppdPayload>
        }
        createMany: {
          args: Prisma.sppdCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.sppdDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppdPayload>
        }
        update: {
          args: Prisma.sppdUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppdPayload>
        }
        deleteMany: {
          args: Prisma.sppdDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.sppdUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.sppdUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppdPayload>
        }
        aggregate: {
          args: Prisma.SppdAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSppd>
        }
        groupBy: {
          args: Prisma.sppdGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SppdGroupByOutputType>[]
        }
        count: {
          args: Prisma.sppdCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SppdCountAggregateOutputType> | number
        }
      }
    }
    sppd_detail: {
      payload: Prisma.$sppd_detailPayload<ExtArgs>
      fields: Prisma.sppd_detailFieldRefs
      operations: {
        findUnique: {
          args: Prisma.sppd_detailFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppd_detailPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.sppd_detailFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppd_detailPayload>
        }
        findFirst: {
          args: Prisma.sppd_detailFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppd_detailPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.sppd_detailFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppd_detailPayload>
        }
        findMany: {
          args: Prisma.sppd_detailFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppd_detailPayload>[]
        }
        create: {
          args: Prisma.sppd_detailCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppd_detailPayload>
        }
        createMany: {
          args: Prisma.sppd_detailCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.sppd_detailDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppd_detailPayload>
        }
        update: {
          args: Prisma.sppd_detailUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppd_detailPayload>
        }
        deleteMany: {
          args: Prisma.sppd_detailDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.sppd_detailUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.sppd_detailUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$sppd_detailPayload>
        }
        aggregate: {
          args: Prisma.Sppd_detailAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSppd_detail>
        }
        groupBy: {
          args: Prisma.sppd_detailGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Sppd_detailGroupByOutputType>[]
        }
        count: {
          args: Prisma.sppd_detailCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.Sppd_detailCountAggregateOutputType> | number
        }
      }
    }
    skpd: {
      payload: Prisma.$skpdPayload<ExtArgs>
      fields: Prisma.skpdFieldRefs
      operations: {
        findUnique: {
          args: Prisma.skpdFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$skpdPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.skpdFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$skpdPayload>
        }
        findFirst: {
          args: Prisma.skpdFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$skpdPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.skpdFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$skpdPayload>
        }
        findMany: {
          args: Prisma.skpdFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$skpdPayload>[]
        }
        create: {
          args: Prisma.skpdCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$skpdPayload>
        }
        createMany: {
          args: Prisma.skpdCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.skpdDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$skpdPayload>
        }
        update: {
          args: Prisma.skpdUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$skpdPayload>
        }
        deleteMany: {
          args: Prisma.skpdDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.skpdUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.skpdUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$skpdPayload>
        }
        aggregate: {
          args: Prisma.SkpdAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSkpd>
        }
        groupBy: {
          args: Prisma.skpdGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SkpdGroupByOutputType>[]
        }
        count: {
          args: Prisma.skpdCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.SkpdCountAggregateOutputType> | number
        }
      }
    }
    ijin: {
      payload: Prisma.$ijinPayload<ExtArgs>
      fields: Prisma.ijinFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ijinFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ijinPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ijinFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ijinPayload>
        }
        findFirst: {
          args: Prisma.ijinFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ijinPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ijinFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ijinPayload>
        }
        findMany: {
          args: Prisma.ijinFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ijinPayload>[]
        }
        create: {
          args: Prisma.ijinCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ijinPayload>
        }
        createMany: {
          args: Prisma.ijinCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        delete: {
          args: Prisma.ijinDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ijinPayload>
        }
        update: {
          args: Prisma.ijinUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ijinPayload>
        }
        deleteMany: {
          args: Prisma.ijinDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ijinUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        upsert: {
          args: Prisma.ijinUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ijinPayload>
        }
        aggregate: {
          args: Prisma.IjinAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateIjin>
        }
        groupBy: {
          args: Prisma.ijinGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.IjinGroupByOutputType>[]
        }
        count: {
          args: Prisma.ijinCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.IjinCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRawTyped: {
        args: runtime.UnknownTypedSql,
        result: JsonObject
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const EmployeeScalarFieldEnum = {
  payroll: 'payroll',
  user_id_machine: 'user_id_machine',
  profile_id: 'profile_id',
  email: 'email',
  name: 'name',
  password: 'password',
  position: 'position',
  department: 'department',
  location: 'location',
  phone: 'phone',
  overtime: 'overtime',
  workhour: 'workhour',
  start_work: 'start_work',
  approver: 'approver',
  substitute: 'substitute',
  join_date: 'join_date',
  signature: 'signature',
  user_security: 'user_security',
  hostname: 'hostname',
  status: 'status'
} as const

export type EmployeeScalarFieldEnum = (typeof EmployeeScalarFieldEnum)[keyof typeof EmployeeScalarFieldEnum]


export const ProfileScalarFieldEnum = {
  profile_id: 'profile_id',
  name: 'name',
  description: 'description',
  level: 'level',
  user_hrd: 'user_hrd',
  access_sppd: 'access_sppd',
  access_skpd: 'access_skpd',
  access_attendance: 'access_attendance',
  access_spl: 'access_spl',
  access_srl: 'access_srl',
  access_cuti: 'access_cuti',
  access_ijin: 'access_ijin',
  access_calendar: 'access_calendar',
  access_user: 'access_user',
  access_profile: 'access_profile',
  access_dept: 'access_dept',
  access_setting: 'access_setting',
  status: 'status'
} as const

export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


export const Check_ioScalarFieldEnum = {
  check_io_id: 'check_io_id',
  user_id_machine: 'user_id_machine',
  datetime: 'datetime',
  type: 'type',
  transfer_status: 'transfer_status',
  machine_no: 'machine_no'
} as const

export type Check_ioScalarFieldEnum = (typeof Check_ioScalarFieldEnum)[keyof typeof Check_ioScalarFieldEnum]


export const AttendanceScalarFieldEnum = {
  attendance_id: 'attendance_id',
  user_id_machine: 'user_id_machine',
  check_in: 'check_in',
  check_out: 'check_out',
  check_in2: 'check_in2',
  check_out2: 'check_out2',
  type: 'type',
  ijin_info: 'ijin_info',
  ijin_desc: 'ijin_desc',
  description: 'description',
  attachment: 'attachment',
  reference: 'reference',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
} as const

export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


export const Temp_check_ioScalarFieldEnum = {
  check_io_id: 'check_io_id',
  user_id_machine: 'user_id_machine',
  datetime: 'datetime',
  type: 'type',
  machine_no: 'machine_no'
} as const

export type Temp_check_ioScalarFieldEnum = (typeof Temp_check_ioScalarFieldEnum)[keyof typeof Temp_check_ioScalarFieldEnum]


export const CalendarScalarFieldEnum = {
  calendar_id: 'calendar_id',
  description: 'description',
  type: 'type',
  date: 'date',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
} as const

export type CalendarScalarFieldEnum = (typeof CalendarScalarFieldEnum)[keyof typeof CalendarScalarFieldEnum]


export const SettingScalarFieldEnum = {
  setting_id: 'setting_id',
  start_periode: 'start_periode',
  end_periode: 'end_periode',
  late_dispen: 'late_dispen',
  overtime_allow: 'overtime_allow',
  overtime_round_up: 'overtime_round_up'
} as const

export type SettingScalarFieldEnum = (typeof SettingScalarFieldEnum)[keyof typeof SettingScalarFieldEnum]


export const SplScalarFieldEnum = {
  spl_id: 'spl_id',
  purpose: 'purpose',
  dept: 'dept',
  est_start: 'est_start',
  est_end: 'est_end',
  status1: 'status1',
  approval1: 'approval1',
  status2: 'status2',
  approval2: 'approval2',
  createdAt: 'createdAt'
} as const

export type SplScalarFieldEnum = (typeof SplScalarFieldEnum)[keyof typeof SplScalarFieldEnum]


export const Spl_detailScalarFieldEnum = {
  spl_detail_id: 'spl_detail_id',
  step: 'step',
  spl_id: 'spl_id',
  payroll: 'payroll',
  description: 'description'
} as const

export type Spl_detailScalarFieldEnum = (typeof Spl_detailScalarFieldEnum)[keyof typeof Spl_detailScalarFieldEnum]


export const DeptScalarFieldEnum = {
  dept_id: 'dept_id',
  dept_code: 'dept_code',
  initial: 'initial',
  name: 'name',
  status: 'status'
} as const

export type DeptScalarFieldEnum = (typeof DeptScalarFieldEnum)[keyof typeof DeptScalarFieldEnum]


export const SrlScalarFieldEnum = {
  srl_id: 'srl_id',
  spl_id: 'spl_id',
  payroll: 'payroll',
  real_start: 'real_start',
  real_end: 'real_end',
  status1: 'status1',
  approval1: 'approval1',
  status2: 'status2',
  approval2: 'approval2',
  createdAt: 'createdAt'
} as const

export type SrlScalarFieldEnum = (typeof SrlScalarFieldEnum)[keyof typeof SrlScalarFieldEnum]


export const Srl_detailScalarFieldEnum = {
  srl_detail_id: 'srl_detail_id',
  srl_id: 'srl_id',
  description: 'description',
  status: 'status'
} as const

export type Srl_detailScalarFieldEnum = (typeof Srl_detailScalarFieldEnum)[keyof typeof Srl_detailScalarFieldEnum]


export const CutiScalarFieldEnum = {
  cuti_id: 'cuti_id',
  cuti_group_id: 'cuti_group_id',
  payroll: 'payroll',
  type: 'type',
  description: 'description',
  date: 'date',
  year: 'year',
  status: 'status',
  approval: 'approval',
  is_delegate: 'is_delegate',
  createdAt: 'createdAt'
} as const

export type CutiScalarFieldEnum = (typeof CutiScalarFieldEnum)[keyof typeof CutiScalarFieldEnum]


export const SppdScalarFieldEnum = {
  sppd_id: 'sppd_id',
  purpose: 'purpose',
  location: 'location',
  dept: 'dept',
  start_date: 'start_date',
  end_date: 'end_date',
  duration: 'duration',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
} as const

export type SppdScalarFieldEnum = (typeof SppdScalarFieldEnum)[keyof typeof SppdScalarFieldEnum]


export const Sppd_detailScalarFieldEnum = {
  sppd_detail_id: 'sppd_detail_id',
  step: 'step',
  sppd_id: 'sppd_id',
  payroll: 'payroll',
  description: 'description'
} as const

export type Sppd_detailScalarFieldEnum = (typeof Sppd_detailScalarFieldEnum)[keyof typeof Sppd_detailScalarFieldEnum]


export const SkpdScalarFieldEnum = {
  skpd_id: 'skpd_id',
  sppd_id: 'sppd_id',
  payroll: 'payroll',
  real_start: 'real_start',
  real_end: 'real_end',
  status: 'status',
  createdBy: 'createdBy',
  createdAt: 'createdAt'
} as const

export type SkpdScalarFieldEnum = (typeof SkpdScalarFieldEnum)[keyof typeof SkpdScalarFieldEnum]


export const IjinScalarFieldEnum = {
  ijin_id: 'ijin_id',
  ijin_group_id: 'ijin_group_id',
  payroll: 'payroll',
  type: 'type',
  description: 'description',
  date: 'date',
  status: 'status',
  approval: 'approval',
  is_delegate: 'is_delegate',
  createdAt: 'createdAt'
} as const

export type IjinScalarFieldEnum = (typeof IjinScalarFieldEnum)[keyof typeof IjinScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


export const employeeOrderByRelevanceFieldEnum = {
  payroll: 'payroll',
  user_id_machine: 'user_id_machine',
  profile_id: 'profile_id',
  email: 'email',
  name: 'name',
  password: 'password',
  position: 'position',
  department: 'department',
  location: 'location',
  phone: 'phone',
  approver: 'approver',
  substitute: 'substitute',
  signature: 'signature',
  hostname: 'hostname'
} as const

export type employeeOrderByRelevanceFieldEnum = (typeof employeeOrderByRelevanceFieldEnum)[keyof typeof employeeOrderByRelevanceFieldEnum]


export const profileOrderByRelevanceFieldEnum = {
  profile_id: 'profile_id',
  name: 'name',
  description: 'description',
  access_sppd: 'access_sppd',
  access_skpd: 'access_skpd',
  access_attendance: 'access_attendance',
  access_spl: 'access_spl',
  access_srl: 'access_srl',
  access_cuti: 'access_cuti',
  access_ijin: 'access_ijin',
  access_calendar: 'access_calendar',
  access_user: 'access_user',
  access_profile: 'access_profile',
  access_dept: 'access_dept',
  access_setting: 'access_setting'
} as const

export type profileOrderByRelevanceFieldEnum = (typeof profileOrderByRelevanceFieldEnum)[keyof typeof profileOrderByRelevanceFieldEnum]


export const check_ioOrderByRelevanceFieldEnum = {
  check_io_id: 'check_io_id',
  user_id_machine: 'user_id_machine',
  type: 'type'
} as const

export type check_ioOrderByRelevanceFieldEnum = (typeof check_ioOrderByRelevanceFieldEnum)[keyof typeof check_ioOrderByRelevanceFieldEnum]


export const attendanceOrderByRelevanceFieldEnum = {
  attendance_id: 'attendance_id',
  user_id_machine: 'user_id_machine',
  type: 'type',
  ijin_info: 'ijin_info',
  ijin_desc: 'ijin_desc',
  description: 'description',
  attachment: 'attachment',
  reference: 'reference',
  createdBy: 'createdBy'
} as const

export type attendanceOrderByRelevanceFieldEnum = (typeof attendanceOrderByRelevanceFieldEnum)[keyof typeof attendanceOrderByRelevanceFieldEnum]


export const temp_check_ioOrderByRelevanceFieldEnum = {
  check_io_id: 'check_io_id',
  user_id_machine: 'user_id_machine',
  type: 'type'
} as const

export type temp_check_ioOrderByRelevanceFieldEnum = (typeof temp_check_ioOrderByRelevanceFieldEnum)[keyof typeof temp_check_ioOrderByRelevanceFieldEnum]


export const calendarOrderByRelevanceFieldEnum = {
  calendar_id: 'calendar_id',
  description: 'description',
  createdBy: 'createdBy'
} as const

export type calendarOrderByRelevanceFieldEnum = (typeof calendarOrderByRelevanceFieldEnum)[keyof typeof calendarOrderByRelevanceFieldEnum]


export const settingOrderByRelevanceFieldEnum = {
  setting_id: 'setting_id'
} as const

export type settingOrderByRelevanceFieldEnum = (typeof settingOrderByRelevanceFieldEnum)[keyof typeof settingOrderByRelevanceFieldEnum]


export const splOrderByRelevanceFieldEnum = {
  spl_id: 'spl_id',
  purpose: 'purpose',
  dept: 'dept',
  approval1: 'approval1',
  approval2: 'approval2'
} as const

export type splOrderByRelevanceFieldEnum = (typeof splOrderByRelevanceFieldEnum)[keyof typeof splOrderByRelevanceFieldEnum]


export const spl_detailOrderByRelevanceFieldEnum = {
  spl_detail_id: 'spl_detail_id',
  spl_id: 'spl_id',
  payroll: 'payroll',
  description: 'description'
} as const

export type spl_detailOrderByRelevanceFieldEnum = (typeof spl_detailOrderByRelevanceFieldEnum)[keyof typeof spl_detailOrderByRelevanceFieldEnum]


export const deptOrderByRelevanceFieldEnum = {
  dept_id: 'dept_id',
  dept_code: 'dept_code',
  initial: 'initial',
  name: 'name'
} as const

export type deptOrderByRelevanceFieldEnum = (typeof deptOrderByRelevanceFieldEnum)[keyof typeof deptOrderByRelevanceFieldEnum]


export const srlOrderByRelevanceFieldEnum = {
  srl_id: 'srl_id',
  spl_id: 'spl_id',
  payroll: 'payroll',
  approval1: 'approval1',
  approval2: 'approval2'
} as const

export type srlOrderByRelevanceFieldEnum = (typeof srlOrderByRelevanceFieldEnum)[keyof typeof srlOrderByRelevanceFieldEnum]


export const srl_detailOrderByRelevanceFieldEnum = {
  srl_detail_id: 'srl_detail_id',
  srl_id: 'srl_id',
  description: 'description',
  status: 'status'
} as const

export type srl_detailOrderByRelevanceFieldEnum = (typeof srl_detailOrderByRelevanceFieldEnum)[keyof typeof srl_detailOrderByRelevanceFieldEnum]


export const cutiOrderByRelevanceFieldEnum = {
  cuti_id: 'cuti_id',
  cuti_group_id: 'cuti_group_id',
  payroll: 'payroll',
  type: 'type',
  description: 'description',
  approval: 'approval'
} as const

export type cutiOrderByRelevanceFieldEnum = (typeof cutiOrderByRelevanceFieldEnum)[keyof typeof cutiOrderByRelevanceFieldEnum]


export const sppdOrderByRelevanceFieldEnum = {
  sppd_id: 'sppd_id',
  purpose: 'purpose',
  location: 'location',
  dept: 'dept',
  createdBy: 'createdBy'
} as const

export type sppdOrderByRelevanceFieldEnum = (typeof sppdOrderByRelevanceFieldEnum)[keyof typeof sppdOrderByRelevanceFieldEnum]


export const sppd_detailOrderByRelevanceFieldEnum = {
  sppd_detail_id: 'sppd_detail_id',
  sppd_id: 'sppd_id',
  payroll: 'payroll',
  description: 'description'
} as const

export type sppd_detailOrderByRelevanceFieldEnum = (typeof sppd_detailOrderByRelevanceFieldEnum)[keyof typeof sppd_detailOrderByRelevanceFieldEnum]


export const skpdOrderByRelevanceFieldEnum = {
  skpd_id: 'skpd_id',
  sppd_id: 'sppd_id',
  payroll: 'payroll',
  createdBy: 'createdBy'
} as const

export type skpdOrderByRelevanceFieldEnum = (typeof skpdOrderByRelevanceFieldEnum)[keyof typeof skpdOrderByRelevanceFieldEnum]


export const ijinOrderByRelevanceFieldEnum = {
  ijin_id: 'ijin_id',
  ijin_group_id: 'ijin_group_id',
  payroll: 'payroll',
  type: 'type',
  description: 'description',
  approval: 'approval'
} as const

export type ijinOrderByRelevanceFieldEnum = (typeof ijinOrderByRelevanceFieldEnum)[keyof typeof ijinOrderByRelevanceFieldEnum]



/**
 * Field references 
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'employee_status'
 */
export type Enumemployee_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'employee_status'>
    


/**
 * Reference to a field of type 'profile_status'
 */
export type Enumprofile_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'profile_status'>
    


/**
 * Reference to a field of type 'calendar_type'
 */
export type Enumcalendar_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'calendar_type'>
    


/**
 * Reference to a field of type 'spl_status1'
 */
export type Enumspl_status1FieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'spl_status1'>
    


/**
 * Reference to a field of type 'spl_status2'
 */
export type Enumspl_status2FieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'spl_status2'>
    


/**
 * Reference to a field of type 'dept_status'
 */
export type Enumdept_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'dept_status'>
    


/**
 * Reference to a field of type 'srl_status1'
 */
export type Enumsrl_status1FieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'srl_status1'>
    


/**
 * Reference to a field of type 'srl_status2'
 */
export type Enumsrl_status2FieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'srl_status2'>
    


/**
 * Reference to a field of type 'cuti_status'
 */
export type Enumcuti_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'cuti_status'>
    


/**
 * Reference to a field of type 'skpd_status'
 */
export type Enumskpd_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'skpd_status'>
    


/**
 * Reference to a field of type 'ijin_status'
 */
export type Enumijin_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ijin_status'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *   { emit: 'stdout', level: 'query' },
   *   { emit: 'stdout', level: 'info' },
   *   { emit: 'stdout', level: 'warn' }
   *   { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  employee?: Prisma.employeeOmit
  profile?: Prisma.profileOmit
  check_io?: Prisma.check_ioOmit
  attendance?: Prisma.attendanceOmit
  temp_check_io?: Prisma.temp_check_ioOmit
  calendar?: Prisma.calendarOmit
  setting?: Prisma.settingOmit
  spl?: Prisma.splOmit
  spl_detail?: Prisma.spl_detailOmit
  dept?: Prisma.deptOmit
  srl?: Prisma.srlOmit
  srl_detail?: Prisma.srl_detailOmit
  cuti?: Prisma.cutiOmit
  sppd?: Prisma.sppdOmit
  sppd_detail?: Prisma.sppd_detailOmit
  skpd?: Prisma.skpdOmit
  ijin?: Prisma.ijinOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw' 
  | 'groupBy'

/**
 * These options are being passed into the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => runtime.Types.Utils.JsPromise<T>,
) => runtime.Types.Utils.JsPromise<T>

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

