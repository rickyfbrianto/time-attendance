generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model employee {
  payroll                                         String       @id @db.VarChar(8)
  user_id_machine                                 String       @unique(map: "user_id_mesin") @db.VarChar(6)
  profile_id                                      String?      @db.VarChar(50)
  email                                           String       @unique(map: "Employee_Email_key") @db.VarChar(100)
  name                                            String       @db.VarChar(250)
  password                                        String       @db.VarChar(250)
  position                                        String       @db.VarChar(100)
  department                                      String?      @db.VarChar(6)
  location                                        String       @db.VarChar(100)
  phone                                           String       @db.VarChar(13)
  workhour                                        Int          @default(8) @db.SmallInt
  approver                                        String?      @db.VarChar(8)
  substitute                                      String?      @db.VarChar(8)
  signature                                       String       @db.VarChar(250)
  attendance_attendance_createdByToemployee       attendance[] @relation("attendance_createdByToemployee")
  attendance_attendance_user_id_machineToemployee attendance[] @relation("attendance_user_id_machineToemployee")
  check_io                                        check_io[]
  profile                                         profile?     @relation(fields: [profile_id], references: [profile_id], map: "Employee_profile_id_fkey")
  employee_employee_approverToemployee            employee?    @relation("employee_approverToemployee", fields: [approver], references: [payroll])
  other_employee_employee_approverToemployee      employee[]   @relation("employee_approverToemployee")
  dept                                            dept?        @relation(fields: [department], references: [dept_code])
  employee_employee_substituteToemployee          employee?    @relation("employee_substituteToemployee", fields: [substitute], references: [payroll])
  other_employee_employee_substituteToemployee    employee[]   @relation("employee_substituteToemployee")
  spl_spl_createdByToemployee                     spl[]        @relation("spl_createdByToemployee")
  spl_detail                                      spl_detail[]
  srl_srl_createdByToemployee                     srl[]        @relation("srl_createdByToemployee")
  srl                                             srl[]

  @@index([profile_id], map: "Employee_profile_id_fkey")
  @@index([department], map: "employee_department_fkey")
  @@index([approver], map: "approver")
  @@index([substitute], map: "substitute")
  @@fulltext([payroll, user_id_machine, profile_id, email, name, position, department, location, phone], map: "payroll")
}

model profile {
  profile_id        String        @id @db.VarChar(50)
  name              String        @db.VarChar(100)
  description       String        @db.VarChar(255)
  level             profile_level
  user_hrd          Boolean
  access_sppd       String        @db.VarChar(4)
  access_skpd       String        @db.VarChar(4)
  access_attendance String        @db.VarChar(4)
  access_spl        String        @db.VarChar(4)
  access_srl        String        @db.VarChar(4)
  access_cuti       String        @db.VarChar(4)
  access_calendar   String        @db.VarChar(4)
  access_user       String        @db.VarChar(4)
  access_profile    String        @db.VarChar(4)
  employee          employee[]
}

model check_io {
  check_io_id     String    @id @db.VarChar(40)
  user_id_machine String?   @db.VarChar(6)
  check_in        DateTime  @db.DateTime(0)
  check_out       DateTime  @db.DateTime(0)
  type            String    @db.VarChar(50)
  createdAt       DateTime  @default(now()) @db.DateTime(0)
  employee        employee? @relation(fields: [user_id_machine], references: [user_id_machine], map: "Check_io_user_id_machine_fkey")

  @@index([user_id_machine], map: "Check_io_user_id_mesin_fkey")
}

model attendance {
  attendance_id                                 String    @id @db.VarChar(40)
  user_id_machine                               String?   @db.VarChar(6)
  check_in                                      DateTime  @db.DateTime(0)
  check_out                                     DateTime  @db.DateTime(0)
  check_in2                                     DateTime? @db.DateTime(0)
  check_out2                                    DateTime? @db.DateTime(0)
  type                                          String    @db.VarChar(50)
  description                                   String    @db.VarChar(255)
  attachment                                    String?   @db.Text
  createdBy                                     String?   @db.VarChar(8)
  createdAt                                     DateTime  @default(now()) @db.DateTime(0)
  employee_attendance_createdByToemployee       employee? @relation("attendance_createdByToemployee", fields: [createdBy], references: [payroll], map: "Attendance_created_by_fkey")
  employee_attendance_user_id_machineToemployee employee? @relation("attendance_user_id_machineToemployee", fields: [user_id_machine], references: [user_id_machine], map: "Attendance_user_id_machine_fkey")

  @@index([createdBy], map: "createdBy")
  @@index([user_id_machine], map: "user_id_mesin")
}

model temp_check_io {
  check_io_id     String   @id @db.VarChar(40)
  user_id_machine String   @db.VarChar(6)
  datetime        DateTime @db.DateTime(0)
  type            String   @db.VarChar(50)

  @@index([user_id_machine], map: "user_id_mesin")
}

model calendar {
  calendar_id String         @id @db.VarChar(40)
  description String?        @db.VarChar(255)
  type        calendar_type?
  date        DateTime?      @db.Date
}

model setting {
  setting_id    String @id @db.VarChar(40)
  start_periode Int    @default(17) @db.TinyInt
  end_periode   Int    @default(16) @db.TinyInt
}

model spl {
  spl_id             String       @id @db.VarChar(40)
  est_start          DateTime     @db.DateTime(0)
  est_end            DateTime     @db.DateTime(0)
  createdBy          String?      @db.VarChar(8)
  createdAt          DateTime     @default(now()) @db.DateTime(0)
  status             spl_status   @default(OPEN)
  employee_createdBy employee?    @relation("spl_createdByToemployee", fields: [createdBy], references: [payroll], map: "spl_createBy_by_fkey")
  spl_detail         spl_detail[]
  srl                srl[]

  @@index([createdBy], map: "createdBy")
}

model spl_detail {
  spl_detail_id String    @id @db.VarChar(40)
  step          Int       @db.TinyInt
  spl_id        String    @db.VarChar(40)
  payroll       String?   @db.VarChar(8)
  description   String    @db.VarChar(255)
  employee      employee? @relation(fields: [payroll], references: [payroll])
  spl           spl       @relation(fields: [spl_id], references: [spl_id], onDelete: Cascade)

  @@index([spl_id], map: "spl_id")
  @@index([payroll], map: "payroll")
}

model dept {
  dept_id   String      @id @db.VarChar(40)
  dept_code String      @unique(map: "dept_code") @db.VarChar(6)
  name      String      @db.VarChar(100)
  status    dept_status
  employee  employee[]

  @@fulltext([dept_code, name], map: "dept_code_2")
}

model srl {
  srl_id                           String       @id @db.VarChar(40)
  spl_id                           String?      @db.VarChar(40)
  payroll                          String?      @db.VarChar(8)
  real_start                       DateTime     @db.DateTime(0)
  real_end                         DateTime     @db.DateTime(0)
  status                           srl_status
  createdBy                        String?      @db.VarChar(8)
  createdAt                        DateTime     @db.DateTime(0)
  employee_srl_createdByToemployee employee?    @relation("srl_createdByToemployee", fields: [createdBy], references: [payroll], map: "srl_created_by_fkey")
  employee                         employee?    @relation(fields: [payroll], references: [payroll])
  spl                              spl?         @relation(fields: [spl_id], references: [spl_id])
  srl_detail                       srl_detail[]

  @@index([payroll], map: "payroll")
  @@index([spl_id], map: "spl_id")
  @@index([createdBy], map: "createdBy")
}

model srl_detail {
  srl_detail_id String  @id @db.VarChar(40)
  srl_id        String? @db.VarChar(40)
  description   String  @db.VarChar(255)
  status        String  @db.VarChar(50)
  srl           srl?    @relation(fields: [srl_id], references: [srl_id], onDelete: Cascade)

  @@index([srl_id], map: "srl_id")
}

model cuti {
  cuti_id  String      @id @db.VarChar(40)
  payroll  String      @db.VarChar(8)
  datetime DateTime    @db.DateTime(0)
  status   cuti_status

  @@index([payroll], map: "payroll")
}

enum profile_level {
  L0
  L1
  L2
  L3
  L4
  L5
  L6
  L7
  L8
  L9
}

enum calendar_type {
  Hari_Libur   @map("Hari Libur")
  Cuti_Bersama @map("Cuti Bersama")
  Event_Kantor @map("Event Kantor")
}

enum dept_status {
  Aktif
  Nonaktif
}

enum cuti_status {
  Waiting
  Reject
  Approved
}

enum spl_status {
  OPEN
  CLOSE
}

enum srl_status {
  OPEN
  CLOSE
}
